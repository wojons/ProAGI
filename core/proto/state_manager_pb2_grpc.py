# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import state_manager_pb2 as state__manager__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in state_manager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class StateManagerStub(object):
    """Service for managing application state, including versioned definitions (Git/YAML)
    and volatile runtime state (Redis).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDefinitionFileContent = channel.unary_unary(
                '/statemanager.StateManager/GetDefinitionFileContent',
                request_serializer=state__manager__pb2.GetDefinitionFileContentRequest.SerializeToString,
                response_deserializer=state__manager__pb2.GetDefinitionFileContentResponse.FromString,
                _registered_method=True)
        self.SetDefinitionFileContent = channel.unary_unary(
                '/statemanager.StateManager/SetDefinitionFileContent',
                request_serializer=state__manager__pb2.SetDefinitionFileContentRequest.SerializeToString,
                response_deserializer=state__manager__pb2.SetDefinitionFileContentResponse.FromString,
                _registered_method=True)
        self.DeleteDefinitionFile = channel.unary_unary(
                '/statemanager.StateManager/DeleteDefinitionFile',
                request_serializer=state__manager__pb2.DeleteDefinitionFileRequest.SerializeToString,
                response_deserializer=state__manager__pb2.DeleteDefinitionFileResponse.FromString,
                _registered_method=True)
        self.ListDefinitionDirectory = channel.unary_unary(
                '/statemanager.StateManager/ListDefinitionDirectory',
                request_serializer=state__manager__pb2.ListDefinitionDirectoryRequest.SerializeToString,
                response_deserializer=state__manager__pb2.ListDefinitionDirectoryResponse.FromString,
                _registered_method=True)
        self.GetRuntimeValue = channel.unary_unary(
                '/statemanager.StateManager/GetRuntimeValue',
                request_serializer=state__manager__pb2.GetRuntimeValueRequest.SerializeToString,
                response_deserializer=state__manager__pb2.GetRuntimeValueResponse.FromString,
                _registered_method=True)
        self.SetRuntimeValue = channel.unary_unary(
                '/statemanager.StateManager/SetRuntimeValue',
                request_serializer=state__manager__pb2.SetRuntimeValueRequest.SerializeToString,
                response_deserializer=state__manager__pb2.SetRuntimeValueResponse.FromString,
                _registered_method=True)
        self.DeleteRuntimeValue = channel.unary_unary(
                '/statemanager.StateManager/DeleteRuntimeValue',
                request_serializer=state__manager__pb2.DeleteRuntimeValueRequest.SerializeToString,
                response_deserializer=state__manager__pb2.DeleteRuntimeValueResponse.FromString,
                _registered_method=True)


class StateManagerServicer(object):
    """Service for managing application state, including versioned definitions (Git/YAML)
    and volatile runtime state (Redis).
    """

    def GetDefinitionFileContent(self, request, context):
        """Definition/Config State (Git/YAML)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDefinitionFileContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDefinitionFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDefinitionDirectory(self, request, context):
        """rpc GetFileHistory (GetFileHistoryRequest) returns (GetFileHistoryResponse); // Future: Get file history/commits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRuntimeValue(self, request, context):
        """Runtime State (Redis)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRuntimeValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRuntimeValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StateManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDefinitionFileContent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDefinitionFileContent,
                    request_deserializer=state__manager__pb2.GetDefinitionFileContentRequest.FromString,
                    response_serializer=state__manager__pb2.GetDefinitionFileContentResponse.SerializeToString,
            ),
            'SetDefinitionFileContent': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDefinitionFileContent,
                    request_deserializer=state__manager__pb2.SetDefinitionFileContentRequest.FromString,
                    response_serializer=state__manager__pb2.SetDefinitionFileContentResponse.SerializeToString,
            ),
            'DeleteDefinitionFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDefinitionFile,
                    request_deserializer=state__manager__pb2.DeleteDefinitionFileRequest.FromString,
                    response_serializer=state__manager__pb2.DeleteDefinitionFileResponse.SerializeToString,
            ),
            'ListDefinitionDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDefinitionDirectory,
                    request_deserializer=state__manager__pb2.ListDefinitionDirectoryRequest.FromString,
                    response_serializer=state__manager__pb2.ListDefinitionDirectoryResponse.SerializeToString,
            ),
            'GetRuntimeValue': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRuntimeValue,
                    request_deserializer=state__manager__pb2.GetRuntimeValueRequest.FromString,
                    response_serializer=state__manager__pb2.GetRuntimeValueResponse.SerializeToString,
            ),
            'SetRuntimeValue': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRuntimeValue,
                    request_deserializer=state__manager__pb2.SetRuntimeValueRequest.FromString,
                    response_serializer=state__manager__pb2.SetRuntimeValueResponse.SerializeToString,
            ),
            'DeleteRuntimeValue': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRuntimeValue,
                    request_deserializer=state__manager__pb2.DeleteRuntimeValueRequest.FromString,
                    response_serializer=state__manager__pb2.DeleteRuntimeValueResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'statemanager.StateManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('statemanager.StateManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StateManager(object):
    """Service for managing application state, including versioned definitions (Git/YAML)
    and volatile runtime state (Redis).
    """

    @staticmethod
    def GetDefinitionFileContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statemanager.StateManager/GetDefinitionFileContent',
            state__manager__pb2.GetDefinitionFileContentRequest.SerializeToString,
            state__manager__pb2.GetDefinitionFileContentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDefinitionFileContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statemanager.StateManager/SetDefinitionFileContent',
            state__manager__pb2.SetDefinitionFileContentRequest.SerializeToString,
            state__manager__pb2.SetDefinitionFileContentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDefinitionFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statemanager.StateManager/DeleteDefinitionFile',
            state__manager__pb2.DeleteDefinitionFileRequest.SerializeToString,
            state__manager__pb2.DeleteDefinitionFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDefinitionDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statemanager.StateManager/ListDefinitionDirectory',
            state__manager__pb2.ListDefinitionDirectoryRequest.SerializeToString,
            state__manager__pb2.ListDefinitionDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRuntimeValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statemanager.StateManager/GetRuntimeValue',
            state__manager__pb2.GetRuntimeValueRequest.SerializeToString,
            state__manager__pb2.GetRuntimeValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetRuntimeValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statemanager.StateManager/SetRuntimeValue',
            state__manager__pb2.SetRuntimeValueRequest.SerializeToString,
            state__manager__pb2.SetRuntimeValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRuntimeValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statemanager.StateManager/DeleteRuntimeValue',
            state__manager__pb2.DeleteRuntimeValueRequest.SerializeToString,
            state__manager__pb2.DeleteRuntimeValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
