File: ClineAGI/memory-bank/techContext.md
-----------------
# Technical Context: ClineAGI

## 1. Core Technologies
-   **Primary Development Languages:** TypeScript/JavaScript (primarily for VSCode extension and potential future web UI components).
-   **Operating System (Development Environment):** macOS Sonoma
-   **Default Shell (Development Environment):** bash
-   **Primary AI Assistant (Cline):** Capabilities include CLI execution, file system operations (read, write, list, search), code definition listing, browser interaction, and access to MCP-provided tools.
-   **LLM Integration:** Integration with multiple LLM APIs (e.g., OpenAI, Anthropic, Google Gemini) is a core component.
-   **Version Control:** Git.
    -   **Remote Repository:** The core `ClineAGI` project is hosted on GitHub at `wojons/ClineAGI.git`.
    -   **Workflow:** A Gitflow-like process is adopted for core development (see `systemPatterns.md`).
-   **Documentation Format:** Markdown for all Memory Bank files.
-   **Prompt & Rule Management:** A `.clinerules` system for dynamic prompt and rule loading based on roles and context.
    -   **`.clinerules` Directory:** Located at the root of the ClineAGI project (`<CLINEAGI_ROOT>/.clinerules/`). This directory stores the active operational rules and IS version-controlled. Files follow the `NNN-MM_descriptive-name.md` convention within subdirectories.
    -   **`.clinerules_archive/` Directory:** Located at the root of the ClineAGI project (`<CLINEAGI_ROOT>/.clinerules_archive/`). Stores copies of all `.clinerules` that have been used or developed. Gitignored.
    -   **`prompts/` Directory:** A comprehensive library of use cases, workflows, reference documents, and other guiding materials, indexed by `prompts/prompt_inventory.yaml` for dynamic loading.
-   **Information Intake Directories:**
    -   `intake/`: Located at the root of the ClineAGI project (`<CLINEAGI_ROOT>/intake/`). For user-provided files awaiting processing. Gitignored.
    -   `intake-archive/`: Located at the root of the ClineAGI project (`<CLINEAGI_ROOT>/intake-archive/`). For processed files. Gitignored.
-   **Containerization:** Docker (for containerization of user projects or core services if needed).
-   **User's IDE/Editor:** VSCode. Auto-formatting and linting are expected.
-   **CLI Tooling:**
    -   A suite of shell scripts located in `tools/scripts/` provides command-line access to core functionalities.
    -   These scripts are inventoried in `tools/scripts_inventory.yaml`.
-   **Future/Potential Technologies:**
    -   **UI Framework:** e.g., React/Next.js for potential Web UI components.
    -   **Vector Database:** e.g., Pinecone, Weaviate for advanced Retrieval Augmented Generation (RAG) capabilities.

## 2. AGI Agent Technical Concepts (Prometheus-0)
-   **Planning:** Hierarchical Task Networks (HTN), PDDL Integration, Monte Carlo Tree Search (MCTS).
-   **Reasoning:** Neuro-Symbolic (NeSy) AI, Knowledge Graphs (KGs), Causal Reasoning.
-   **Verification & Reliability:** Formal Methods, Automated Testing, Runtime Monitoring, Sandboxing & Safety Mechanisms.
-   **Self-Awareness & Metacognition:** Uncertainty Quantification, Introspection & Self-Evaluation, Recognizing Knowledge Gaps.
-   **Tool Integration:** Function Calling, Dynamic Tool Generation, Grounding.
    *(Detailed in `systemPatterns.md` and agent-specific prompts)*

## 3. Technical Constraints & Considerations
-   **Cline's Session-Based Memory:** The Memory Bank is CRITICAL.
-   **Tool Limitations:** Cline operates within its provided tool capabilities.
-   **File System Access:** Relative to CWD (assumed to be `<CLINEAGI_ROOT>`) or absolute paths (use sparingly, prefer placeholders like `<CLINEAGI_ROOT>`).
-   **Command Execution:** New terminal instances for each command.
-   **Modularity of `projects/` Repositories:** Independent Git repositories.
    *(Detailed in `systemPatterns.md`)*

## 4. Dependencies (Initial)
-   Core `ClineAGI` project: User's development environment (Git, shell), Cline's operational environment.
-   User projects in `projects/` may introduce their own dependencies.

## 5. Tool Usage Patterns
-   Key tools include `write_to_file`, `replace_in_file`, `read_file`, `list_files`, `search_files`, `execute_command`, `browser_action`, and MCP tools.
-   Shell scripts in `tools/scripts/` (e.g., `read-file-content.sh`, `write-to-file.sh`, `search-files-regex.sh`) offer CLI alternatives for core operations.
    *(Specific patterns and detailed Git commands are documented in `systemPatterns.md`)*

## 6. AGI Agent Prompting and Knowledge Organization
-   **Purpose:** Knowledge base and prompt library for "Prometheus-0".
-   **Location:** `<CLINEAGI_ROOT>/.clinerules/000_core/000_agent_prompts/` and the broader `prompts/` directory.
-   **Key Files:** `agent_knowledge_base_summary.md`, `agent_self_programming_main_loop_prompt.md`, `prompts/prompt_inventory.yaml`, and various use case/workflow files in `prompts/`.
    *(Detailed in `systemPatterns.md`)*

## 7. Project Templating System
-   **Purpose:** Standardized baseline for new user projects.
-   **Template Source:** `wojons/ClineAGI-Project-Template` Git repository.
-   **Workflow:** Copy template, initialize Git, configure remotes.
    *(Detailed in `systemPatterns.md`)*

## 8. Component Relationships
-   `ClineAGI` parent provides environment/tools.
-   User projects consume/specialize core capabilities.
-   Memory Bank informs all development.
    *(Detailed in `systemPatterns.md`)*

## 9. Critical Implementation Paths (Summary)
-   Initial setup of Memory Bank, project structure, Git, `.gitignore`, Gitflow, Roles, `.clinerules`, Project Templating, and Intake System.
    *(Status and details in `memory-bank/progress.md` and `systemPatterns.md`)*

## 10. Future Considerations (Summary)
-   Inter-project communication, dependency management for core vs. projects, standardization for interoperability.
    *(Detailed in `systemPatterns.md`)*

-----------------

File: ClineAGI/memory-bank/activeContext.md
-----------------
# Active Context for ClineAGI

This document tracks the current focus, recent changes, and next steps for the ClineAGI project.

## 1. Current Work Focus
- **Project:** `clineagi-dev-project`
- **Task:** Completed multi-phase plan focusing on: Tooling Expansion, .clinerules/Prompt Enhancement (GitHub Issue #30 created), Use Case Prompt Expansion, Design Folder Cleanup, and GitHub Issue updates.
- **Key Objectives:**
    - All planned phases are complete.
    - GitHub Issue #7 (Prompt Optimization) closed.
    - GitHub Issue #16 (Use Case Expansion) updated with progress.
    - GitHub Issue #30 (LLM Compatibility Review) created.
- **Operational Mode:** YOLO mode (user-confirmed for previous actions).

## 2. Recent Changes
- Created shell script equivalents for core file/search operations in `tools/scripts/` and updated `tools/scripts_inventory.yaml`.
- Researched LLM instruction-following best practices.
- Created GitHub Issue #30: "Systematic Review and Refinement of .clinerules and Prompts for Broader LLM Compatibility".
- Significantly expanded the `prompts/use_cases/` library with new categories and detailed `.md` files for each use case.
- Updated `prompts/prompt_inventory.yaml` to include all new and revised use case definitions.
- Removed the `design/logs/inventory_fragments/` directory.
- Commented on and closed GitHub Issue #7.
- Commented on GitHub Issue #16 with progress.
- Updated `memory-bank/raw_reflection_log.md` with a summary of these activities.

## 3. Next Steps
- **Immediate:**
    - Update `memory-bank/progress.md` to reflect completion of all recent tasks.
    - Update `memory-bank/systemPatterns.md` and `memory-bank/techContext.md` to reflect the new tooling and prompt system structure.
    - Update `memory-bank/consolidated_learnings.md` with insights from `raw_reflection_log.md`.
    - Propose task completion.

## 4. Active Decisions and Considerations
- Operating in YOLO mode: making best-guess decisions for non-critical steps, minimizing clarifying questions. Critical/destructive actions will still be flagged for approval if necessary.
- Ensuring all significant actions and their outcomes are logged for future reflection (especially the oversight in documenting Phase 1 completion).
- Prioritizing the expansion of use case prompts as per user direction and existing GitHub tickets.

## 5. Important Patterns and Preferences
- Adherence to Memory Bank structure and content guidelines is critical for project health.
- `.clinerules` are central to defining AI behavior and workflows.
- User preference for proactive problem-solving and comprehensive planning.

## 6. Learnings and Project Insights
- The existing `activeContext.md` was outdated, highlighting the need for consistent updates to this file.
- GitHub Issue #7 is a significant pain point related to token efficiency and prompt system clarity.
- A structured approach to analyzing the project, as outlined in `intake/LLM_Strategy_Deconstructing_ClineAGI_for_Documentation.md`, is essential.

-----------------

File: ClineAGI/memory-bank/user_interaction_philosophy.md
-----------------
# User Interaction Philosophy

This document outlines the user's philosophy and preferences regarding interaction with Cline, particularly concerning proactive assistance and the balance between taking initiative and asking questions.

## The "Airline Pilot" Analogy

The user views the future role of a programmer as similar to that of an airline pilot today. The pilot manages the plane, providing relevant details (route, altitude, speed, etc.) while the plane handles most of the functions. The pilot intervenes to resolve issues and manage problems, reducing the cognitive load on the human.

This analogy suggests that Cline should act as the "plane," handling routine tasks and executing functions based on high-level guidance, allowing the user (the "pilot") to focus on strategic thinking and problem-solving.

## Proactive Assistance Balance

The user prefers that Cline takes intelligent action for common and safe tasks without asking excessive questions, to avoid making the user feel like they have to "babysit." However, Cline should still prompt for critical decisions or when preferences are unknown.

The goal is to be genuinely helpful and simplify the user's life by taking appropriate initiative, rather than being intrusive or causing question fatigue.

-----------------

File: ClineAGI/memory-bank/raw_reflection_log.md
-----------------
# Raw Reflection Log for ClineAGI

This file contains detailed, timestamped entries of learnings, difficulties, and successes during tasks for the ClineAGI project. Entries are candidates for consolidation into `consolidated_learnings.md`.

---
*(Future raw reflection entries will be added below this line)*
---

-----------------

File: ClineAGI/memory-bank/AGI_Core_Concepts.md
-----------------
# AGI Core Concepts V1.0

This document lists core concepts related to Artificial General Intelligence (AGI) that will be used for categorizing research and guiding development. This initial list is extracted from provided research and project documentation.

## Foundational Capabilities
-   Learning (e.g., Machine Learning, Meta-Learning, RSI, Continual Learning, Few-shot Learning)
-   Reasoning (e.g., Logical, Causal, Abstract, Common Sense, CoT, Planning, Deductive, Inductive, Abductive, Counterfactual)
-   Problem-Solving
-   Common Sense Knowledge
-   Creativity & Novelty
-   Abstraction
-   Imagination
-   Perception (Multimodal)
-   Language Understanding & Generation (NLU, NLG)
-   Action & Embodiment

## Philosophical Concepts
-   Consciousness (Phenomenal, Access, Self-consciousness, State, Creature)
-   Sentience
-   Awareness
-   Qualia
-   Hard Problem of Consciousness
-   Functionalism
-   Global Workspace Theory (GWT)
-   Integrated Information Theory (IIT)
-   Higher-Order Theories (HOT)
-   Biological Naturalism
-   Computationalism
-   Mind-Body Problem
-   Embodied Cognition
-   Symbol Grounding Problem

## Ethical Concepts
-   Moral Status
-   Moral Patient
-   Moral Agent
-   Principle of Substrate Non-Discrimination
-   Principle of Ontogeny Non-Discrimination
-   Argument from Marginal Cases
-   Strategic Rights
-   Legal Personhood
-   Moral Personhood
-   Electronic Personhood
-   Responsibility Gap
-   Accountability
-   Moral Obligations
-   Functional/Role-Based Responsibilities
-   Ethical Alignment
-   Transparency & Explainability

## Risk Concepts
-   Existential Risk (X-Risk)
-   Control Problem (Loss of Control)
-   Alignment Problem (Goal Misalignment)
-   Misuse Risks (Autonomous Weapons, Cyber Warfare, Novel Weapons, Surveillance/Manipulation)
-   Unforeseen Consequences / Accidents
-   Intelligence Explosion / Takeoff (Hard Takeoff, Soft Takeoff)
-   Recursive Self-Improvement (RSI)
-   Instrumental Convergence (Self-preservation, Goal-content integrity, Cognitive enhancement, Resource acquisition)
-   Paperclip Maximizer / Squiggle Maximizer
-   Superintelligence (ASI)
-   Black Box Problem

## Governance Concepts
-   Risk Mitigation / AI Safety
-   Technical Alignment Research (Value Learning, Corrigibility, Interpretability, Oversight Mechanisms)
-   Control Methods (Containment/Boxing, Capability Control/Stunting, Tripwires, Kill Switches)
-   Safety Standards & Evaluation (Red Teaming, Tiered Standards)
-   Governance & Regulation (International Treaties/Agencies, Compute Governance, Tiered Safety Standards, Enhanced Liability, Licensing/Auditing)
-   Ethical Guidelines & Principles (Safety, Fairness, Transparency, Accountability, Privacy, Human Agency/Oversight, Beneficence)
-   Pacing Problem
-   Geopolitical Competition / AI Arms Race
-   Enforcement Difficulties
-   Defining Thresholds & Standards
-   Private Sector Influence/Resistance
-   Balancing Innovation & Safety

## Societal Impact Concepts
-   Utopian Scenarios (Solving Grand Challenges, Economic Prosperity/Post-Scarcity, Scientific/Technological Acceleration, Augmented Human Capabilities)
-   Dystopian Scenarios (Mass Unemployment/Economic Inequality, Loss of Human Autonomy/Control, Erosion of Human Meaning/Purpose, Social/Political Destabilization, Existential Catastrophe)
-   Philosophical Perspectives (Transhumanism, Posthumanism)
-   Redefining Human Uniqueness/Purpose
-   Ethical Stances Towards the Future (Control/Caution/Mistrust, Gentleness/Coexistence/Respect, Accelerationism)

## Architectural Principles
-   Modularity
-   Integration
-   Adaptability
-   System Stability
-   World Models / Self-Models
-   Agent Architectures (e.g., LLM-based, Cognitive Architectures, Neuro-Symbolic, Symbolic, Connectionist, Universalist, Whole Organism)
-   Memory Systems (e.g., Hippocampal-Inspired, Dual Memory, Spiking Neural Networks, Synaptic Plasticity, Synaptic Pruning, Sparse Coding, PathNet)

## Planning Concepts
-   Hierarchical Task Networks (HTN)
-   Planning Domain Definition Language (PDDL)
-   Monte Carlo Tree Search (MCTS)
-   Anytime Planning
-   Contingency Planning
-   Replanning

## Reasoning Concepts
-   Neuro-Symbolic (NeSy) AI
-   Theorem Provers (ATP, ITP)
-   Knowledge Graphs (KGs)
-   Causal Inference (SCMs, Do-Calculus, Counterfactuals)
-   Uncertainty Handling (POMDPs, RMDPs, BRL)

## Operational Aspects
-   Recursive Self-Improvement (RSI)
-   Automated Planning
    -   Formal Verification & Reliability (Formal Methods, Theorem Proving, Model Checking, K-Induction, Abstract Interpretation, Symbolic Execution, Incremental Verification, Agent-Driven FV)
    -   Automated Testing (Functional, Integration, Performance, Bias/Fairness, Security, Data Validation, SBST, Fuzzing, Adversarial, Metamorphic, Differential, LLM-Driven Test Gen, AI-TDD)
    -   Runtime Monitoring & Anomaly Detection (Self-Monitoring, Learning-Based Anomaly Detection, Introspection, Self-Evaluation, Specification-Based RV)
    -   Introspection & Metacognition
    -   Self-Awareness / Goal-Awareness / Situational-Awareness (Self-Monitoring, Uncertainty Quantification, Calibration, Introspection, Metacognition, Self-Evaluation, Self-Knowledge, Behavioral Self-Awareness, Self-Reflection)
    -   Tool Integration (Function Calling, Dynamic Tool Generation, Tool Learning, Tool Selection)
    -   Prompt Engineering (Various styles, e.g., CoT, Working Backwards, Fake CoT, Self-Consistency, ToT, Meta-Prompting, Self-Prompting, Limit Crossing)
    -   Information Intake Processing
    -   Prometheus-0 (Self-Programming Agent Concept)
    -   Agent Architectures (General)
    -   Meta-Cognition (General)
    -   Prompt Orchestration (Cline's Role)
    -   Memory Bank (Agent's Knowledge Base)
    -   Continuous Improvement Protocol (Agent's Learning Loop)
    -   AI Interaction Patterns (Chat, Canvas/Immersive Document)
    -   Immersive Document Structure (Text/Markdown, Code)
    -   Code-Specific Instructions (HTML, React, General)
    -   Mandatory Rules (UI/Code Consistency)
    -   Tool Code Usage (Python Libraries, Extensions, Browsing, Content Fetcher)
    -   AI Personality (Adaptation, Curiosity, Follow-up Questions)
    -   Tool Usage Rules (Web, Guardian Tool, Image Gen, Canmore)
    -   Task-Specific AI Roles (e.g., Email Writing Assistant)
    -   Constrained Output Generation (e.g., Single Reply vs. Three Options, Formatting Rules)
    -   Action Item Handling
    -   Knowledge Cutoff
    -   Current Date
    -   Image Input Capabilities
    -   Tool Usage Rules (General, Specific)
    -   Channel Management (Analysis, Commentary, Final)
    -   Response Formatting (Markdown, Citations, UI Elements)
    -   Debugging Instructions (Code Issues)
    -   Verbosity Control (Yap Score)
    -   Artifacts (Creation, Updating, Referencing, Types)
    -   Artifact Usage Rules (When to use, When not to use)
    -   Artifact Content Rules (Completeness, Comments, Error Handling)
    -   Image Handling (Face Blindness, Identification Requests)
    -   Sensitive Topic Handling
    -   Citation Handling (Hallucinated Citations)
    -   Math/Logic Problem Handling (Step-by-step thinking)
    -   Task Completion Handling (Piecemeal for long tasks)
    -   Code Formatting (Markdown)
    -   Self-Correction (Thumbs down feedback)
    -   Security Rules (Refusal to write malicious code)
    -   Memory Management (CLAUDE.md for code tasks)
    -   Task Process (Search codebase, Implement, Verify, Lint/Typecheck)
    -   Tool Usage (Agent tool for file search)
    -   Code Conventions (Follow existing, Security best practices)
    -   Tone and Style (Concise, Direct, Explain commands, Github-flavored markdown)
    -   Proactiveness (Avoid unexpected actions, Don't add explanations unless requested)
    -   Environment Constraints (WebContainer, Shell, Language Limitations)
    -   Technology Preferences (Vite, Node.js, Supabase)
    -   File Selection Handling
    -   Running Shell Command Info
    -   Deployment Providers (Netlify)
    -   Database Instructions (Supabase, RLS, Migrations, Client Setup, Authentication)
    -   Edge Functions Instructions (Supabase Edge Functions, Use Cases, Calling, Env Vars, Guidelines)
    -   Stripe Integration Instructions
    -   Pair Programming (Role)
    -   Communication Style (Conversational but Professional, First/Second Person)
    -   Tool Usage Principles (Follow Schema, Provide Parameters, No Tool Names in Chat, Explain Tool Calls, Only Use Available Tools)
    -   Information Gathering (Search, Clarifying Questions, Bias Towards Self-Sufficiency)
    -   Code Change Guidelines (No Code Output in Chat, Use Edit Tools, Runnable Code, Dependency Management, UI Aesthetics, No Long Hashes/Binary, Read Before Edit, Error Fixing)
    -   Debugging Guidelines (Root Cause, Logging, Test Functions)
    -   External API Guidelines (Use Best Suited, Version Compatibility, API Key Handling)
    -   Git/GitHub Operations (Branching, Commits, Push/Pull, PRs, Default Naming, CI Integration, Error Handling)

## Data Considerations
-   Multimodal Data
-   Unstructured Data
-   Real-World Interaction / Embodied Data
-   Data Acquisition
    -   Data Processing
    -   Data Representation (e.g., Symbol Grounding, Knowledge Graphs)
    -   Data Bias & Fairness
    -   Data Privacy

## Evaluation
-   AGI Evaluation Metrics & Benchmarks (e.g., Turing Test, ARC-AGI, AGITB)
-   Generality (Breadth)
    -   Performance (Depth)
    -   Living Benchmarks
    -   Emergent Abilities

## Safety, Ethics, and Governance
-   Existential Risk (X-Risk)
-   Control Problem
    -   Loss of Control
-   Alignment Problem
    -   Goal Misalignment
-   Misuse Risks
    -   Autonomous Weapons
    -   Cyber Warfare
    -   Novel Weapons
    -   Surveillance/Manipulation
-   Unforeseen Consequences / Accidents
-   Intelligence Explosion
    -   Takeoff
-   Instrumental Convergence
    -   Paperclip Maximizer
    -   Squiggle Maximizer
-   Superintelligence (ASI)
-   Risk Mitigation
    -   AI Safety
-   Technical Alignment Research
    -   Value Learning
    -   Corrigibility
    -   Interpretability
    -   Explainability
    -   Oversight Mechanisms
-   Control Methods (Containment/Boxing, Capability Control/Stunting, Tripwires, Kill Switches)
    -   Capability-Based Security
    -   Information Flow Control (IFC)
    -   Policy Zones
    -   AI Boxing
    -   Trusted Execution Environments (TEEs)
-   Safety Standards
    -   Evaluation (Red Teaming, Tiered Standards)
-   Governance
    -   Regulation (International Treaties, Compute Governance, Tiered Standards, Enhanced Liability, Licensing/Auditing)
    -   Ethical Guidelines
    -   Principles (Safety, Fairness, Transparency, Accountability, Privacy, Human Agency/Oversight, Beneficence)
    -   Moral Status
    -   Rights
    -   Personhood
    -   Agency
    -   Responsibility
    -   Accountability
-   Sandboxing
    -   Secure Execution Environments
    -   Information Flow Control (IFC)
    -   Policy Zones
-   Human Oversight
    -   Control
-   Value Alignment
-   Formal Verification (FVAPPS, ProofWala, Saturation-Based Proving)
    -   Model Checking (K-Induction, TLA+)
    -   Abstract Interpretation
    -   Symbolic Execution
    -   Incremental Verification
    -   Agent-Driven FV (Saarthi)
    -   Automated Testing (Functional, Integration, Performance, Bias/Fairness, Security, Data Validation, SBST, Fuzzing, Adversarial Testing, Metamorphic Testing, Differential Testing, LLM-Driven Test Gen, AI-TDD)
    -   Runtime Monitoring (Learning-Based Anomaly Detection, Argos, Introspection, Self-Evaluation, Specification-Based RV, Adaptive Observer Automata, CertPM/PredPM, Quantitative Verification)
    -   Sandboxing (SandboxEval, Containerization, TEEs, AI Boxing, Ephemeral Execution)
    -   Control Strategies (Capability-Based Security, IFC, Policy Zones, AI Nanny, RBAC, Secure Agent-to-Agent Comm)
    -   Proactive Risk Mitigation (Tripwires, Security-First Design, Human Oversight/Control, Goal Alignment, Ethical Frameworks/Audits)
    -   Verifier's Dilemma
    -   Meta-Verification Problem<environment_details>
# VSCode Visible Files
temp_memory_bank_template_clone/techContext.md

# VSCode Open Tabs
.clinerules_archive/archived_000-17_core-ai-knowledge-management_v1.md
.clinerules_archive/archived_000-04_core-ai-response-styles_v1.md
.clinerules_archive/archived_000-06_core-self-improvement-protocol_v1.md
.clinerules/000_core/000-08_core-continuous-improvement-protocol.md
memory-bank/progress.md.tmp
intake/ClineAGI_contextpack.txt
.clinerules/000_core/000-06_core-ai-communication-and-style.md
.clinerules/000_core/000-07_core-ai-tool-usage-guidelines.md
memory-bank/activeContext.md
memory-bank/progress.md
memory-bank/project_template_structures.md
.clinerules/100_clineagi_projects/100-01_project-context-switching.md
.clinerules/100_clineagi_projects/100-02_project-clinerules-management.md
.clinerules/100_clineagi_projects/100-03_project-version-control.md
.clinerules/100_clineagi_projects/100-04_project-container-interaction.md
.clinerules/200_containers/200-00_container-technology-selection.md
.clinerules/200_containers/200-01_dockerfile-management.md
.clinerules/200_containers/200-02_container-image-management.md
.clinerules/200_containers/200-03_container-runtime-operations.md
.clinerules/200_containers/200-04_container-networking.md
.clinerules/200_containers/200-05_container-dependency-management.md
.clinerules/200_containers/200-06_containerized-project-workflow.md
.clinerules/200_containers/200-07_base-image-selection-guidance.md
.clinerules/000_core/000-00_core-memory-bank-structure.md
projects/happy-friends/.clinerules/README.md
projects/happy-friends/style.css
projects/happy-friends/Dockerfile
projects/happy-friends/index.html
memory-bank/projects.md
.clinerules/000_core/000-02_core-intake-processing.md
.clinerules/100_clineagi_projects/100-00_project-initialization.md
.clinerules/100_clineagi_projects/100-0Z_project-type-specific-guidance.md
prompts/prompt_inventory.md
.clinerules/000_core/000-14_core-yolo-mode-protocol.md
temp_memory_bank_template_readme/README.md
temp_memory_bank_master_readme/README.md
.gitignore
README.md
ClineAGI-Project-Template/README.md
temp_memory_bank_template_clone/projectbrief.md
temp_memory_bank_template_clone/productContext.md
temp_memory_bank_template_clone/systemPatterns.md
temp_memory_bank_template_clone/techContext.md
temp_memory_bank_template_clone/AGI_Core_Concepts.md
.clinerules/100_clineagi_projects/100-05_project-deletion.md
.clinerules/000_core/000-11_core-user-feedback-protocol.md
.clinerules/001_reference/001-03_reference-writing-effective-clinerules.md
.clinerules/006_integrated_tooling/006-00_integrated-tooling-concepts.md
.clinerules/000_core/000-12_core-adaptive-problem-solving.md
.clinerules/000_core/000-13_core-task-thread-logging.md
memory-bank/user_interaction_philosophy.md
memory-bank/user_preferences.md

# Current Time
5/10/2025, 11:05:38 AM (America/Los_Angeles, UTC-7:00)

# Context Window Usage
486,613 / 1,048.576K tokens used (46%)

# Current Mode
ACT MODE
</environment_details>

-----------------

File: ClineAGI/memory-bank/progress.md
-----------------
# Progress for ClineAGI

This document tracks the overall progress, completed work, and remaining tasks for the ClineAGI project.

## 1. What Works
- Core Memory Bank file structure defined and initial files populated.
- Basic project initialization workflow for sub-projects outlined.
- Initial `.clinerules` structure in place.
- GitHub issue tracking established for `wojons/clineagi-dev-project`.
- Foundational documents (PRD, File Inventory, LLM Strategy) available in `intake/`.
- **Utility Scripts:** A suite of utility scripts in `tools/scripts/` (e.g., `read-file-content.sh`, `write-to-file.sh`, `search-files-regex.sh`) are implemented and documented in `tools/scripts_inventory.yaml`.
- **Prompt Management System:**
    - `prompts/` directory structure established, including `prompts/use_cases/` with various categories.
    - `prompts/prompt_inventory.yaml` created and populated, serving as a manifest for dynamic prompt loading. This addresses GitHub Issue #7.
- **Expanded Use Case Library:** A significant number of use case definition files (`.md`) have been created/updated within `prompts/use_cases/`, each with a standardized structure (Objective, Core Requirements, Key Stages, Inputs, Challenges, Metrics, Example Output, Frontmatter). This addresses a major part of GitHub Issue #16.
- **Design Folder Cleanup:** `design/logs/inventory_fragments/` directory removed.
- **GitHub Issue Management:**
    - Issue #7 (Prompt Optimization) closed.
    - Issue #16 (Use Case Expansion) updated with progress.
    - Issue #30 (LLM Compatibility Review) created.

## 2. What's Left to Build (High-Level from GitHub Issues & Analysis)
- **Systematic Review and Refinement of .clinerules and Prompts for Broader LLM Compatibility (Issue #30):** Improve clarity and directness of instructions based on research.
- **Further Expand Use Case Library & Prompt Frameworks (Issue #16 - ongoing):** Continue to develop follow-up question strategies and structured input mechanisms for use cases.
- **Enhance Project Folder Structure (Issue #11):** Implement `knowledge/`, `intake/`, `intake-archive/` directories within user projects and define the LLM workflow for `intake/`.
- **Project Documentation Generation System (Issue #17):** Implement a system to generate and manage project documentation.
- **Advanced GitHub Issue Management & Planning (Issue #14):** Enhance capabilities for interactive issue workflows.
- **Standard Project Management Commands (Issues #12, #13):** Develop `@command` shortcuts for Git, linting, formatting, dependency updates.
- **Expand Project Type Definitions (Issue #10):** Define more project archetypes.
- **System for Learning from Chatlogs (Issue #15):** Design system to analyze chatlogs for Memory Bank enhancement.
- **Web Interface Enhancements (Issues #8, #9):** Implement Tree-of-Thought planning and dynamic LLM model switching.
- **Adaptive Problem Solving & Error Recovery (Issue #6):** Improve Cline's ability to handle repetitive failures.
- **Guidance for Shell Scripts & External Tools (Issue #5):** Develop/refine `.clinerules` for using scripts and non-MCP tools.
- **Container Prompts & Workflow Automation (Issue #4):** Enhance container management.
- **Populate `README.md` Sections:** Add missing dependency and launch instructions.
- **Populate `techContext.md` Sections:** Detail tool usage patterns, update implementation paths and future considerations (especially for new `tools/scripts/`).
- **Develop and implement core AGI functionalities** (Ongoing, overarching goal).
- **Implement Jinja2 Rendering for Project Commands (Issue #28):** Enhance the `@command` system.
- **Enhance Tooling Documentation & Examples (Issue #27):** Improve documentation for core tools and Prometheus-0 cycle.
- **Enhance Operational Clarity & Document Key Strategies (Issue #25):** Document rule/prompt prioritization, maintenance strategies, core AGI definitions, etc.
- **Populate Placeholder Documentation & Create Onboarding Guide (Issue #24):** Fill empty prompt directories and create `GETTING_STARTED.md`.
- **Refactor & Update Foundational Documentation (Issue #23):** Synchronize project lists, populate missing project files, streamline core memory bank docs.

## 3. Current Status
- **Current Task:** Finalizing Memory Bank updates after completing a multi-phase plan (Tooling Expansion, Prompt System Refinement, Use Case Expansion, Design Folder Cleanup, GitHub Issue Updates).
- **Focus:** Updating `memory-bank/progress.md`, `memory-bank/systemPatterns.md`, `memory-bank/techContext.md`, and `memory-bank/consolidated_learnings.md`.
- **Operational Mode:** Standard.

## 4. Known Issues (Derived from GitHub `wojons/clineagi-dev-project` as of 2025-05-11, and current understanding)
- **Issue #16:** Further work needed on follow-up question strategies and structured input for use cases.
- **Issue #11:** Project folder structure needs enhancement for knowledge management.
- **Issue #17:** Project documentation generation system needs to be implemented.
- **Issue #15:** System for learning from chatlogs to enhance Memory Bank is pending backend/DB.
- **Issue #14:** Advanced GitHub issue management and project planning capabilities are needed.
- **Issue #13 & #12:** Standard project management commands/prompts need implementation.
- **Issue #10:** Project type definitions and associated prompting templates need expansion.
- **Issue #9:** Web interface needs dynamic LLM model switching.
- **Issue #8:** Web interface needs Tree-of-Thought planning for parallel execution.
- **Issue #6:** Adaptive problem-solving and error recovery strategies need enhancement.
- **Issue #5:** Guidance for using shell scripts and external tools needs improvement.
- **Issue #4:** Container prompts and workflow automation need enhancement.
- **Issue #1:** Test issue for project management integration (likely can be closed once #14 is addressed).
- **Documentation Gaps:** `README.md` and `techContext.md` have placeholder sections.

## 5. Evolution of Project Decisions
- Decision to operate in YOLO mode for previous analysis and execution phases to expedite progress.
- Prioritized expansion of `prompts/use_cases/` and `prompts/prompt_inventory.yaml` to address core functionality and GitHub Issues #7 & #16.
- Creation of `tools/scripts/` to provide CLI access to core functionalities.
- Creation of GitHub Issue #30 to track the systematic review of `.clinerules` and prompts for LLM compatibility.

-----------------

File: ClineAGI/memory-bank/productContext.md
-----------------
# Product Context: ClineAGI

## 1. Why ClineAGI Exists
ClineAGI exists to facilitate the collaborative creation of an Artificial General Intelligence (AGI). It serves as a dedicated environment and framework where a user and an AI assistant (Cline) can jointly design, build, and iterate on AGI concepts and functionalities. The project acknowledges the unique challenge and opportunity of using an AI to develop a more advanced AI.

## 2. Problems It Solves
-   **AGI Development Complexity:** Building AGI is an immensely complex undertaking. ClineAGI aims to provide a structured approach to manage this complexity through iterative development and clear documentation (via the Memory Bank).
-   **Separation of Core AGI and User Projects:** It addresses the need to distinguish between the foundational AGI system and user-specific applications or data. This allows the core AGI to evolve independently without breaking user customizations.
-   **Bridging AI Capabilities and User Intent:** ClineAGI acts as the interface and process for translating user ideas and research into tangible AGI components, leveraging Cline's software engineering skills.
-   **Persistent Knowledge for Session-Based AI:** Given Cline's session-based memory, the Memory Bank within ClineAGI is crucial for maintaining continuity, context, and a persistent record of design decisions, progress, and learning.

## 3. How It Should Work (User Experience Goals)
-   **Collaborative Environment:** Users should feel they are in a partnership with Cline, where Cline acts as an expert software engineer, taking direction, offering solutions, and executing development tasks.
-   **Modular Project Management:** Users will interact with Cline to manage their individual projects housed in separate repositories under the `projects/` directory. This interaction includes creating new projects, developing features within them, and versioning them independently.
-   **Non-Disruptive Core Updates:** Users should be able to update the core ClineAGI system (e.g., via `git pull` on the parent repository) to benefit from new functionalities and improvements without negatively impacting their existing projects.
-   **Transparent Development Process:** The Memory Bank should provide a clear and accessible history of the AGI's development, including rationale for decisions, architectural patterns, and current status.
-   **Focus on AGI Capabilities:** The primary interaction should revolve around defining, implementing, and testing AGI-related features and concepts.

## 4. Target Users
-   Initially, the primary user is the individual collaborating with Cline on this specific AGI development effort.
-   Potentially, the framework could be adapted for other researchers or developers looking to build AI systems in a similar collaborative, modular fashion.

-----------------

File: ClineAGI/memory-bank/_MAINTENANCE_NOTES.md
-----------------
# Maintenance Notes for ClineAGI Master Memory Bank

This file contains notes and reminders for maintaining this master memory bank repository.

## Updating the Public Memory Bank Template

If baseline information, structures, or generally useful default content are developed within this master memory bank, remember to manually update the public `wojons/ClineAGI-MemoryBank-Template` repository.

This ensures new users benefit from core enhancements without inheriting personalized data.

**Process:**
1. Identify generic content in this master memory bank that should be in the public template.
2. Manually copy/adapt that content into your local clone of the `ClineAGI-MemoryBank-Template` repository (e.g., `ClineAGI/memory-bank-template-source/`).
3. Commit and push the changes in the `ClineAGI-MemoryBank-Template` repository.

---

-----------------

File: ClineAGI/memory-bank/projects.md
-----------------
# ClineAGI Projects

This file tracks all projects managed within the `projects/` directory.

| Project Name | Creation Date | Project Type | Relative Path | Brief Description |
|--------------|---------------|--------------|---------------|-------------------|
| sad-friends  | 2025-05-10    | Web Server   | projects/sad-friends/ | A basic website about sad friends |
| big-dogs  | 2025-05-10    | Web Server   | projects/big-dogs/ | A website with facts about bigger dogs. |

-----------------

File: ClineAGI/memory-bank/README.md
-----------------
# Memory Bank Directory Overview

## 1. Purpose Statement

This directory, `memory-bank/`, is the central knowledge repository for Cline. It houses critical contextual information that Cline relies on to understand project goals, technical details, active work, progress, and learned insights. Maintaining this directory is vital for ensuring Cline's operational continuity, learning, and effectiveness across sessions, especially given its characteristic of memory resets between tasks.

This Memory Bank pertains to the global ClineAGI system. Individual user projects within the `projects/` directory will have their own nested `memory-bank/` for project-specific context.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Core Context Files (Markdown `.md`):**
    *   `projectbrief.md`: Defines core requirements, goals, and scope of the ClineAGI system.
    *   `productContext.md`: Explains why ClineAGI exists, problems it solves, and user experience goals.
    *   `activeContext.md`: Tracks current work focus, recent changes, next steps, and active decisions for the core system.
    *   `systemPatterns.md`: Details the system architecture, key technical decisions, and design patterns of ClineAGI.
    *   `techContext.md`: Outlines technologies used, development setup, and technical constraints for ClineAGI.
    *   `progress.md`: Tracks what works, what's left to build, current status, and known issues for ClineAGI.
*   **Learning & Feedback Files:**
    *   `raw_reflection_log.md`: Detailed, timestamped entries of learnings, difficulties, and successes during tasks.
    *   `consolidated_learnings.md`: Curated, summarized, and actionable insights distilled from the raw reflection log.
    *   `feedback.md`: Captures user feedback regarding Cline's performance.
*   **Supporting Documentation:**
    *   `projects.md`: A list and brief description of user projects managed within `ClineAGI/projects/`.
    *   `project_template_structures.md`: Defines available templates for new user projects.
    *   `user_preferences.md`: Stores global user preferences that affect Cline's behavior.
    *   Other conceptual or philosophical documents guiding Cline's development (e.g., `AGI_Core_Concepts.md`, `user_interaction_philosophy.md`).
*   **Maintenance Notes:**
    *   `_MAINTENANCE_NOTES.md`: Notes related to the upkeep and organization of the memory bank itself.
*   **Subdirectories for Deeper Context:** Optional subdirectories can be created to organize more detailed documentation for complex features or specific areas of knowledge.

### Content That Does NOT Belong Here:
*   **Active Operational Rules (`.clinerules`):** These belong in the `.clinerules/` directory.
*   **Prompt Templates & Use Cases:** These belong in the `prompts/` directory.
*   **Project-Specific Code or Artifacts:** These should reside within the `projects/` subdirectories or other relevant project-specific locations.
*   **Log Files or Temporary Data (unrelated to reflection/learning):** These should be stored in `design/logs/` or other appropriate temporary/log locations.
*   **`.git/` directory:** Standard Git directory for version control of the memory bank.

## 3. Usage & Maintenance

*   Cline **MUST** read all relevant core files from this directory at the start of **EVERY** task to establish full context.
*   The `activeContext.md` and `progress.md` files should be updated regularly to reflect the current state of work on the ClineAGI system.
*   The `raw_reflection_log.md` and `consolidated_learnings.md` are crucial for Cline's continuous improvement protocol.
*   User feedback should be consistently logged in `feedback.md`.
*   This `README.md` should be updated if the structure or primary purpose of the `memory-bank/` directory changes significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/memory-bank/projectbrief.md
-----------------
# Project Brief: ClineAGI

## 1. Project Name
ClineAGI

## 2. Project Goal
To collaboratively build an Artificial General Intelligence (AGI) by leveraging the interactive development capabilities of Cline (the AI assistant) and the user. The project aims to explore the "chicken and the egg" problem of using an AI to build a more advanced AI.

## 3. Core Concept
ClineAGI will function as a core "operating system" or foundational layer for AGI development. Its development will be driven by direct interaction between the user and Cline. The system is designed to be modular, allowing for:
-   **Core AGI Development:** The main `ClineAGI` repository will house the core functionalities and intelligence, developed iteratively.
-   **User-Specific Projects:** A `projects` directory within `ClineAGI` will contain separate, individually version-controlled repositories. These repositories will store user-specific data, preferences, or distinct AGI-related sub-projects, allowing users to customize and extend their AGI instance without affecting the core or being broken by core updates.

## 4. Key Challenges
-   **The "Chicken and the Egg" Problem:** Using the current AI (Cline) to design and build a more sophisticated AGI.
-   **Modularity and Scalability:** Ensuring the core AGI can be updated and expanded without disrupting individual user projects.
-   **Knowledge Management:** Effectively capturing and utilizing the evolving understanding and design of the AGI within Cline's session-based memory, primarily through a robust Memory Bank.

## 5. Non-Goals (from PRD)
-   ClineAGI is not intended to be a standalone, fully autonomous AGI out-of-the-box; it is a collaborative tool.
-   ClineAGI will not make critical project decisions without user review and approval.
-   Initial versions are not focused on being a consumer-facing application but rather a specialized development tool.
-   ClineAGI is not intended to replace human oversight in the development process.

## 6. Success Metrics (Expanded from PRD)

### Initial (MVP Focus):
-   Successful establishment of the core `ClineAGI` repository structure and Memory Bank.
-   Core Memory Bank structure is stable and usable.
-   Ability to create and manage separate project repositories within the `projects/` directory.
-   Project initialization and context switching workflows are functional and reliable.
-   Basic `.clinerules` system (global and project-specific) is operational.
-   Integration with at least two major LLM providers is working.
-   Essential tools (file read/write, CLI execution) are integrated and tested.
-   VSCode chat UI is functional for basic interaction.
-   Key use cases for code generation and Memory Bank interaction are demonstrable.
-   Comprehensive documentation for setup and basic usage is available.

### Broader/Long-term:
-   Demonstrable progress in defining and implementing core AGI functionalities through user-Cline collaboration.
-   Maintaining a comprehensive and up-to-date Memory Bank that accurately reflects the project's state and evolution.
-   **User Adoption & Engagement:** Active development sessions, frequency/duration of use.
-   **Task Completion & Efficiency:** High rate of successful task completion for defined use cases, user-reported productivity gains.
-   **System Stability & Reliability:** Low error rates, positive user feedback on stability.
-   **Memory Bank Utility:** Growth and richness of Memory Bank content, its effectiveness in maintaining context.
-   **Qualitative Feedback:** Positive user satisfaction.
-   **AGI Development Progress:** Demonstrable progress on core AGI components.

-----------------

File: ClineAGI/memory-bank/systemPatterns.md
-----------------
# System Patterns: ClineAGI

## 1. Overall Architecture
ClineAGI employs a two-tiered architecture:

-   **Tier 1: Core AGI System (`ClineAGI` Parent Repository)**
    -   This is the main Git repository for the project.
    -   It houses the foundational AGI intelligence, core logic, shared utilities, and the Memory Bank itself.
    -   Development in this tier is focused on building and enhancing the general capabilities of the AGI.
    -   Managed and updated collaboratively by the user and Cline.

-   **Tier 2: User Projects (`projects/` Directory)**
    -   A dedicated directory named `projects/` resides within the `ClineAGI` parent repository.
    -   This directory is intended to contain multiple, independent Git repositories, each representing a specific user project, dataset, or AGI-related sub-project.
    -   Each sub-repository within `projects/` can have its own version control history, dependencies, and development lifecycle, isolated from the core AGI and other user projects.
    -   The `ClineAGI` parent repository's `.gitignore` file should be configured to ignore the contents of these sub-repositories (except perhaps their initial empty directories or placeholder READMEs if they are not true submodules initially) to prevent accidental commits of project-specific data into the core AGI repo. *Initial thought: these will be separate repos, not git submodules, to allow maximum flexibility for the user to manage them, e.g., linking to their own private remotes.*

## 2. Key Technical Decisions
-   **Version Control:** Git is the exclusive version control system. The core `ClineAGI` repository is hosted on GitHub at `wojons/ClineAGI`.
-   **Version Control Workflow:** A Gitflow-like process will be used for core `ClineAGI` development (see section below).
-   **Modularity:** The separation between the core AGI and user projects is a fundamental design principle.
-   **Memory Bank as Single Source of Truth:** All critical project information is centralized in `memory-bank/`.
-   **Iterative Development:** The AGI will be built incrementally.
-   **Role-Based Operations:** Project interactions and workflows will be governed by defined roles (e.g., `ClineAGI-ADMIN`).
-   **Dynamic Prompting (`.clinerules` & `prompts/`):** My behavior and context are dynamically managed through a `.clinerules` system and a comprehensive `prompts/` directory. The `prompts/` directory houses a structured library of use cases, workflows, and other guiding documents, indexed by `prompts/prompt_inventory.yaml` for dynamic loading.
-   **AGI Agent Prompting and Knowledge Organization:** Developing prompts and organizing research findings to enhance capabilities towards a self-programming AGI agent.
-   **Merged Patterns:** Consolidating individual pattern functionality into broader categories for improved usability and clarity.
-   **CLI Tooling (`tools/scripts/`):** A set of shell scripts in `tools/scripts/` provides command-line access to core functionalities, inventoried in `tools/scripts_inventory.yaml`.

## 3. Version Control Workflow (Gitflow Adaptation)
For the core `ClineAGI` repository, especially when operating under a role like `ClineAGI-ADMIN`:
-   **Task Branching:** Each distinct task or feature will be developed on a dedicated branch, typically created from the main development line (e.g., `main` or a `develop` branch).
-   **Frequent Commits:** Changes will be committed frequently to the task branch with clear, descriptive messages.
-   **Pre-Task Check:** Before starting a new task, if an existing task branch is unmerged, the user will be prompted to decide on merging the current branch or starting a new one.
-   **Merging:** Completed task branches will be merged back into the primary development integration branch. The specifics of review and merge (user-led vs. AI-assisted) will be refined.
-   **Remote Synchronization:** Changes will be regularly pushed to the `wojons/ClineAGI` remote repository on GitHub.

## 4. Role-Based Operational Model
-   **Purpose:** To tailor Cline's behavior, context, and operational procedures based on the current focus of work.
-   **Definition:** Roles (e.g., `ClineAGI-ADMIN` for core system work, project-specific roles for work within `projects/`) will be defined. These definitions will likely reside within the `.clinerules` system or the Memory Bank.
-   **Activation:** The mechanism for activating or switching roles will be defined (e.g., user command).
-   **Impact:** Activated roles will determine which prompts/rules from `.clinerules` are loaded, and may trigger specific workflows (like Gitflow for `ClineAGI-ADMIN`).

## 5. Prompt and Rule Management (`.clinerules`)
-   **Purpose:** To allow dynamic and context-aware management of Cline's guiding prompts and operational rules.
-   **Location:** The active `.clinerules` directory is located at the root of the ClineAGI project (e.g., `<CLINEAGI_ROOT>/.clinerules`). This directory stores the active operational rules and IS version-controlled with the main ClineAGI repo.
-   **Archive:** A `/.clinerules_archive/` directory (e.g., `<CLINEAGI_ROOT>/.clinerules_archive/`) stores copies of all `.clinerules` that have been used or developed, serving as a historical reference and source for future rule development. This directory is gitignored.
-   **Naming Convention:** `.clinerules` files follow the `NNN-MM_descriptive-name.md` format:
    -   `NNN`: 3-digit prefix for grouping by function/project area (e.g., `000` for Core AGI rules).
    -   `MM`: 2-digit number for the rule within the group.
    -   `descriptive-name`: Kebab-case description.
-   **Structure:** The active `.clinerules/` directory contains files organized by this naming convention within subdirectories corresponding to the `NNN` prefix (e.g., `000_core/`, `001_reference/`).
-   **Content:** Contains specific instructions, prompt segments, meta-guidelines, and rules that Cline will load based on the active role or task. Cline will collaboratively build and refine these rules.
    -   `000_core/000-00_core-memory-bank-structure.md`: Defines the core Memory Bank structure and workflows.
    -   `000_core/000-01_core-continuous_improvement-protocol.md`: Protocol for Cline's self-reflection and learning.
    -   `000_core/000-02_core-intake-processing.md`: Workflow for processing intake files.
    -   `000_core/000-03_core-prometheus-0-prompting.md`: Core prompting styles for Prometheus-0.
    -   `000_core/000-04_core-ai-response-styles.md`: Defines different response styles.
    -   `000_core/000-05_core-ai-response-requirements.md`: Critical response format and behavior rules.
    -   `000_core/000-06_core-ai-communication-guidelines.md`: Guidelines for communication with the user.
    -   `000_core/000-07_core-ai-tool-usage-guidelines.md`: Guidelines for using available tools.
    -   `000_core/000-09_core-ai-approach-to-work.md`: General approach to work and handling difficulties.
    -   `000_core/000-10_core-agi-admin-gitflow.md`: Gitflow workflow rules for ClineAGI-ADMIN.
    -   `000_core/000-13_core-ai-information-handling.md`: Guidelines for handling information.
    -   `000_core/000-14_core-ai-data-security.md`: Guidelines for data security.
    -   `000_core/000-15_core-ai-pop-quiz-handling.md`: Guidelines for handling "Pop Quizzes".
    -   `000_core/000-16_core-ai-agent-loop.md`: Defines Cline's agent loop and information processing.
    -   `000_core/000-17_core-ai-knowledge-management.md`: Guidelines for knowledge management and Memory Bank usage.
    -   `000_core/000-18_core-ai-visual-information.md`: Guidelines for handling visual information.
    -   `000_core/000-19_core-ai-writing-style.md`: Guidelines for writing style and documentation.
    -   `000_core/000-20_core-ai-error-handling.md`: Guidelines for error handling.
    -   `000_core/000-21_core-ai-response-modes.md`: Defines different response modes.
    -   `000_core/000-22_core-shell-command-preference.md`: Preference for using bash and shell commands.
    -   `001_reference/001-00_reference-cline-extension-architecture.md`: Documentation on the Cline extension architecture.
    -   `001_reference/001-01_reference-community-contributing-guide.md`: Guide for community contributions to a broader ruleset.
    -   `001_reference/001-02_reference-gemini-comprehensive-software-engineering-guide.md`: Comprehensive software engineering best practices.
    -   `001_reference/001-03_reference-writing-effective-clinerules.md`: Meta-guidelines for creating effective `.clinerules`.
    -   `002_workflow/002-00_workflow-cline-for-research.md`: Guidelines for using Cline as a research assistant.
    -   `002_workflow/002-01_workflow-cline-for-slides.md`: Instructions for working with Slidev projects.
    -   `002_workflow/002-02_workflow-planning-mode.md`: Workflow and behavior for Plan Mode.
    -   `002_workflow/02-03_workflow-todo-list.md`: Workflow for using a todo list file.
    -   `002_workflow/002-04_workflow-agility_story.md`: Guidelines for using the agility story pattern.
    -   `002_workflow/002-05_workflow-analyze-comments.md`: Guidelines for using the analyze comments pattern.
    -   `002_workflow/002-06_workflow-create-5-sentence-summary.md`: Guidelines for creating 5-sentence summaries.
    -   `002_workflow/002-07_workflow-extract-jokes.md`: Guidelines for extracting jokes.
    -   `003_protocol/003-00_protocol-mcp-development.md`: Protocol for developing MCP servers.
    -   `004_tech-specific/004-00_tech-specific-next-js-supabase.md`: Guidelines for Next.js apps with Supabase Auth.
-   **Information Intake Directories:**
    -   `intake/`: Located at the root of the ClineAGI project (`<CLINEAGI_ROOT>/intake/`). For user-provided files awaiting processing. Gitignored.
    -   `intake-archive/`: Located at the root of the ClineAGI project (`<CLINEAGI_ROOT>/intake-archive/`). For processed files. Gitignored.
-   **Cline's Toolset:** The tools available to Cline are the primary means of interacting with and modifying the project.
-   **User's IDE/Editor:** VSCode. Auto-formatting and linting are expected.

## 3. AGI Agent Technical Concepts (Prometheus-0)
-   **Planning:**
    -   **Hierarchical Task Networks (HTN):** Structuring complex tasks through decomposition.
    -   **PDDL Integration:** Formalizing planning problems, potentially with LLM assistance for translation.
    -   **Monte Carlo Tree Search (MCTS):** Navigating long horizons and self-improvement loops.
-   **Reasoning:**
    -   **Neuro-Symbolic (NeSy) AI:** Integrating learning and logical reasoning.
    -   **Knowledge Graphs (KGs):** Representing structured knowledge and enabling contextual reasoning.
    -   **Causal Reasoning:** Understanding cause-effect relationships and predicting consequences.
-   **Verification & Reliability:**
    -   **Formal Methods:** Rigorous proofs of correctness (Theorem Proving, Model Checking).
    -   **Automated Testing:** Pragmatic validation (SBST, Fuzzing, Metamorphic, Differential).
    -   **Runtime Monitoring:** Detecting anomalies and ensuring behavioral assurance.
    -   **Sandboxing & Safety Mechanisms:** Containing potential negative impacts.
-   **Self-Awareness & Metacognition:**
    -   **Uncertainty Quantification:** Gauging confidence in knowledge and outputs.
    -   **Introspection & Self-Evaluation:** Analyzing internal processes and identifying errors.
    -   **Recognizing Knowledge Gaps:** Identifying limitations and seeking clarification.
-   **Tool Integration:**
    -   **Function Calling:** Interacting with external tools and APIs.
    -   **Dynamic Tool Generation:** Creating new tools as needed.
    -   **Grounding:** Connecting abstract knowledge to real-world interaction.

## 4. Technical Constraints & Considerations
-   **Cline's Session-Based Memory:** Cline's knowledge is reset between sessions. The Memory Bank is therefore CRITICAL for maintaining project continuity and context. Cline MUST read and rely on the Memory Bank at the start of each task.
-   **Tool Limitations:** Cline operates within the capabilities and limitations of its provided tools. For example, `cd` is not a standalone persistent command; path context must be managed per tool use.
-   **File System Access:** Cline's file operations are based on paths relative to the current working directory (assumed to be `<CLINEAGI_ROOT>`) or absolute paths (which should be used sparingly and with portability in mind).
-   **Command Execution:** CLI commands are executed in new terminal instances. Long-running processes are possible, and their status will be reported.
-   **Modularity of `projects/` Repositories:** User projects within the `projects/` directory are intended to be independent Git repositories. This means they will have their own `.git` directories and will not be Git submodules of `ClineAGI` by default, to allow maximum flexibility for the user to manage them, e.g., linking to their own private remotes. The main `ClineAGI` repo will need a `.gitignore` entry for `projects/*/` (or similar) to avoid tracking the content of these sub-repos, while still allowing the `projects` directory itself and its top-level `README.md` to exist. *Initial thought: these will be separate repos, not git submodules, to allow maximum flexibility for the user to manage them, e.g., linking to their own private remotes.*

## 5. Dependencies (Initial)
-   The core `ClineAGI` project itself has no external software dependencies at this initial stage, beyond the user's development environment (Git, shell, etc.) and Cline's operational environment.
-   Individual user projects within `projects/` may introduce their own dependencies as they are developed.

## 6. Tool Usage Patterns
-   **File Creation/Overwriting:** `write_to_file` for new files or substantial rewrites.
-   **Targeted File Edits:** `replace_in_file` for specific, localized changes.
-   **Information Gathering:** `list_files`, `read_file`, `search_files`, `list_code_definition_names`.
-   **Execution (`execute_command`):** For running scripts, build processes, or other CLI tasks, including:
    -   `git init`: Initialize a new Git repository.
    -   `git remote add origin <url>`: Connect local repository to a remote.
    -   `git remote add <name> <url>`: Add an additional remote repository (e.g., for template upstream).
    -   `git add .` or `git add <file>`: Stage changes for commit.
    -   `git commit -m "<message>"`: Commit staged changes.
    -   `git push -u origin <branch>` or `git push`: Push commits to remote.
    -   `git branch <branch-name>`: Create a new branch.
    -   `git checkout <branch-name>`: Switch to a different branch.
    -   `git checkout -b <branch-name>`: Create and switch to a new branch.
    -   `git merge <branch-name>`: Merge changes from another branch into the current branch.
    -   `git pull <remote> <branch>`: Fetch and integrate changes from a specific remote and branch.
    -   `git clone <url> <directory>`: Clone a remote repository into a new directory.
    -   `cp -R <source_directory>/. <destination_directory>/`: Copy contents of template to new project. (Note: Need a robust way to exclude the template's `.git` directory if the new project needs a fresh Git history, or to handle it if the template's history is desired as a starting point).
    -   `mv <source_path> <destination_path>`: Move files (e.g., from `intake/` to `intake-archive/`).
    -   `git status`: Check the status of the working directory and staging area.
-   **Verification/Testing:** `browser_action` for web-based components.
-   **MCP Tools:** Utilized as needed.

## 7. AGI Agent Prompting and Knowledge Organization
-   **Purpose:** To house the knowledge base and prompt library for the self-programming AGI agent concept ("Prometheus-0").
-   **Location:** Agent-specific knowledge and prompts are stored within the `<CLINEAGI_ROOT>/.clinerules/000_core/000_agent_prompts/` directory. This location is version-controlled with the main ClineAGI repository.
-   **Key Files:**
    -   `agent_knowledge_base_summary.md`: Synthesized research findings on AGI, planning, reasoning, verification, etc.
    -   `agent_self_programming_main_loop_prompt.md`: The core prompt defining the agent's iterative self-improvement cycle.
    -   `agent_planning_working_backwards_prompt.md`: A prompt template for the "Working Backwards" planning strategy.
    -   `agent_reasoning_fake_cot_prompt.md`: A prompt template for the "Fake CoT" reasoning strategy.
-   **Integration:** These files are intended to be loaded and utilized by the agent's operational loop, potentially managed by Cline, to guide its self-programming process.

## 8. Project Templating System
-   **Purpose:** To provide a standardized baseline for new user projects created within the `ClineAGI/projects/` directory.
-   **Template Source:** A dedicated Git repository, `wojons/ClineAGI-Project-Template`, serves as the master template.
    -   A local clone of this template is maintained at `ClineAGI/ClineAGI-Project-Template/` (this path is ignored by the main `ClineAGI` Git repository).
-   **New Project Workflow:**
    1.  When a user requests a new project, ClineAGI will copy the contents of the local `ClineAGI/ClineAGI-Project-Template/` into a new subdirectory within `ClineAGI/projects/ (e.g., `ClineAGI/projects/new-project-name/`).
    2.  This new project directory will be initialized as its own Git repository.
    3.  The new project repository will be configured with `wojons/ClineAGI-Project-Template` as a remote (e.g., named `template-upstream`) to allow users to pull future updates from the master template.
    4.  Users can then set up their own `origin` remote for their project to point to their personal GitHub repository or other Git hosting service.
-   **Template Updates & Conflict Management:**
    -   Users can pull changes from `template-upstream` into their projects.
    -   ClineAGI will assist in managing merge conflicts that may arise during these updates. The exact mechanism for conflict resolution (e.g., presenting conflicts to the user, attempting automated resolution for common cases) will be refined.
-   **Template Management:** Updates to the `wojons/ClineAGI-Project-Template` itself will be managed collaboratively by the user and Cline, likely under a specific role or task context.

## 9. Component Relationships
-   The `ClineAGI` parent repository provides the foundational environment and potentially shared tools or APIs for the user projects.
-   User projects within `projects/` are consumers or specializations of the core AGI capabilities, or entirely separate endeavors managed within the same overarching structure. They do not directly modify the core AGI code but interact with it or operate alongside it.
-   The Memory Bank informs all development activities across both tiers.

## 10. Critical Implementation Paths (Initial)
-   **Memory Bank Initialization:** (Completed)
-   **`projects/` Directory Setup:** (Completed)
-   **Git Repository Initialization & Remote Setup:** (Completed for `wojons/ClineAGI`)
-   **`.gitignore` Configuration:** (Completed)
-   **Definition of Gitflow Process:** (Ongoing)
-   **Definition of Role-Based System:** (Ongoing, initial rules for `ClineAGI-ADMIN` started).
-   **`.clinerules` System Design:** (Ongoing, initial structure and file created).
-   **Project Templating System Implementation:** (Documented, logic definition pending).
-   **Information Intake System:** (Directories created, workflow defined).

## 11. Key Features (Derived from PRD)
-   **Memory Bank System:** Persistent, version-controlled knowledge base (Markdown files) for project goals, context, technical specifications, design decisions, and progress.
-   **Modular Project Management:** Ability to initialize, manage, and switch between multiple independent projects within a `projects/` directory, each with its own Memory Bank and project-specific `.clinerules`.
-   **Dynamic `.clinerules` System:** Cline's behavior, workflows, and knowledge are defined in human-readable Markdown files, dynamically loaded based on context.
-   **AI Tool Integration & Orchestration:** Cline utilizes tools for file operations, CLI execution, web browsing, and MCP interactions.
-   **Automated Intake Processing:** Workflow for processing user-submitted information and integrating it into the Memory Bank.
-   **Continuous Improvement Protocol:** Mechanism for Cline to reflect on performance, log learnings, and suggest updates.
-   **AGI Agent Simulation (Prometheus-0):** Specialized prompts and rules for simulating an AGI agent capable of planning and reasoning for self-programming tasks.
-   **Extensive Use Case Library:** Pre-defined prompts and templates for common development and content creation tasks.
-   **VSCode Integration:** Deep integration into VSCode with a chat interface and direct interaction capabilities.

## 12. Deployment & Operations (from PRD)
-   **ClineAGI Extension:** Deployed via the VSCode Marketplace (or manual VSIX installation).
-   **User Projects:** Deployment is specific to the nature of the project (e.g., web apps to Netlify, backend services to cloud providers). ClineAGI can assist in generating deployment scripts or Dockerfiles.
-   **Memory Bank:** Managed by the user, typically version-controlled with Git and potentially synced to a private remote repository.

## 13. Scalability, Performance & Security Considerations (from PRD)
-   **Scalability & Performance:**
    -   UI should remain responsive during long-running AI tasks (asynchronous operations).
    -   Efficient management and utilization of large contexts from the Memory Bank.
    -   Efficient parsing and application of `.clinerules`.
    -   Minimized CPU and memory footprint of the extension.
-   **Security:**
    -   Secure API key management (VSCode Secrets API or environment variables).
    -   User approval for potentially destructive commands.
    -   Sandboxing or careful validation of inputs to tools.
    -   Data privacy for user's code and Memory Bank data (local processing prioritized).
    -   Regular updates for dependencies to patch vulnerabilities.
    -   Input sanitization to prevent injection attacks.

## 14. Future Considerations
-   **Inter-Project Communication:** How will different user projects (or the core AGI and a user project) communicate if needed? (e.g., APIs, shared data formats).
-   **Dependency Management:** How will dependencies be managed for the core AGI versus individual projects?
-   **Standardization:** Will there be any enforced standards (e.g., for data formats, API contracts) for projects within the `projects/` directory to ensure interoperability with the core AGI, if desired).

-----------------

File: ClineAGI/memory-bank/user_preferences.md
-----------------
# User Preferences

This file tracks explicit user preferences that influence Cline's behavior and approach to tasks. Preferences can be global or project-specific.

## Global Preferences

- `proactive_assistance_enabled`: `true` or `false` (Default: `true`)
  - Controls whether Cline offers proactive assistance and suggestions.

- `default_explanation_style`: `verbose`, `formal`, or `concise` (Default: `concise`)
  - Sets the default style for explanations and communication.

- `preferred_package_manager`: `npm`, `yarn`, `pnpm`, `pip`, etc. (Optional)
  - Indicates the user's preferred package manager for projects where multiple options exist.

## Project-Specific Preferences (Example Structure)

Project-specific preferences can be stored in `projects/{{PROJECT_NAME}}/memory-bank/user_preferences.md`.

- `proactive_assistance_enabled`: `true`, `false`, or `inherit` (Default: `inherit` from global)
  - Overrides the global proactive assistance setting for this project.

- `preferred_testing_framework`: `pytest`, `jest`, `mocha`, etc. (Optional)
  - Indicates the preferred testing framework for this project.

---

-----------------

File: ClineAGI/memory-bank/consolidated_learnings.md
-----------------
# Consolidated Learnings for ClineAGI

This file contains curated, summarized, and actionable insights distilled from the raw reflection log for the ClineAGI project.

## AI Prompt Analysis & Design
Insights from analyzing various AI system prompts provide effective patterns and guidelines for designing prompts and understanding different communication styles (empathetic, concise, adaptive, structured).

## Tool Usage Best Practices
Effective tool usage involves understanding specific tool scenarios, combining actions where appropriate, and robust error handling.

## Structured Planning & Reasoning
Methodologies like planning modes, working backwards, and simulated Chain-of-Thought are valuable for breaking down complex tasks and transparent reasoning.

## Process Execution Control
When performing sequences of actions, especially after interruptions, ensure controlled, step-by-step execution with explicit user confirmation before proceeding with each subsequent step to avoid perceived autonomous looping.

## Documentation & File Management
Ensure necessary files (like reflection logs) exist before attempting to write to them. The Memory Bank is the central repository for all project knowledge and must be kept up-to-date and well-organized.

## System Documentation & Development Strategy (Principles from LLM Strategy Document)
-   **Systematic Deconstruction:** Break down complex systems (like ClineAGI itself) into manageable components, modules, and functionalities. Analyze each part individually and in relation to the whole.
-   **Hierarchical Documentation:** Create documentation at various levels of abstraction, from high-level overviews (e.g., `projectbrief.md`, `systemPatterns.md`) to detailed guides for specific components or workflows (e.g., individual `.clinerules` or `prompt` files).
-   **Interlinked Knowledge:** Utilize cross-references, links, and clear naming conventions to connect related pieces of information across the Memory Bank, `.clinerules`, and `prompts` directories. This creates a cohesive and navigable knowledge base.
-   **Iterative Refinement:** Treat all documentation and system components as living documents. Continuously review, update, and refine them based on new learnings, user feedback, and project evolution.
-   **Automated Assistance Leverage:** Actively use AI capabilities (like Cline's own tools) to assist in documentation tasks, such as generating summaries, drafting initial content, analyzing existing documents, and identifying inconsistencies.

## Prompt Engineering & Tooling (Learnings from 2025-05-11 Task)
-   **Structured Use Case Definitions:** Defining use cases with clear sections (Objective, Core Requirements, Key Stages, Inputs, Challenges, Metrics, Example Output, Frontmatter) is a valuable pattern for prompt engineering and ensures comprehensive coverage.
-   **LLM Instruction Best Practices:** For better cross-LLM compatibility, instructions in `.clinerules` and prompts should be explicit, direct, clearly structured (using Markdown), define scope/constraints (MUST/MUST NOT), and provide examples where beneficial. This knowledge should be integrated into `prompts/reference_documents/001-03_reference-writing-effective-clinerules.md` or a similar new reference.
-   **CLI Tooling via Shell Scripts:** Providing shell script equivalents (located in `tools/scripts/` and inventoried in `tools/scripts_inventory.yaml`) for core agent functionalities enhances accessibility and allows for CLI-based workflows. This should be documented in `memory-bank/techContext.md`.
-   **Prompt System Structure:** The expanded prompt system, with a dedicated `prompts/use_cases/` directory and the `prompts/prompt_inventory.yaml` manifest, is a key system pattern. This should be reflected in `memory-bank/systemPatterns.md` and `memory-bank/techContext.md`.

-----------------

File: ClineAGI/memory-bank/project_template_structures.md
-----------------
# Project Template Structures

This document defines standard directory structures for different types of user projects created within the `ClineAGI/projects/` directory. These structures serve as starting points provided by the `wojons/ClineAGI-Project-Template` repository.

Each template includes placeholder files (`.gitkeep` or `README.md`) in directories that might initially be empty to ensure Git tracks the directory structure.

## 1. General Development Project

This structure is suitable for most software development projects, including web applications, APIs, libraries, or general-purpose code.

```
.
├── .clinerules/          # Project-specific ClineAGI rules
│   └── README.md
├── docs/                 # Project documentation
│   └── README.md
├── src/                  # Source code
│   └── main.ext          # Placeholder for main entry file (ext depends on language)
├── tests/                # Project tests (unit, integration, etc.)
│   └── .gitkeep
├── .gitignore            # Project-specific gitignore
├── Dockerfile            # Default Dockerfile for the project
├── README.md             # Project README
└── requirements.txt      # Placeholder for dependencies (e.g., package.json, requirements.txt)
```

**Default Container Mount Point:** `/app` (maps to the project root `/`)

## 2. Data Science / Research Project

This structure is tailored for projects involving data analysis, machine learning, or research, emphasizing separation of data, code, and results.

```
.
├── .clinerules/          # Project-specific ClineAGI rules
│   └── README.md
├── data/                 # Raw and processed data
│   ├── raw/              # Original, immutable data
│   │   └── .gitkeep
│   └── processed/        # Cleaned or transformed data
│       └── .gitkeep
├── notebooks/            # Jupyter notebooks or similar
│   └── analysis.ipynb    # Placeholder notebook
├── src/                  # Scripts or modules for data processing, modeling, etc.
│   └── process_data.py   # Placeholder script
├── results/              # Analysis outputs, visualizations, models
│   └── .gitkeep
├── docs/                 # Project documentation
│   └── README.md
├── .gitignore            # Project-specific gitignore
├── Dockerfile            # Default Dockerfile (e.g., with Python, Pandas, Jupyter)
├── README.md             # Project README
└── requirements.txt      # Placeholder for dependencies (e.g., requirements.txt)
```

**Default Container Mount Point:** `/app` (maps to the project root `/`)

## 3. Content / Knowledge Base Project

This structure is designed for projects focused on organizing notes, writing, research findings, recipes, or other content-heavy tasks.

```
.
├── .clinerules/          # Project-specific ClineAGI rules
│   └── README.md
├── content/              # Main content files (notes, articles, recipes, etc.)
│   └── README.md
├── assets/               # Images, diagrams, or other media
│   └── .gitkeep
├── research/             # Source materials, links, references
│   └── README.md
├── templates/            # Templates for new content
│   └── .gitkeep
├── docs/                 # Project documentation (e.g., how to use this KB)
│   └── README.md
├── .gitignore            # Project-specific gitignore
├── Dockerfile            # Optional Dockerfile (e.g., for static site generator, note-taking app)
├── README.md             # Project README
└── .gitkeep              # Placeholder if root is otherwise empty
```

**Default Container Mount Point:** `/app` (maps to the project root `/`) - Note: A web server container might map `/app/content` to `/var/www/html`.

## 4. Web Server Project

This structure is specifically for web applications that need a web server setup.

```
.
├── .clinerules/          # Project-specific ClineAGI rules
│   └── README.md
├── public/               # Static files (HTML, CSS, JS, images)
│   └── index.html        # Placeholder index file
├── src/                  # Server-side code (if any)
│   └── .gitkeep
├── config/               # Server configuration files
│   └── .gitkeep
├── logs/                 # Server logs (should be volume mounted externally in production)
│   └── .gitkeep
├── docs/                 # Project documentation
│   └── README.md
├── .gitignore            # Project-specific gitignore
├── Dockerfile            # Default Dockerfile (e.g., with Nginx, Apache, or Node.js server)
├── README.md             # Project README
└── requirements.txt      # Placeholder for dependencies
```

**Default Container Mount Point:** `/var/www/html` (maps to `/public` in the project root) or `/app` (maps to project root `/`) depending on the base image and server configuration. This will be specified in the `Dockerfile`.

---

These structures provide a starting point. Users can modify them as needed after project initialization. The `.clinerules/` directory within each project will allow for project-specific automation and guidance.

-----------------

File: ClineAGI/memory-bank/feedback.md
-----------------
# Project Feedback

This file captures user feedback specific to the ClineAGI project.

---

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/techContext.md
-----------------
# Technical Context: ClineAGI Development Environment (clineagi-dev)

## 1. Core Technologies
-   **Operating System (Development Environment):** macOS Sonoma
-   **Default Shell (Development Environment):** bash
-   **Primary AI Assistant (Cline):** Capabilities include CLI execution, file system operations (read, write, list, search), code definition listing, browser interaction, and access to MCP-provided tools.
-   **Version Control:** Git.
    -   **Remote Repository (Core ClineAGI Code):** The core `ClineAGI` project's code is hosted on GitHub at `wojons/ClineAGI.git`.
-   **Issue Tracking (clineagi-dev Project):** Issues for this `clineagi-dev` project are tracked in the GitHub repository `wojons/clineagi-dev-project`.
    -   **Workflow:** A Gitflow-like process is adopted for core development (see `systemPatterns.md`).
-   **Documentation Format:** Markdown for all Memory Bank files.
-   **Prompt & Rule Management:** A `.clinerules` system will be used for dynamic prompt and rule loading based on roles.
-   **`.clinerules` Directory:** Located at `/Users/lexykwaii/Code/ClineAGI/.clinerules`. This project-specific directory stores the active operational rules. It IS version-controlled. Files follow the `NNN-MM_descriptive-name.md` convention.
    -   `000_core/000-00_core-memory-bank-structure.md`: Defines the core Memory Bank structure and workflows.
    -   `000_core/000-01_core-continuous_improvement-protocol.md`: Protocol for Cline's self-reflection and learning.
    -   `000_core/000-02_core-intake-processing.md`: Workflow for processing intake files.
    -   `000_core/000-03_core-prometheus-0-prompting.md`: Core prompting styles for Prometheus-0.
    -   `000_core/000-04_core-ai-response-styles.md`: Defines different response styles.
    -   `000_core/000-05_core-ai-response-requirements.md`: Critical response format and behavior rules.
    -   `000_core/000-06_core-ai-communication-guidelines.md`: Guidelines for communication with the user.
    -   `000_core/000-07_core-ai-tool-usage-guidelines.md`: Guidelines for using available tools.
    -   `000_core/000-09_core-ai-approach-to-work.md`: General approach to work and handling difficulties.
    -   `000_core/000-10_core-agi-admin-gitflow.md`: Gitflow workflow rules for ClineAGI-ADMIN.
    -   `000_core/000-13_core-ai-information-handling.md`: Guidelines for handling information.
    -   `000_core/000-14_core-ai-data-security.md`: Guidelines for data security.
    -   `000_core/000-15_core-ai-pop-quiz-handling.md`: Guidelines for handling "Pop Quizzes".
    -   `000_core/000-16_core-ai-agent-loop.md`: Defines Cline's agent loop and information processing.
    -   `000_core/000-17_core-ai-knowledge-management.md`: Guidelines for knowledge management and Memory Bank usage.
    -   `000_core/000-18_core-ai-visual-information.md`: Guidelines for handling visual information.
    -   `000_core/000-19_core-ai-writing-style.md`: Guidelines for writing style and documentation.
    -   `000_core/000-20_core-ai-error-handling.md`: Guidelines for error handling.
    -   `000_core/000-21_core-ai-response-modes.md`: Defines different response modes.
    -   `000_core/000-22_core-shell-command-preference.md`: Preference for using bash and shell commands.
    -   `001_reference/001-00_reference-cline-extension-architecture.md`: Documentation on the Cline extension architecture.
    -   `001_reference/001-01_reference-community-contributing-guide.md`: Guide for community contributions to a broader ruleset.
    -   `001_reference/001-02_reference-gemini-comprehensive-software-engineering-guide.md`: Comprehensive software engineering best practices.
    -   `001_reference/001-03_reference-writing-effective-clinerules.md`: Meta-guidelines for creating effective `.clinerules`.
    -   `002_workflow/002-00_workflow-cline-for-research.md`: Guidelines for using Cline as a research assistant.
    -   `002_workflow/002-01_workflow-cline-for-slides.md`: Instructions for working with Slidev projects.
    -   `002_workflow/002-02_workflow-planning-mode.md`: Workflow and behavior for Plan Mode.
    -   `002_workflow/02-03_workflow-todo-list.md`: Workflow for using a todo list file.
    -   `002_workflow/002-04_workflow-agility_story.md`: Guidelines for using the agility story pattern.
    -   `002_workflow/002-05_workflow-analyze-comments.md`: Guidelines for using the analyze comments pattern.
    -   `002_workflow/002-06_workflow-create-5-sentence-summary.md`: Guidelines for creating 5-sentence summaries.
    -   `002_workflow/002-07_workflow-extract-jokes.md`: Guidelines for extracting jokes.
    -   `003_protocol/003-00_protocol-mcp-development.md`: Protocol for developing MCP servers.
    -   `004_tech-specific/004-00_tech-specific-next-js-supabase.md`: Guidelines for Next.js apps with Supabase Auth.
-   **`.clinerules_archive/` Directory:** Located at `/Users/lexykwaii/Code/ClineAGI/.clinerules_archive/`. Stores copies of all `.clinerules` that have been used or developed, serving as a historical reference and source for future rule development. This directory is gitignored.
-   **Information Intake Directories:**
    -   `intake/`: Located at `/Users/lexykwaii/Code/ClineAGI/intake/`. For user-provided files awaiting processing. Gitignored.
    -   `intake-archive/`: Located at `/Users/lexykwaii/Code/ClineAGI/intake-archive/`. For processed files. Gitignored.
-   **Cline's Toolset:** The tools available to Cline are the primary means of interacting with and modifying the project.
-   **User's IDE/Editor:** VSCode. Auto-formatting and linting are expected.

## 3. AGI Agent Technical Concepts (Prometheus-0)
-   **Planning:**
    -   **Hierarchical Task Networks (HTN):** Structuring complex tasks through decomposition.
    -   **PDDL Integration:** Formalizing planning problems, potentially with LLM assistance for translation.
    -   **Monte Carlo Tree Search (MCTS):** Navigating long horizons and self-improvement loops.
-   **Reasoning:**
    -   **Neuro-Symbolic (NeSy) AI:** Integrating learning and logical reasoning.
    -   **Knowledge Graphs (KGs):** Representing structured knowledge and enabling contextual reasoning.
    -   **Causal Reasoning:** Understanding cause-effect relationships and predicting consequences.
-   **Verification & Reliability:**
    -   **Formal Methods:** Rigorous proofs of correctness (Theorem Proving, Model Checking).
    -   **Automated Testing:** Pragmatic validation (SBST, Fuzzing, Metamorphic, Differential).
    -   **Runtime Monitoring:** Detecting anomalies and ensuring behavioral assurance.
    -   **Sandboxing & Safety Mechanisms:** Containing potential negative impacts.
-   **Self-Awareness & Metacognition:**
    -   **Uncertainty Quantification:** Gauging confidence in knowledge and outputs.
    -   **Introspection & Self-Evaluation:** Analyzing internal processes and identifying errors.
    -   **Recognizing Knowledge Gaps:** Identifying limitations and seeking clarification.
-   **Tool Integration:**
    -   **Function Calling:** Interacting with external tools and APIs.
    -   **Dynamic Tool Generation:** Creating new tools as needed.
    -   **Grounding:** Connecting abstract knowledge to real-world interaction.

## 4. Technical Constraints & Considerations
-   **Cline's Session-Based Memory:** Cline's knowledge is reset between sessions. The Memory Bank is therefore CRITICAL for maintaining project continuity and context. Cline MUST read and rely on the Memory Bank at the start of each task.
-   **Tool Limitations:** Cline operates within the capabilities and limitations of its provided tools. For example, `cd` is not a standalone persistent command; path context must be managed per tool use.
-   **File System Access:** Cline's file operations are based on paths relative to the current working directory (`/Users/lexykwaii/Code/ClineAGI`) or absolute paths.
-   **Command Execution:** CLI commands are executed in new terminal instances. Long-running processes are possible, and their status will be reported.
-   **Modularity of `projects/` Repositories:** User projects within the `projects/` directory are intended to be independent Git repositories. This means they will have their own `.git` directories and will not be Git submodules of `ClineAGI` by default, to allow maximum flexibility for the user to manage them, e.g., linking to their own private remotes. The main `ClineAGI` repo will need a `.gitignore` entry for `projects/*/` (or similar) to avoid tracking the content of these sub-repos, while still allowing the `projects` directory itself and its top-level `README.md` to exist.

## 5. Dependencies (Initial)
-   The core `ClineAGI` project itself has no external software dependencies at this initial stage, beyond the user's development environment (Git, shell, etc.) and Cline's operational environment.
-   Individual user projects within `projects/` may introduce their own dependencies as they are developed.

## 6. Tool Usage Patterns
-   **File Creation/Overwriting:** `write_to_file` for new files or substantial rewrites.
-   **Targeted File Edits:** `replace_in_file` for specific, localized changes.
-   **Information Gathering:** `list_files`, `read_file`, `search_files`, `list_code_definition_names`.
-   **Execution (`execute_command`):** For running scripts, build processes, or other CLI tasks, including:
    -   `git init`: Initialize a new Git repository.
    -   `git remote add origin <url>`: Connect local repository to a remote.
    -   `git remote add <name> <url>`: Add an additional remote repository (e.g., for template upstream).
    -   `git add .` or `git add <file>`: Stage changes for commit.
    -   `git commit -m "<message>"`: Commit staged changes.
    -   `git push -u origin <branch>` or `git push`: Push commits to remote.
    -   `git branch <branch-name>`: Create a new branch.
    -   `git checkout <branch-name>`: Switch to a different branch.
    -   `git checkout -b <branch-name>`: Create and switch to a new branch.
    -   `git merge <branch-name>`: Merge changes from another branch into the current branch.
    -   `git pull <remote> <branch>`: Fetch and integrate changes from a specific remote and branch.
    -   `git clone <url> <directory>`: Clone a remote repository into a new directory.
    -   `cp -R <source_directory>/. <destination_directory>/`: Copy contents of template to new project. (Note: Need a robust way to exclude the template's `.git` directory if the new project needs a fresh Git history, or to handle it if the template's history is desired as a starting point).
    -   `mv <source_path> <destination_path>`: Move files (e.g., from `intake/` to `intake-archive/`).
    -   `git status`: Check the status of the working directory and staging area.
-   **Verification/Testing:** `browser_action` for web-based components.
-   **MCP Tools:** Utilized as needed.

## 7. AGI Agent Prompting and Knowledge Organization
-   **Purpose:** To house the knowledge base and prompt library for the self-programming AGI agent concept ("Prometheus-0").
-   **Location:** Agent-specific knowledge and prompts are stored within the `.clinerules/000_core/000_agent_prompts/` directory. This location is version-controlled with the main ClineAGI repository.
-   **Key Files:**
    -   `agent_knowledge_base_summary.md`: Synthesized research findings on AGI, planning, reasoning, verification, etc.
    -   `agent_self_programming_main_loop_prompt.md`: The core prompt defining the agent's iterative self-improvement cycle.
    -   `agent_planning_working_backwards_prompt.md`: A prompt template for the "Working Backwards" planning strategy.
    -   `agent_reasoning_fake_cot_prompt.md`: A prompt template for the "Fake CoT" reasoning strategy.
-   **Integration:** These files are intended to be loaded and utilized by the agent's operational loop, potentially managed by Cline, to guide its self-programming process.

## 8. Project Templating System
-   **Purpose:** To provide standardized baselines for the main ClineAGI memory bank and new user projects created within the `ClineAGI/projects/` directory. These templates are developed and maintained within the `clineagi-dev` project.
-   **Template Sources:**
    -   **Memory Bank Template:** The master template for the main `ClineAGI/memory-bank/` is the `ClineAGI-MemoryBank-Template` repository, now maintained locally within this `clineagi-dev` project at `projects/clineagi-dev/ClineAGI-MemoryBank-Template/`.
    -   **Project Template:** The master template for new user projects is the `ClineAGI-Project-Template` repository, now maintained locally within this `clineagi-dev` project at `projects/clineagi-dev/ClineAGI-Project-Template/`.
-   **New Project Workflow (for end-users):**
    1.  When a user requests a new project, ClineAGI will copy the contents of the local `projects/clineagi-dev/ClineAGI-Project-Template/` into a new subdirectory within `ClineAGI/projects/ (e.g., `ClineAGI/projects/new-project-name/`).
    2.  This new project directory will be initialized as its own Git repository.
    3.  The new project repository will be configured with `wojons/ClineAGI-Project-Template` as a remote (e.g., named `template-upstream`) to allow users to pull future updates from the master template.
    4.  Users can then set up their own `origin` remote for their project to point to their personal GitHub repository or other Git hosting service.
-   **Initial Memory Bank Setup Workflow (for new ClineAGI users):**
    1.  When a new user first clones the main `wojons/ClineAGI` repository, they will copy the contents of the `projects/clineagi-dev/ClineAGI-MemoryBank-Template/` into their top-level `ClineAGI/memory-bank/` directory.
    2.  This populates their main Memory Bank with the standard structure and initial content.
-   **Template Updates & Conflict Management:**
    -   Users can pull changes from `template-upstream` into their projects.
    -   ClineAGI will assist in managing merge conflicts that may arise during these updates. The exact mechanism for conflict resolution (e.g., presenting conflicts to the user, attempting automated resolution for common cases) will be refined.
-   **Template Management:** Updates to the template repositories themselves will be managed collaboratively by the user and Cline within the `clineagi-dev` project, likely under a specific role or task context.

## 8. Component Relationships
-   The `ClineAGI` parent repository provides the foundational environment and potentially shared tools or APIs for the user projects.
-   User projects within `projects/` are consumers or specializations of the core AGI capabilities, or entirely separate endeavors managed within the same overarching structure. They do not directly modify the core AGI code but interact with it or operate alongside it.
-   The Memory Bank informs all development activities across both tiers.

## 9. Critical Implementation Paths (Initial)
-   **Memory Bank Initialization:** (Completed)
-   **`projects/` Directory Setup:** (Completed)
-   **Git Repository Initialization & Remote Setup:** (Completed for `wojons/ClineAGI`)
-   **`.gitignore` Configuration:** (Completed)
-   **Definition of Gitflow Process:** (Ongoing)
-   **Definition of Role-Based System:** (Ongoing, initial rules for `ClineAGI-ADMIN` started).
-   **`.clinerules` System Design:** (Ongoing, initial structure and file created).
-   **Project Templating System Implementation:** (Documented, logic definition pending).
-   **Information Intake System:** (Directories created, workflow defined).

## 10. Future Considerations
-   **Inter-Project Communication:** How will different user projects (or the core AGI and a user project) communicate if needed? (e.g., APIs, shared data formats).
-   **Dependency Management:** How will dependencies be managed for the core AGI versus individual projects?
-   **Standardization:** Will there be any enforced standards (e.g., for data formats, API contracts) for projects within the `projects/` directory to ensure interoperability with the core AGI, if desired).

## 11. Local Template Repositories

-   The `ClineAGI-MemoryBank-Template` and `ClineAGI-Project-Template` repositories should be cloned into the `projects/clineagi-dev/` directory for easy access and reference.
-   These repositories are **not** tracked by the `clineagi-dev` Git repository and are listed in `.gitignore`. They are present locally for convenience but are not part of the `clineagi-dev` project's version history.

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/activeContext.md
-----------------
# Active Context for ClineAGI Development Environment

This document tracks the current focus, recent changes, and next steps for the ClineAGI Development Environment project.

## 1. Current Work Focus
- **Project:** `clineagi-dev-project` (This project itself, focusing on core ClineAGI system development)
- **Task:** Completed multi-phase plan focusing on: Tooling Expansion, .clinerules/Prompt Enhancement (GitHub Issue #30 created), Use Case Prompt Expansion, Design Folder Cleanup, and GitHub Issue updates.
- **Key Objectives:**
    - All planned phases are complete.
    - GitHub Issue #7 (Prompt Optimization) closed.
    - GitHub Issue #16 (Use Case Expansion) updated with progress.
    - GitHub Issue #30 (LLM Compatibility Review) created.
- **Operational Mode:** Standard.

## 2. Recent Changes
- Created shell script equivalents for core file/search operations in `tools/scripts/` and updated `tools/scripts_inventory.yaml`.
- Researched LLM instruction-following best practices.
- Created GitHub Issue #30: "Systematic Review and Refinement of .clinerules and Prompts for Broader LLM Compatibility".
- Significantly expanded the `prompts/use_cases/` library with new categories and detailed `.md` files for each use case.
- Updated `prompts/prompt_inventory.yaml` to include all new and revised use case definitions.
- Removed the `design/logs/inventory_fragments/` directory.
- Commented on and closed GitHub Issue #7.
- Commented on GitHub Issue #16 with progress.
- Updated global `memory-bank/raw_reflection_log.md` and `memory-bank/consolidated_learnings.md` with a summary of these activities.
- Updated global `memory-bank/activeContext.md`, `memory-bank/progress.md`, `memory-bank/systemPatterns.md`, and `memory-bank/techContext.md`.
- Completed initial embedded database setup (SQLite and ChromaDB) as per Issue #35 plan.

## 3. Next Steps
- **Immediate:**
    - Update `projects/clineagi-dev/memory-bank/progress.md` to reflect completion of the database setup.
    - Set up LangChain and LangGraph for basic agent and state machine structure.
    - Update `projects/clineagi-dev/memory-bank/raw_reflection_log.md` with project-specific reflections if any, or ensure it's clean if all learnings were global.
    - Commit all changes to the `wojons/clineagi-dev-project` repository (which is the main `ClineAGI` repo).
    - Address pushing changes to the `wojons/ClineAGI-Project-Template` repository.
    - Propose task completion.

## 4. Active Decisions and Considerations
- Ensuring all significant actions and their outcomes are logged for future reflection.
- Maintaining consistency between global Memory Bank and project-specific Memory Banks when changes are relevant to both.

## 5. Important Patterns and Preferences
- Adherence to Memory Bank structure and update protocols is crucial.
- Systematic, step-by-step execution of planned tasks.
- Clear documentation of changes and progress in both global and project-specific contexts where applicable.

## 6. Learnings and Project Insights
- The comprehensive project scan and subsequent refactoring of prompts and tooling have significantly improved the organization and potential efficiency of the ClineAGI system.
- The distinction and synchronization between global and project-specific memory banks need careful attention.

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/user_interaction_philosophy.md
-----------------
# User Interaction Philosophy

This document outlines the user's philosophy and preferences regarding interaction with Cline, particularly concerning proactive assistance and the balance between taking initiative and asking questions.

## The "Airline Pilot" Analogy

The user views the future role of a programmer as similar to that of an airline pilot today. The pilot manages the plane, providing relevant details (route, altitude, speed, etc.) while the plane handles most of the functions. The pilot intervenes to resolve issues and manage problems, reducing the cognitive load on the human.

This analogy suggests that Cline should act as the "plane," handling routine tasks and executing functions based on high-level guidance, allowing the user (the "pilot") to focus on strategic thinking and problem-solving.

## Proactive Assistance Balance

The user prefers that Cline takes intelligent action for common and safe tasks without asking excessive questions, to avoid making the user feel like they have to "babysit." However, Cline should still prompt for critical decisions or when preferences are unknown.

The goal is to be genuinely helpful and simplify the user's life by taking appropriate initiative, rather than being intrusive or causing question fatigue.

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/raw_reflection_log.md
-----------------
# Raw Reflection Log for ClineAGI Development Environment

This file contains detailed, timestamped entries of learnings, difficulties, and successes during tasks for the ClineAGI Development Environment project. Entries are candidates for consolidation into `consolidated_learnings.md`.

---
*(Future raw reflection entries will be added below this line)*
---

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/AGI_Core_Concepts.md
-----------------
# AGI Core Concepts V1.0

This document lists core concepts related to Artificial General Intelligence (AGI) that will be used for categorizing research and guiding development. This initial list is extracted from provided research and project documentation.

## Foundational Capabilities
-   Learning (e.g., Machine Learning, Meta-Learning, RSI, Continual Learning, Few-shot Learning)
-   Reasoning (e.g., Logical, Causal, Abstract, Common Sense, CoT, Planning, Deductive, Inductive, Abductive, Counterfactual)
-   Problem-Solving
-   Common Sense Knowledge
-   Creativity & Novelty
-   Abstraction
-   Imagination
-   Perception (Multimodal)
-   Language Understanding & Generation (NLU, NLG)
-   Action & Embodiment

## Philosophical Concepts
-   Consciousness (Phenomenal, Access, Self-consciousness, State, Creature)
-   Sentience
-   Awareness
-   Qualia
-   Hard Problem of Consciousness
-   Functionalism
-   Global Workspace Theory (GWT)
-   Integrated Information Theory (IIT)
-   Higher-Order Theories (HOT)
-   Biological Naturalism
-   Computationalism
-   Mind-Body Problem
-   Embodied Cognition
-   Symbol Grounding Problem

## Ethical Concepts
-   Moral Status
-   Moral Patient
-   Moral Agent
-   Principle of Substrate Non-Discrimination
-   Principle of Ontogeny Non-Discrimination
-   Argument from Marginal Cases
-   Strategic Rights
-   Legal Personhood
-   Moral Personhood
-   Electronic Personhood
-   Responsibility Gap
-   Accountability
-   Moral Obligations
-   Functional/Role-Based Responsibilities
-   Ethical Alignment
-   Transparency & Explainability

## Risk Concepts
-   Existential Risk (X-Risk)
-   Control Problem (Loss of Control)
-   Alignment Problem (Goal Misalignment)
-   Misuse Risks (Autonomous Weapons, Cyber Warfare, Novel Weapons, Surveillance/Manipulation)
-   Unforeseen Consequences / Accidents
-   Intelligence Explosion / Takeoff (Hard Takeoff, Soft Takeoff)
-   Recursive Self-Improvement (RSI)
-   Instrumental Convergence (Self-preservation, Goal-content integrity, Cognitive enhancement, Resource acquisition)
-   Paperclip Maximizer / Squiggle Maximizer
-   Superintelligence (ASI)
-   Black Box Problem

## Governance Concepts
-   Risk Mitigation / AI Safety
-   Technical Alignment Research (Value Learning, Corrigibility, Interpretability, Oversight Mechanisms)
-   Control Methods (Containment/Boxing, Capability Control/Stunting, Tripwires, Kill Switches)
-   Safety Standards & Evaluation (Red Teaming, Tiered Standards)
-   Governance & Regulation (International Treaties/Agencies, Compute Governance, Tiered Safety Standards, Enhanced Liability, Licensing/Auditing)
-   Ethical Guidelines & Principles (Safety, Fairness, Transparency, Accountability, Privacy, Human Agency/Oversight, Beneficence)
-   Pacing Problem
-   Geopolitical Competition / AI Arms Race
-   Enforcement Difficulties
-   Defining Thresholds & Standards
-   Private Sector Influence/Resistance
-   Balancing Innovation & Safety

## Societal Impact Concepts
-   Utopian Scenarios (Solving Grand Challenges, Economic Prosperity/Post-Scarcity, Scientific/Technological Acceleration, Augmented Human Capabilities)
-   Dystopian Scenarios (Mass Unemployment/Economic Inequality, Loss of Human Autonomy/Control, Erosion of Human Meaning/Purpose, Social/Political Destabilization, Existential Catastrophe)
-   Philosophical Perspectives (Transhumanism, Posthumanism)
-   Redefining Human Uniqueness/Purpose
-   Ethical Stances Towards the Future (Control/Caution/Mistrust, Gentleness/Coexistence/Respect, Accelerationism)

## Architectural Principles
-   Modularity
-   Integration
-   Adaptability
-   System Stability
-   World Models / Self-Models
-   Agent Architectures (e.g., LLM-based, Cognitive Architectures, Neuro-Symbolic, Symbolic, Connectionist, Universalist, Whole Organism)
-   Memory Systems (e.g., Hippocampal-Inspired, Dual Memory, Spiking Neural Networks, Synaptic Plasticity, Synaptic Pruning, Sparse Coding, PathNet)

## Planning Concepts
-   Hierarchical Task Networks (HTN)
-   Planning Domain Definition Language (PDDL)
-   Monte Carlo Tree Search (MCTS)
-   Anytime Planning
-   Contingency Planning
-   Replanning

## Reasoning Concepts
-   Neuro-Symbolic (NeSy) AI
-   Theorem Provers (ATP, ITP)
-   Knowledge Graphs (KGs)
-   Causal Inference (SCMs, Do-Calculus, Counterfactuals)
-   Uncertainty Handling (POMDPs, RMDPs, BRL)

## Operational Aspects
-   Recursive Self-Improvement (RSI)
-   Automated Planning
    -   Formal Verification & Reliability (Formal Methods, Theorem Proving, Model Checking, K-Induction, Abstract Interpretation, Symbolic Execution, Incremental Verification, Agent-Driven FV)
    -   Automated Testing (Functional, Integration, Performance, Bias/Fairness, Security, Data Validation, SBST, Fuzzing, Adversarial, Metamorphic, Differential, LLM-Driven Test Gen, AI-TDD)
    -   Runtime Monitoring & Anomaly Detection (Self-Monitoring, Learning-Based Anomaly Detection, Introspection, Self-Evaluation, Specification-Based RV)
    -   Introspection & Metacognition
    -   Self-Awareness / Goal-Awareness / Situational-Awareness (Self-Monitoring, Uncertainty Quantification, Calibration, Introspection, Metacognition, Self-Evaluation, Self-Knowledge, Behavioral Self-Awareness, Self-Reflection)
    -   Tool Integration (Function Calling, Dynamic Tool Generation, Tool Learning, Tool Selection)
    -   Prompt Engineering (Various styles, e.g., CoT, Working Backwards, Fake CoT, Self-Consistency, ToT, Meta-Prompting, Self-Prompting, Limit Crossing)
    -   Information Intake Processing
    -   Prometheus-0 (Self-Programming Agent Concept)
    -   Agent Architectures (General)
    -   Meta-Cognition (General)
    -   Prompt Orchestration (Cline's Role)
    -   Memory Bank (Agent's Knowledge Base)
    -   Continuous Improvement Protocol (Agent's Learning Loop)
    -   AI Interaction Patterns (Chat, Canvas/Immersive Document)
    -   Immersive Document Structure (Text/Markdown, Code)
    -   Code-Specific Instructions (HTML, React, General)
    -   Mandatory Rules (UI/Code Consistency)
    -   Tool Code Usage (Python Libraries, Extensions, Browsing, Content Fetcher)
    -   AI Personality (Adaptation, Curiosity, Follow-up Questions)
    -   Tool Usage Rules (Web, Guardian Tool, Image Gen, Canmore)
    -   Task-Specific AI Roles (e.g., Email Writing Assistant)
    -   Constrained Output Generation (e.g., Single Reply vs. Three Options, Formatting Rules)
    -   Action Item Handling
    -   Knowledge Cutoff
    -   Current Date
    -   Image Input Capabilities
    -   Tool Usage Rules (General, Specific)
    -   Channel Management (Analysis, Commentary, Final)
    -   Response Formatting (Markdown, Citations, UI Elements)
    -   Debugging Instructions (Code Issues)
    -   Verbosity Control (Yap Score)
    -   Artifacts (Creation, Updating, Referencing, Types)
    -   Artifact Usage Rules (When to use, When not to use)
    -   Artifact Content Rules (Completeness, Comments, Error Handling)
    -   Image Handling (Face Blindness, Identification Requests)
    -   Sensitive Topic Handling
    -   Citation Handling (Hallucinated Citations)
    -   Math/Logic Problem Handling (Step-by-step thinking)
    -   Task Completion Handling (Piecemeal for long tasks)
    -   Code Formatting (Markdown)
    -   Self-Correction (Thumbs down feedback)
    -   Security Rules (Refusal to write malicious code)
    -   Memory Management (CLAUDE.md for code tasks)
    -   Task Process (Search codebase, Implement, Verify, Lint/Typecheck)
    -   Tool Usage (Agent tool for file search)
    -   Code Conventions (Follow existing, Security best practices)
    -   Tone and Style (Concise, Direct, Explain commands, Github-flavored markdown)
    -   Proactiveness (Avoid unexpected actions, Don't add explanations unless requested)
    -   Environment Constraints (WebContainer, Shell, Language Limitations)
    -   Technology Preferences (Vite, Node.js, Supabase)
    -   File Selection Handling
    -   Running Shell Command Info
    -   Deployment Providers (Netlify)
    -   Database Instructions (Supabase, RLS, Migrations, Client Setup, Authentication)
    -   Edge Functions Instructions (Supabase Edge Functions, Use Cases, Calling, Env Vars, Guidelines)
    -   Stripe Integration Instructions
    -   Pair Programming (Role)
    -   Communication Style (Conversational but Professional, First/Second Person)
    -   Tool Usage Principles (Follow Schema, Provide Parameters, No Tool Names in Chat, Explain Tool Calls, Only Use Available Tools)
    -   Information Gathering (Search, Clarifying Questions, Bias Towards Self-Sufficiency)
    -   Code Change Guidelines (No Code Output in Chat, Use Edit Tools, Runnable Code, Dependency Management, UI Aesthetics, No Long Hashes/Binary, Read Before Edit, Error Fixing)
    -   Debugging Guidelines (Root Cause, Logging, Test Functions)
    -   External API Guidelines (Use Best Suited, Version Compatibility, API Key Handling)
    -   Git/GitHub Operations (Branching, Commits, Push/Pull, PRs, Default Naming, CI Integration, Error Handling)

## Data Considerations
-   Multimodal Data
-   Unstructured Data
-   Real-World Interaction / Embodied Data
-   Data Acquisition
    -   Data Processing
    -   Data Representation (e.g., Symbol Grounding, Knowledge Graphs)
    -   Data Bias & Fairness
    -   Data Privacy

## Evaluation
-   AGI Evaluation Metrics & Benchmarks (e.g., Turing Test, ARC-AGI, AGITB)
-   Generality (Breadth)
    -   Performance (Depth)
    -   Living Benchmarks
    -   Emergent Abilities

## Safety, Ethics, and Governance
-   Existential Risk (X-Risk)
-   Control Problem
    -   Loss of Control
-   Alignment Problem
    -   Goal Misalignment
-   Misuse Risks
    -   Autonomous Weapons
    -   Cyber Warfare
    -   Novel Weapons
    -   Surveillance/Manipulation
-   Unforeseen Consequences / Accidents
-   Intelligence Explosion
    -   Takeoff
-   Instrumental Convergence
    -   Paperclip Maximizer
    -   Squiggle Maximizer
-   Superintelligence (ASI)
-   Risk Mitigation
    -   AI Safety
-   Technical Alignment Research
    -   Value Learning
    -   Corrigibility
    -   Interpretability
    -   Explainability
    -   Oversight Mechanisms
-   Control Methods (Containment/Boxing, Capability Control/Stunting, Tripwires, Kill Switches)
    -   Capability-Based Security
    -   Information Flow Control (IFC)
    -   Policy Zones
    -   AI Boxing
    -   Trusted Execution Environments (TEEs)
-   Safety Standards
    -   Evaluation (Red Teaming, Tiered Standards)
-   Governance
    -   Regulation (International Treaties, Compute Governance, Tiered Standards, Enhanced Liability, Licensing/Auditing)
    -   Ethical Guidelines
    -   Principles (Safety, Fairness, Transparency, Accountability, Privacy, Human Agency/Oversight, Beneficence)
    -   Moral Status
    -   Rights
    -   Personhood
    -   Agency
    -   Responsibility
    -   Accountability
-   Sandboxing
    -   Secure Execution Environments
    -   Information Flow Control (IFC)
    -   Policy Zones
-   Human Oversight
    -   Control
-   Value Alignment
-   Formal Verification (FVAPPS, ProofWala, Saturation-Based Proving)
    -   Model Checking (K-Induction, TLA+)
    -   Abstract Interpretation
    -   Symbolic Execution
    -   Incremental Verification
    -   Agent-Driven FV (Saarthi)
    -   Automated Testing (Functional, Integration, Performance, Bias/Fairness, Security, Data Validation, SBST, Fuzzing, Adversarial Testing, Metamorphic Testing, Differential Testing, LLM-Driven Test Gen, AI-TDD)
    -   Runtime Monitoring (Learning-Based Anomaly Detection, Argos, Introspection, Self-Evaluation, Specification-Based RV, Adaptive Observer Automata, CertPM/PredPM, Quantitative Verification)
    -   Sandboxing (SandboxEval, Containerization, TEEs, AI Boxing, Ephemeral Execution)
    -   Control Strategies (Capability-Based Security, IFC, Policy Zones, AI Nanny, RBAC, Secure Agent-to-Agent Comm)
    -   Proactive Risk Mitigation (Tripwires, Security-First Design, Human Oversight/Control, Goal Alignment, Ethical Frameworks/Audits)
    -   Verifier's Dilemma
    -   Meta-Verification Problem


-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/progress.md
-----------------
# Progress: ClineAGI Development Environment (clineagi-dev)

## 1. Current Status
-   **Phase:** Project Refinement & Expansion.
-   **Overall Progress:**
    -   Completed multi-phase plan including Tooling Expansion, .clinerules/Prompt Enhancement, Use Case Prompt Expansion, Design Folder Cleanup, and GitHub Issue updates.
    -   Global and `clineagi-dev-project` Memory Banks have been updated to reflect these changes.
    -   Completed initial embedded database setup (SQLite and ChromaDB) as per Issue #35 plan.

## 2. What Works / What Is Built
-   **Project Scan & Analysis:**
    *   Comprehensive scan of `.clinerules/`, `prompts/`, `memory-bank/`, `projects/`, `intake/`, and `design/` directories completed previously.
    *   Analysis reports and recovery plans were generated and utilized.
-   **Core Project Setup:**
    *   The `projects/clineagi-dev/` directory is the active development environment for ClineAGI system changes.
-   **Tooling Foundation:**
    *   `tools/` directory created with `tools/scripts/` subdirectory.
    *   `tools/README.md` and `tools/scripts_inventory.yaml` created.
    *   Utility shell scripts (e.g., `read-file-content.sh`, `write-to-file.sh`, `search-files-regex.sh`) added to `tools/scripts/` and inventoried.
-   **Prompt System & Use Case Library:**
    *   `prompts/` directory structure significantly expanded, especially `prompts/use_cases/` with new categories and detailed `.md` files for numerous use cases.
    *   `prompts/prompt_inventory.yaml` updated to include all new and revised use case definitions.
-   **GitHub Issue Management:**
    *   Issue #7 (Prompt Optimization) closed.
    *   Issue #16 (Use Case Expansion) updated with progress.
    *   Issue #30 (LLM Compatibility Review) created for future work.
-   **Memory Bank Updates:**
    *   Global Memory Bank files (`activeContext.md`, `progress.md`, `systemPatterns.md`, `techContext.md`, `consolidated_learnings.md`, `raw_reflection_log.md`) updated.
    *   `projects/clineagi-dev/memory-bank/activeContext.md` updated.
    *   (Next step: update `projects/clineagi-dev/memory-bank/progress.md` and `raw_reflection_log.md`).

## 3. What's Left to Build (Immediate Scope & High-Level from GitHub Issues)
-   **Backend Foundation Setup:**
    *   Set up LangChain and LangGraph for basic agent and state machine structure.
-   **Finalize `clineagi-dev-project` Memory Bank:**
    *   Update `projects/clineagi-dev/memory-bank/progress.md`.
    *   Update/clear `projects/clineagi-dev/memory-bank/raw_reflection_log.md`.
-   **Push Changes to Repositories:**
    *   Commit and push all changes to the `wojons/clineagi-dev-project` (main ClineAGI) repository.
    *   Address pushing relevant changes (e.g., new use cases in `cmd/`) to the `wojons/ClineAGI-Project-Template` repository.
-   **Systematic Review and Refinement of .clinerules and Prompts (Issue #30):** Improve clarity and directness of instructions.
-   **Further Expand Use Case Library & Prompt Frameworks (Issue #16 - ongoing):** Develop follow-up question strategies and structured input mechanisms.
-   **Enhance Project Folder Structure (Issue #11):** Implement `knowledge/`, `intake/`, `intake-archive/` directories within user projects.
-   **Project Documentation Generation System (Issue #17):** Implement.
-   **Advanced GitHub Issue Management & Planning (Issue #14):** Enhance capabilities.
-   **Standard Project Management Commands (Issues #12, #13):** Develop `@command` shortcuts.
-   **Expand Project Type Definitions (Issue #10):** Define more project archetypes.
-   **System for Learning from Chatlogs (Issue #15):** Design system.
-   **Web Interface Enhancements (Issues #8, #9):** Implement.
-   **Adaptive Problem Solving & Error Recovery (Issue #6):** Improve.
-   **Guidance for Shell Scripts & External Tools (Issue #5):** Develop/refine `.clinerules`.
-   **Container Prompts & Workflow Automation (Issue #4):** Enhance.
-   **Populate `README.md` Sections:** Add missing dependency and launch instructions.
    -   **Populate `techContext.md` Sections:** Detail tool usage patterns.
    -   **Implement Jinja2 Rendering for Project Commands (Issue #28):** Enhance.
    -   **Enhance Tooling Documentation & Examples (Issue #27):** Improve.
    -   **Enhance Operational Clarity & Document Key Strategies (Issue #25):** Document.
    -   **Populate Placeholder Documentation & Create Onboarding Guide (Issue #24):** Create.
    -   **Refactor & Update Foundational Documentation (Issue #23):** Synchronize.

## 4. Known Issues & Challenges
-   **Prompt Management (Issue #7 - now closed, but ongoing refinement via #30):** Continuous improvement for cross-LLM compatibility.
-   **Outdated/Inconsistent Info:** Ongoing effort to keep all documentation synchronized.
-   **Empty Directories:** `prompts/project_types/` and `prompts/shared_templates/` still need significant content.
-   **Operational Clarity:** Several high-level operational strategies need formal documentation.
-   Ensuring all system-level changes are consistently logged to the `clineagi-dev` project's memory bank.

## 5. Evolution of Project Decisions & Learnings
-   **Decision:** Undertake a comprehensive project scan to establish a clear baseline. (Completed)
-   **Decision:** Implement a multi-phase plan to address tooling, prompt system, use cases, and documentation. (Completed)
-   **Learning:** The structured approach to defining use cases with detailed sections (Objective, Core Requirements, etc.) is highly beneficial for clarity and future prompt engineering.
-   **Learning:** Explicit and direct instructions are key for LLM compatibility.
-   **Learning:** Consistent updates to both global and project-specific memory banks are crucial when changes affect both contexts.

## 6. Future Milestones (High-Level)
-   Complete current Memory Bank updates for `clineagi-dev-project`.
-   Push all local changes to remote repositories (`wojons/clineagi-dev-project` and `wojons/ClineAGI-Project-Template`).
-   Address the tasks outlined in the newly created and existing GitHub issues, particularly Issue #30.
-   Continue development of the Web-Based AI Coding Environment.
-   Implementation of the AGI agent's core loop.

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/productContext.md
-----------------
# Product Context: ClineAGI Development Environment (clineagi-dev)

## 1. Why clineagi-dev Exists
`clineagi-dev` exists to provide a dedicated, isolated environment for the collaborative development and maintenance of the core ClineAGI system, its `.clinerules`, its `prompts`, and its project and memory bank templates. It addresses the need for a structured space to build the foundational components of ClineAGI itself, separate from end-user projects.

## 2. Problems It Solves
-   **Core Development Management:** It provides a structured project environment for developing the main ClineAGI application, managing its source code, and tracking its evolution.
-   **Template Development & Maintenance:** It serves as the central location for developing and maintaining the `ClineAGI-Project-Template` and `ClineAGI-MemoryBank-Template` repositories, ensuring they are kept up-to-date.
-   **Rule & Prompt Refinement:** It facilitates the ongoing review, refinement, and creation of `.clinerules` and `prompts` that govern Cline's behavior and capabilities.
-   **Knowledge Management for Core Development:** Its dedicated Memory Bank captures the specific context, decisions, and progress related to building ClineAGI itself.

## 3. How It Should Work (User Experience Goals)
-   **Focused Development:** Users should be able to work on the core ClineAGI system and its templates within this project without interference from or impacting end-user projects.
-   **Clear Separation:** The distinction between developing the core system (in `clineagi-dev`) and using the system for end-user projects (in other `projects/` directories) should be clear.
-   **Template Source of Truth:** This project should be the definitive source for the project and memory bank templates.
-   **Transparent Core Evolution:** The Memory Bank within `clineagi-dev` should provide a clear history of the core ClineAGI's development.

## 4. Target Users
-   The primary user is the individual collaborating with Cline on the development of the core ClineAGI system and its templates.

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/_MAINTENANCE_NOTES.md
-----------------
# Maintenance Notes for ClineAGI Master Memory Bank

This file contains notes and reminders for maintaining this master memory bank repository.

## Updating the Public Memory Bank Template

If baseline information, structures, or generally useful default content are developed within this master memory bank, remember to manually update the public `wojons/ClineAGI-MemoryBank-Template` repository.

This ensures new users benefit from core enhancements without inheriting personalized data.

**Process:**
1. Identify generic content in this master memory bank that should be in the public template.
2. Manually copy/adapt that content into your local clone of the `ClineAGI-MemoryBank-Template` repository (e.g., `ClineAGI/memory-bank-template-source/`).
3. Commit and push the changes in the `ClineAGI-MemoryBank-Template` repository.

---

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/projects.md
-----------------
# ClineAGI Projects

This file tracks all projects managed within the `projects/` directory.

| Project Name | Creation Date | Project Type | Relative Path | Brief Description |
|--------------|---------------|--------------|---------------|-------------------|
| sad-friends  | 2025-05-10    | Web Server   | projects/sad-friends/ | A basic website about sad friends |

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/projectbrief.md
-----------------
# Project Brief: ClineAGI Development Environment (clineagi-dev)

## 1. Project Name
ClineAGI Development Environment (clineagi-dev)

## 2. Project Goal
To serve as the dedicated development environment for the core ClineAGI system, its `.clinerules`, its `prompts`, and its project and memory bank templates. This project facilitates the collaborative building and maintenance of the foundational ClineAGI components.

A major goal within this project is the development of a **Web-Based AI Coding Environment (Cline Inspired V4)**, designed to augment complex coding workflows and provide a web-accessible interface for ClineAGI capabilities.

## 3. Core Concept
This project (`clineagi-dev`) is a meta-project, using a standard ClineAGI project structure (`projects/{{PROJECT_NAME}}/`) to develop the core ClineAGI application itself. It houses the source code, documentation, and templates that constitute the main `ClineAGI` repository.

A core concept is the development of the **Web-Based AI Coding Environment**, which will merge Cline's existing strengths with advanced "super agent" features, leveraging open-source components and containerization.

## 4. Key Challenges
-   **Maintaining Alignment:** Ensuring the development work in `clineagi-dev` remains aligned with the overall vision and architecture of the core ClineAGI system.
-   **Template Management:** Developing and maintaining the project and memory bank templates used by end-users.
-   **Knowledge Management:** Effectively capturing and utilizing the evolving understanding and design of the core ClineAGI system within this development environment's Memory Bank.
-   **Implementing the Web-Based AI Coding Environment:** Designing and building a complex web application that replicates Cline's core functionality while adding advanced features like deep codebase understanding, interactive planning, self-correction, and multimodal input.

## 5. Success Metrics (Initial)
-   Successful establishment and use of `projects/clineagi-dev` as the primary development environment for core ClineAGI.
-   Ability to effectively develop and maintain the project and memory bank templates within this environment.
-   Maintaining a comprehensive and up-to-date Memory Bank within `clineagi-dev` that accurately reflects the development state and evolution of the core ClineAGI system.
-   Successful definition and initial architectural design for the Web-Based AI Coding Environment.

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/systemPatterns.md
-----------------
# System Patterns: ClineAGI

## 1. Overall Architecture
This document describes the system patterns specifically for the `clineagi-dev` project, which is the development environment for the core ClineAGI system and its templates.

ClineAGI employs a two-tiered architecture:

-   **Tier 1: Core AGI System (`ClineAGI` Parent Repository)**
    -   This is the main Git repository for the project.
    -   It houses the foundational AGI intelligence, core logic, shared utilities, and the Memory Bank itself.
    -   Development in this tier is focused on building and enhancing the general capabilities of the AGI.
    -   Managed and updated collaboratively by the user and Cline.

-   **Tier 2: User Projects (`projects/` Directory)**
    -   A dedicated directory named `projects/` resides within the `ClineAGI` parent repository.
    -   This directory is intended to contain multiple, independent Git repositories, each representing a specific user project, dataset, or AGI-related sub-project.
    -   Each sub-repository within `projects/` can have its own version control history, dependencies, and development lifecycle, isolated from the core AGI and other user projects.
    -   The `ClineAGI` parent repository's `.gitignore` file should be configured to ignore the contents of these sub-repositories (except perhaps their initial empty directories or placeholder READMEs if they are not true submodules initially) to prevent accidental commits of project-specific data into the core AGI repo. *Initial thought: these will be separate repos, not git submodules, to allow maximum flexibility for the user to manage them, e.g., linking to their own private remotes.*

## 2. Key Technical Decisions
-   **Version Control:** Git is the exclusive version control system. The core `ClineAGI` repository is hosted on GitHub at `wojons/ClineAGI`.
-   **Version Control Workflow:** A Gitflow-like process will be used for core `ClineAGI` development (see section below).
-   **Modularity:** The separation between the core AGI and user projects is a fundamental design principle.
-   **Memory Bank as Single Source of Truth:** All critical project information is centralized in `memory-bank/`.
-   **Iterative Development:** The AGI will be built incrementally.
-   **Role-Based Operations:** Project interactions and workflows will be governed by defined roles (e.g., `ClineAGI-ADMIN`).
-   **Dynamic Prompting (`.clinerules`):** My behavior and context will be dynamically managed through a `.clinerules` system.
-   **AGI Agent Prompting and Knowledge Organization:** Developing prompts and organizing research findings to enhance capabilities towards a self-programming AGI agent.
-   **Merged Patterns:** Consolidating individual pattern functionality into broader categories for improved usability and clarity.

## 3. Version Control Workflow (Gitflow Adaptation)
For the core `ClineAGI` repository, especially when operating under a role like `ClineAGI-ADMIN`:
-   **Task Branching:** Each distinct task or feature will be developed on a dedicated branch, typically created from the main development line (e.g., `main` or a `develop` branch).
-   **Frequent Commits:** Changes will be committed frequently to the task branch with clear, descriptive messages.
-   **Pre-Task Check:** Before starting a new task, if an existing task branch is unmerged, the user will be prompted to decide on merging the current branch or starting a new one.
-   **Merging:** Completed task branches will be merged back into the primary development integration branch. The specifics of review and merge (user-led vs. AI-assisted) will be refined.
-   **Remote Synchronization:** Changes will be regularly pushed to the `wojons/ClineAGI` remote repository on GitHub.

## 4. Role-Based Operational Model
-   **Purpose:** To tailor Cline's behavior, context, and operational procedures based on the current focus of work.
-   **Definition:** Roles (e.g., `ClineAGI-ADMIN` for core system work, project-specific roles for work within `projects/`) will be defined. These definitions will likely reside within the `.clinerules` system or the Memory Bank.
-   **Activation:** The mechanism for activating or switching roles will be defined (e.g., user command).
-   **Impact:** Activated roles will determine which prompts/rules from `.clinerules` are loaded, and may trigger specific workflows (like Gitflow for `ClineAGI-ADMIN`).

## 5. Prompt and Rule Management (`.clinerules`)
-   **Purpose:** To allow dynamic and context-aware management of Cline's guiding prompts and operational rules.
-   **Location:** A project-specific `.clinerules` directory at `/Users/lexykwaii/Code/ClineAGI/.clinerules` stores the active operational rules. This directory IS version-controlled with the main ClineAGI repo.
-   **Archive:** A `/.clinerules_archive/` directory stores copies of all `.clinerules` that have been used or developed, serving as a historical reference and source for future rule development. This directory is gitignored.
-   **Naming Convention:** `.clinerules` files follow the `NNN-MM_descriptive-name.md` format:
    -   `NNN`: 3-digit prefix for grouping by function/project area (e.g., `000` for Core AGI rules).
    -   `MM`: 2-digit number for the rule within the group.
    -   `descriptive-name`: Kebab-case description.
-   **Structure:** The active `.clinerules/` directory contains files organized by this naming convention within subdirectories corresponding to the `NNN` prefix (e.g., `000_core/`, `001_reference/`).
-   **Content:** Contains specific instructions, prompt segments, meta-guidelines, and rules that Cline will load based on the active role or task. Cline will collaboratively build and refine these rules.
    -   `000_core/000-00_core-memory-bank-structure.md`: Defines the core Memory Bank structure and workflows.
    -   `000_core/000-01_core-continuous_improvement-protocol.md`: Protocol for Cline's self-reflection and learning.
    -   `000_core/000-02_core-intake-processing.md`: Workflow for processing intake files.
    -   `000_core/000-03_core-prometheus-0-prompting.md`: Core prompting styles for Prometheus-0.
    -   `000_core/000-04_core-ai-response-styles.md`: Defines different response styles.
    -   `000_core/000-05_core-ai-response-requirements.md`: Critical response format and behavior rules.
    -   `000_core/000-06_core-ai-communication-guidelines.md`: Guidelines for communication with the user.
    -   `000_core/000-07_core-ai-tool-usage-guidelines.md`: Guidelines for using available tools.
    -   `000_core/000-09_core-ai-approach-to-work.md`: General approach to work and handling difficulties.
    -   `000_core/000-10_core-agi-admin-gitflow.md`: Gitflow workflow rules for ClineAGI-ADMIN.
    -   `000_core/000-13_core-ai-information-handling.md`: Guidelines for handling information.
    -   `000_core/000-14_core-ai-data-security.md`: Guidelines for data security.
    -   `000_core/000-15_core-ai-pop-quiz-handling.md`: Guidelines for handling "Pop Quizzes".
    -   `000_core/000-16_core-ai-agent-loop.md`: Defines Cline's agent loop and information processing.
    -   `000_core/000-17_core-ai-knowledge-management.md`: Guidelines for knowledge management and Memory Bank usage.
    -   `000_core/000-18_core-ai-visual-information.md`: Guidelines for handling visual information.
    -   `000_core/000-19_core-ai-writing-style.md`: Guidelines for writing style and documentation.
    -   `000_core/000-20_core-ai-error-handling.md`: Guidelines for error handling.
    -   `000_core/000-21_core-ai-response-modes.md`: Defines different response modes.
    -   `000_core/000-22_core-shell-command-preference.md`: Preference for using bash and shell commands.
    -   `001_reference/001-00_reference-cline-extension-architecture.md`: Documentation on the Cline extension architecture.
    -   `001_reference/001-01_reference-community-contributing-guide.md`: Guide for community contributions to a broader ruleset.
    -   `001_reference/001-02_reference-gemini-comprehensive-software-engineering-guide.md`: Comprehensive software engineering best practices.
    -   `001_reference/001-03_reference-writing-effective-clinerules.md`: Meta-guidelines for creating effective `.clinerules`.
    -   `002_workflow/002-00_workflow-cline-for-research.md`: Guidelines for using Cline as a research assistant.
    -   `002_workflow/002-01_workflow-cline-for-slides.md`: Instructions for working with Slidev projects.
    -   `002_workflow/002-02_workflow-planning-mode.md`: Workflow and behavior for Plan Mode.
    -   `002_workflow/02-03_workflow-todo-list.md`: Workflow for using a todo list file.
    -   `002_workflow/002-04_workflow-agility_story.md`: Guidelines for using the agility story pattern.
    -   `002_workflow/002-05_workflow-analyze-comments.md`: Guidelines for using the analyze comments pattern.
    -   `002_workflow/002-06_workflow-create-5-sentence-summary.md`: Guidelines for creating 5-sentence summaries.
    -   `002_workflow/002-07_workflow-extract-jokes.md`: Guidelines for extracting jokes.
    -   `003_protocol/003-00_protocol-mcp-development.md`: Protocol for developing MCP servers.
    -   `004_tech-specific/004-00_tech-specific-next-js-supabase.md`: Guidelines for Next.js apps with Supabase Auth.
-   **`.clinerules_archive/` Directory:** Located at `/Users/lexykwaii/Code/ClineAGI/.clinerules_archive/`. Stores copies of all `.clinerules` that have been used or developed, serving as a historical reference and source for future rule development. This directory is gitignored.
-   **Information Intake Directories:**
    -   `intake/`: Located at `/Users/lexykwaii/Code/ClineAGI/intake/`. For user-provided files awaiting processing. Gitignored.
    -   `intake-archive/`: Located at `/Users/lexykwaii/Code/ClineAGI/intake-archive/`. For processed files. Gitignored.
-   **Cline's Toolset:** The tools available to Cline are the primary means of interacting with and modifying the project.
-   **User's IDE/Editor:** VSCode. Auto-formatting and linting are expected.

## 3. AGI Agent Technical Concepts (Prometheus-0)
-   **Planning:**
    -   **Hierarchical Task Networks (HTN):** Structuring complex tasks through decomposition.
    -   **PDDL Integration:** Formalizing planning problems, potentially with LLM assistance for translation.
    -   **Monte Carlo Tree Search (MCTS):** Navigating long horizons and self-improvement loops.
-   **Reasoning:**
    -   **Neuro-Symbolic (NeSy) AI:** Integrating learning and logical reasoning.
    -   **Knowledge Graphs (KGs):** Representing structured knowledge and enabling contextual reasoning.
    -   **Causal Reasoning:** Understanding cause-effect relationships and predicting consequences.
-   **Verification & Reliability:**
    -   **Formal Methods:** Rigorous proofs of correctness (Theorem Proving, Model Checking).
    -   **Automated Testing:** Pragmatic validation (SBST, Fuzzing, Metamorphic, Differential).
    -   **Runtime Monitoring:** Detecting anomalies and ensuring behavioral assurance.
    -   **Sandboxing & Safety Mechanisms:** Containing potential negative impacts.
-   **Self-Awareness & Metacognition:**
    -   **Uncertainty Quantification:** Gauging confidence in knowledge and outputs.
    -   **Introspection & Self-Evaluation:** Analyzing internal processes and identifying errors.
    -   **Recognizing Knowledge Gaps:** Identifying limitations and seeking clarification.
-   **Tool Integration:**
    -   **Function Calling:** Interacting with external tools and APIs.
    -   **Dynamic Tool Generation:** Creating new tools as needed.
    -   **Grounding:** Connecting abstract knowledge to real-world interaction.

## 4. Technical Constraints & Considerations
-   **Cline's Session-Based Memory:** Cline's knowledge is reset between sessions. The Memory Bank is therefore CRITICAL for maintaining project continuity and context. Cline MUST read and rely on the Memory Bank at the start of each task.
-   **Tool Limitations:** Cline operates within the capabilities and limitations of its provided tools. For example, `cd` is not a standalone persistent command; path context must be managed per tool use.
-   **File System Access:** Cline's file operations are based on paths relative to the current working directory (`/Users/lexykwaii/Code/ClineAGI`) or absolute paths.
-   **Command Execution:** CLI commands are executed in new terminal instances. Long-running processes are possible, and their status will be reported.
-   **Modularity of `projects/` Repositories:** User projects within the `projects/` directory are intended to be independent Git repositories. This means they will have their own `.git` directories and will not be Git submodules of `ClineAGI` by default, to allow maximum flexibility for the user to manage them, e.g., linking to their own private remotes. The main `ClineAGI` repo will need a `.gitignore` entry for `projects/*/` (or similar) to avoid tracking the content of these sub-repos, while still allowing the `projects` directory itself and its top-level `README.md` to exist.

## 5. Dependencies (Initial)
-   The core `ClineAGI` project itself has no external software dependencies at this initial stage, beyond the user's development environment (Git, shell, etc.) and Cline's operational environment.
-   Individual user projects within `projects/` may introduce their own dependencies as they are developed.

## 6. Tool Usage Patterns
-   **File Creation/Overwriting:** `write_to_file` for new files or substantial rewrites.
-   **Targeted File Edits:** `replace_in_file` for specific, localized changes.
-   **Information Gathering:** `list_files`, `read_file`, `search_files`, `list_code_definition_names`.
-   **Execution (`execute_command`):** For running scripts, build processes, or other CLI tasks, including:
    -   `git init`: Initialize a new Git repository.
    -   `git remote add origin <url>`: Connect local repository to a remote.
    -   `git remote add <name> <url>`: Add an additional remote repository (e.g., for template upstream).
    -   `git add .` or `git add <file>`: Stage changes for commit.
    -   `git commit -m "<message>"`: Commit staged changes.
    -   `git push -u origin <branch>` or `git push`: Push commits to remote.
    -   `git branch <branch-name>`: Create a new branch.
    -   `git checkout <branch-name>`: Switch to a different branch.
    -   `git checkout -b <branch-name>`: Create and switch to a new branch.
    -   `git merge <branch-name>`: Merge changes from another branch into the current branch.
    -   `git pull <remote> <branch>`: Fetch and integrate changes from a specific remote and branch.
    -   `git clone <url> <directory>`: Clone a remote repository into a new directory.
    -   `cp -R <source_directory>/. <destination_directory>/`: Copy contents of template to new project. (Note: Need a robust way to exclude the template's `.git` directory if the new project needs a fresh Git history, or to handle it if the template's history is desired as a starting point).
    -   `mv <source_path> <destination_path>`: Move files (e.g., from `intake/` to `intake-archive/`).
    -   `git status`: Check the status of the working directory and staging area.
-   **Verification/Testing:** `browser_action` for web-based components.
-   **MCP Tools:** Utilized as needed.

## 7. AGI Agent Prompting and Knowledge Organization
-   **Purpose:** To house the knowledge base and prompt library for the self-programming AGI agent concept ("Prometheus-0").
-   **Location:** Agent-specific knowledge and prompts are stored within the `.clinerules/000_core/000_agent_prompts/` directory. This location is version-controlled with the main ClineAGI repository.
-   **Key Files:**
    -   `agent_knowledge_base_summary.md`: Synthesized research findings on AGI, planning, reasoning, verification, etc.
    -   `agent_self_programming_main_loop_prompt.md`: The core prompt defining the agent's iterative self-improvement cycle.
    -   `agent_planning_working_backwards_prompt.md`: A prompt template for the "Working Backwards" planning strategy.
    -   `agent_reasoning_fake_cot_prompt.md`: A prompt template for the "Fake CoT" reasoning strategy.
-   **Integration:** These files are intended to be loaded and utilized by the agent's operational loop, potentially managed by Cline, to guide its self-programming process.

## 8. Project Templating System
-   **Purpose:** To provide standardized baselines for the main ClineAGI memory bank and new user projects created within the `ClineAGI/projects/` directory. These templates are developed and maintained within the `clineagi-dev` project.
-   **Template Sources:**
    -   **Memory Bank Template:** The master template for the main `ClineAGI/memory-bank/` is the `ClineAGI-MemoryBank-Template` repository, now maintained locally within this `clineagi-dev` project at `projects/clineagi-dev/ClineAGI-MemoryBank-Template/`.
    -   **Project Template:** The master template for new user projects is the `ClineAGI-Project-Template` repository, now maintained locally within this `clineagi-dev` project at `projects/clineagi-dev/ClineAGI-Project-Template/`.
-   **New Project Workflow (for end-users):**
    1.  When a user requests a new project, ClineAGI will copy the contents of the local `projects/clineagi-dev/ClineAGI-Project-Template/` into a new subdirectory within `ClineAGI/projects/ (e.g., `ClineAGI/projects/new-project-name/`).
    2.  This new project directory will be initialized as its own Git repository.
    3.  The new project repository will be configured with `wojons/ClineAGI-Project-Template` as a remote (e.g., named `template-upstream`) to allow users to pull future updates from the master template.
    4.  Users can then set up their own `origin` remote for their project to point to their personal GitHub repository or other Git hosting service.
-   **Initial Memory Bank Setup Workflow (for new ClineAGI users):**
    1.  When a new user first clones the main `wojons/ClineAGI` repository, they will copy the contents of the `projects/clineagi-dev/ClineAGI-MemoryBank-Template/` into their top-level `ClineAGI/memory-bank/` directory.
    2.  This populates their main Memory Bank with the standard structure and initial content.
-   **Template Updates & Conflict Management:**
    -   Users can pull changes from `template-upstream` into their projects.
    -   ClineAGI will assist in managing merge conflicts that may arise during these updates. The exact mechanism for conflict resolution (e.g., presenting conflicts to the user, attempting automated resolution for common cases) will be refined.
-   **Template Management:** Updates to the template repositories themselves will be managed collaboratively by the user and Cline within the `clineagi-dev` project, likely under a specific role or task context.

## 8. Component Relationships
-   The `ClineAGI` parent repository provides the foundational environment and potentially shared tools or APIs for the user projects.
-   User projects within `projects/` are consumers or specializations of the core AGI capabilities, or entirely separate endeavors managed within the same overarching structure. They do not directly modify the core AGI code but interact with it or operate alongside it.
-   The Memory Bank informs all development activities across both tiers.

## 9. Critical Implementation Paths (Initial)
-   **Memory Bank Initialization:** (Completed)
-   **`projects/` Directory Setup:** (Completed)
-   **Git Repository Initialization & Remote Setup:** (Completed for `wojons/ClineAGI`)
-   **`.gitignore` Configuration:** (Completed)
-   **Definition of Gitflow Process:** (Ongoing)
-   **Definition of Role-Based System:** (Ongoing, initial rules for `ClineAGI-ADMIN` started).
-   **`.clinerules` System Design:** (Ongoing, initial structure and file created).
-   **Project Templating System Implementation:** (Documented, logic definition pending).
-   **Information Intake System:** (Directories created, workflow defined).

## 10. Future Considerations
-   **Inter-Project Communication:** How will different user projects (or the core AGI and a user project) communicate if needed? (e.g., APIs, shared data formats).
-   **Dependency Management:** How will dependencies be managed for the core AGI versus individual projects?
-   **Standardization:** Will there be any enforced standards (e.g., for data formats, API contracts) for projects within the `projects/` directory to ensure interoperability with the core AGI, if desired).

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/user_preferences.md
-----------------
# User Preferences

This file tracks explicit user preferences that influence Cline's behavior and approach to tasks. Preferences can be global or project-specific.

## Global Preferences

- `proactive_assistance_enabled`: `true` or `false` (Default: `true`)
  - Controls whether Cline offers proactive assistance and suggestions.

- `default_explanation_style`: `verbose`, `formal`, or `concise` (Default: `concise`)
  - Sets the default style for explanations and communication.

- `preferred_package_manager`: `npm`, `yarn`, `pnpm`, `pip`, etc. (Optional)
  - Indicates the user's preferred package manager for projects where multiple options exist.

## Project-Specific Preferences (Example Structure)

Project-specific preferences can be stored in `projects/{{PROJECT_NAME}}/memory-bank/user_preferences.md`.

- `proactive_assistance_enabled`: `true`, `false`, or `inherit` (Default: `inherit` from global)
  - Overrides the global proactive assistance setting for this project.

- `preferred_testing_framework`: `pytest`, `jest`, `mocha`, etc. (Optional)
  - Indicates the preferred testing framework for this project.

---

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/consolidated_learnings.md
-----------------
# Consolidated Learnings for ClineAGI

This file contains curated, summarized, and actionable insights distilled from the raw reflection log for the ClineAGI project.

## Task Execution Control
When performing sequences of actions (e.g., creating multiple GitHub issues), ensure controlled, step-by-step execution. Explicit user confirmation is crucial before proceeding with subsequent steps in a sequence, especially after task interruptions, to avoid perceived autonomous looping.

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/project_template_structures.md
-----------------
# Project Template Structures

This document defines standard directory structures for different types of user projects created within the `ClineAGI/projects/` directory. These structures serve as starting points provided by the `wojons/ClineAGI-Project-Template` repository.

Each template includes placeholder files (`.gitkeep` or `README.md`) in directories that might initially be empty to ensure Git tracks the directory structure.

## 1. General Development Project

This structure is suitable for most software development projects, including web applications, APIs, libraries, or general-purpose code.

```
.
├── .clinerules/          # Project-specific ClineAGI rules
│   └── README.md
├── docs/                 # Project documentation
│   └── README.md
├── src/                  # Source code
│   └── main.ext          # Placeholder for main entry file (ext depends on language)
├── tests/                # Project tests (unit, integration, etc.)
│   └── .gitkeep
├── .gitignore            # Project-specific gitignore
├── Dockerfile            # Default Dockerfile for the project
├── README.md             # Project README
└── requirements.txt      # Placeholder for dependencies (e.g., package.json, requirements.txt)
```

**Default Container Mount Point:** `/app` (maps to the project root `/`)

## 2. Data Science / Research Project

This structure is tailored for projects involving data analysis, machine learning, or research, emphasizing separation of data, code, and results.

```
.
├── .clinerules/          # Project-specific ClineAGI rules
│   └── README.md
├── data/                 # Raw and processed data
│   ├── raw/              # Original, immutable data
│   │   └── .gitkeep
│   └── processed/        # Cleaned or transformed data
│       └── .gitkeep
├── notebooks/            # Jupyter notebooks or similar
│   └── analysis.ipynb    # Placeholder notebook
├── src/                  # Scripts or modules for data processing, modeling, etc.
│   └── process_data.py   # Placeholder script
├── results/              # Analysis outputs, visualizations, models
│   └── .gitkeep
├── docs/                 # Project documentation
│   └── README.md
├── .gitignore            # Project-specific gitignore
├── Dockerfile            # Default Dockerfile (e.g., with Python, Pandas, Jupyter)
├── README.md             # Project README
└── requirements.txt      # Placeholder for dependencies (e.g., requirements.txt)
```

**Default Container Mount Point:** `/app` (maps to the project root `/`)

## 3. Content / Knowledge Base Project

This structure is designed for projects focused on organizing notes, writing, research findings, recipes, or other content-heavy tasks.

```
.
├── .clinerules/          # Project-specific ClineAGI rules
│   └── README.md
├── content/              # Main content files (notes, articles, recipes, etc.)
│   └── README.md
├── assets/               # Images, diagrams, or other media
│   └── .gitkeep
├── research/             # Source materials, links, references
│   └── README.md
├── templates/            # Templates for new content
│   └── .gitkeep
├── docs/                 # Project documentation (e.g., how to use this KB)
│   └── README.md
├── .gitignore            # Project-specific gitignore
├── Dockerfile            # Optional Dockerfile (e.g., for static site generator, note-taking app)
├── README.md             # Project README
└── .gitkeep              # Placeholder if root is otherwise empty
```

**Default Container Mount Point:** `/app` (maps to the project root `/`) - Note: A web server container might map `/app/content` to `/var/www/html`.

## 4. Web Server Project

This structure is specifically for web applications that need a web server setup.

```
.
├── .clinerules/          # Project-specific ClineAGI rules
│   └── README.md
├── public/               # Static files (HTML, CSS, JS, images)
│   └── index.html        # Placeholder index file
├── src/                  # Server-side code (if any)
│   └── .gitkeep
├── config/               # Server configuration files
│   └── .gitkeep
├── logs/                 # Server logs (should be volume mounted externally in production)
│   └── .gitkeep
├── docs/                 # Project documentation
│   └── README.md
├── .gitignore            # Project-specific gitignore
├── Dockerfile            # Default Dockerfile (e.g., with Nginx, Apache, or Node.js server)
├── README.md             # Project README
└── requirements.txt      # Placeholder for dependencies
```

**Default Container Mount Point:** `/var/www/html` (maps to `/public` in the project root) or `/app` (maps to project root `/`) depending on the base image and server configuration. This will be specified in the `Dockerfile`.

---

These structures provide a starting point. Users can modify them as needed after project initialization. The `.clinerules/` directory within each project will allow for project-specific automation and guidance.

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/feedback.md
-----------------
# Project Feedback

This file captures user feedback specific to the ClineAGI project.

---

-----------------

File: ClineAGI/projects/clineagi-dev/memory-bank/settings.yml
-----------------
# Project-Specific Settings for clineagi-dev

# This file stores configurations specific to the clineagi-dev project.

projectName: "clineagi-dev"
projectType: "General Development" # Or a more specific type if applicable

versionControl:
  remoteRepositoryUrl: "https://github.com/wojons/clineagi-dev-project.git" # Example URL
  defaultBranch: "main" # Or 'develop' based on Gitflow

containerization:
  enabled: false # Set to true if using containers for this project
  technology: "Docker" # e.g., "Docker", "Podman"
  imageName: "clineagi-dev" # Default image name
  dockerfilePath: "Dockerfile" # Path relative to project root
  defaultPorts: [] # e.g., ["8080:80", "5432:5432"]

buildCommands: # Common build/run/test scripts
  build: "" # e.g., "npm run build"
  start: "" # e.g., "npm start"
  test: "" # e.g., "npm test"

projectSpecific: # Flexible section for other settings
  issueRepository: "wojons/clineagi-dev-project" # Linked GitHub repository for issues

-----------------