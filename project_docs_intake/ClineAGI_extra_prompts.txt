File: ClineAGI/prompts/prompt_inventory.md
-----------------
# Prompt Inventory

This inventory lists all dynamically loadable prompts, patterns, workflows, and guides.
The system uses this inventory to select and load relevant prompts based on user queries and task context.

```yaml
# Dynamic loading rules:
# 1. Match user query against 'name', 'description', and 'triggers'.
# 2. Prioritize matches based on relevance score and 'weight'.
# 3. Load the content of the matched prompt file.
# 4. Cache frequently used prompts.
# 5. Consider 'type' for context-specific loading (e.g., load 'tech_specific_guide' if a relevant technology is mentioned).

prompts:
  # Core Workflows (Migrated from .clinerules/000_core)
  - name: "Core Intake Processing Workflow"
    path: "prompts/core_workflows/000-02_workflow-intake-processing.md"
    type: "core_workflow"
    description: "Defines the automated workflow for processing files placed in the intake/ directory."
    triggers: ["intake", "file processing", "automation", "knowledge capture", "new information"]
    weight: 8

  # Reference Documents (Migrated from .clinerules/001_reference)
  - name: "Cline Extension Architecture & Development Guide"
    path: "prompts/reference_documents/001-00_reference-cline-extension-architecture.md"
    type: "reference_document"
    description: "Comprehensive overview of the Cline VSCode extension architecture, components, state management, API integration, task execution, Plan/Act modes, and MCP integration."
    triggers: ["architecture", "extension", "vscode", "development guide", "webview", "controller", "task state", "api providers", "mcp integration", "cline internals"]
    weight: 7
  - name: "Community Contributing Guide for .clinerules"
    path: "prompts/reference_documents/001-01_reference-community-contributing-guide.md"
    type: "reference_document"
    description: "Guide for community contributions to the .clinerules repository."
    triggers: ["contributing", "contribution guide", "clinerules repository", "community", "open source"]
    weight: 5
  - name: "Comprehensive Software Engineering Best Practices (Gemini Guide)"
    path: "prompts/reference_documents/001-02_reference-gemini-comprehensive-software-engineering-guide.md"
    type: "reference_document"
    description: "An extensive guide covering software engineering best practices, including architecture, debugging, development processes, code quality, collaboration, and security."
    triggers: ["software engineering", "best practices", "architecture", "debugging", "agile", "devops", "code quality", "clean code", "security", "reliability", "development principles"]
    weight: 7
  - name: "Writing Effective .clinerules"
    path: "prompts/reference_documents/001-03_reference-writing-effective-clinerules.md"
    type: "reference_document"
    description: "Guidelines and best practices for creating effective .clinerules to guide Cline's behavior, knowledge, and workflows."
    triggers: ["clinerules", "writing guidelines", "best practices", "meta rule", "documentation style", "prompt engineering"]
    weight: 6
  - name: "Agent Knowledge Base Summary"
    path: "prompts/reference_documents/001-04_reference-agent-knowledge-base-summary.md"
    type: "reference_document"
    description: "Synthesizes key research findings on AGI, LLMs, planning, reasoning, verification, self-modification, prompt engineering, agent architecture, and ethics."
    triggers: ["agi", "llm", "planning", "reasoning", "verification", "self-modification", "prompt engineering", "agent architecture", "ethics", "knowledge base", "ai research"]
    weight: 7

  # Workflows (Migrated from .clinerules/002_workflow)
  - name: "Cline for Research Assistant Workflow"
    path: "prompts/workflows/002-00_workflow-cline-for-research.md"
    type: "workflow"
    description: "Guides the user through a research process using available MCP tools, offering choices for refinement, method, and output."
    triggers: ["research", "mcp", "serper", "perplexity", "firecrawl", "web search", "information gathering", "find information"]
    weight: 7
  - name: "Todo List Workflow"
    path: "prompts/workflows/002-03_workflow-todo-list.md"
    type: "workflow"
    description: "Defines the workflow for using a todo.md file for task tracking."
    triggers: ["todo", "task tracking", "checklist", "progress management", "manage tasks"]
    weight: 6
  - name: "Agility Story Workflow"
    path: "prompts/workflows/002-04_workflow-agility-story.md"
    type: "workflow"
    description: "Defines the process for using the 'agility story' pattern to generate user stories and acceptance criteria in JSON format."
    triggers: ["agile", "user story", "acceptance criteria", "json output", "software development", "requirements"]
    weight: 6
  - name: "Analyze Comments Workflow"
    path: "prompts/workflows/002-05_workflow-analyze-comments.md"
    type: "workflow"
    description: "Defines the process for using the 'analyze comments' pattern to evaluate internet comments, characterizing sentiments, praise, and criticisms."
    triggers: ["analyze comments", "sentiment analysis", "comment evaluation", "feedback analysis", "review comments"]
    weight: 6
  - name: "Create 5 Sentence Summary Workflow"
    path: "prompts/workflows/002-06_workflow-create-5-sentence-summary.md"
    type: "workflow"
    description: "Defines the process for using the 'create 5 sentence summary' pattern to generate concise summaries at 5 different levels of depth."
    triggers: ["summary", "summarize", "concise summary", "multi-level summary", "short summary"]
    weight: 6
  - name: "Extract Jokes Workflow"
    path: "prompts/workflows/002-07_workflow-extract-jokes.md"
    type: "workflow"
    description: "Defines the process for using the 'extract jokes' pattern to extract jokes from text content."
    triggers: ["extract jokes", "find jokes", "humor analysis", "text analysis", "funny"]
    weight: 5

  # Protocols (Migrated from .clinerules/003_protocol)
  - name: "MCP Server Development Protocol"
    path: "prompts/protocols/003-00_protocol-mcp-development.md"
    type: "protocol"
    description: "Defines the protocol for MCP server development, including planning, implementation, and testing."
    triggers: ["mcp", "mcp server", "model context protocol", "tool development", "sdk", "create mcp"]
    weight: 7

  # Tech Specific Guides (Migrated from .clinerules/002_workflow)
  - name: "Slidev Project Instructions Guide"
    path: "prompts/tech_specific_guides/002-01_guide-slidev-projects.md"
    type: "tech_specific_guide"
    description: "Provides guidelines for working with Slidev projects, covering core concepts, structure, key features, syntax, development workflow, and best practices."
    triggers: ["slidev", "presentations", "slides", "markdown presentations", "vue", "vite", "create presentation"]
    weight: 6

  # Merged Patterns (Migrated from .clinerules/996_merged_patterns)
  - name: "Merged Pattern: Summarize Content"
    path: "prompts/merged_patterns/996-00_summarize-content.md"
    type: "merged_pattern"
    description: "A merged pattern for summarizing various types of content, outlining identity, goal, steps, output sections, and use cases."
    triggers: ["summarize", "summary", "content summarization", "text distillation", "key points", "takeaways", "abstract"]
    weight: 8
  - name: "Merged Pattern: Analyze Content"
    path: "prompts/merged_patterns/996-01_analyze-content.md"
    type: "merged_pattern"
    description: "A merged pattern for analyzing various types of content, outlining identity, goal, steps, output sections, and use cases."
    triggers: ["analyze", "analysis", "evaluate", "critique", "assess risk", "review content", "investigate"]
    weight: 8
  - name: "Merged Pattern: Create Content"
    path: "prompts/merged_patterns/996-02_create-content.md"
    type: "merged_pattern"
    description: "A merged pattern for generating various types of content (code, reports, documents, visualizations, etc.)."
    triggers: ["create content", "generate code", "write report", "document generation", "visualization", "make", "build"]
    weight: 8
  - name: "Merged Pattern: Extract Information"
    path: "prompts/merged_patterns/996-03_extract-information.md"
    type: "merged_pattern"
    description: "A merged pattern for extracting various types of information from content."
    triggers: ["extract information", "data extraction", "find details", "pull data", "get information"]
    weight: 7
  - name: "Merged Pattern: Visualize Data/Concepts"
    path: "prompts/merged_patterns/996-04_visualize-data-concepts.md"
    type: "merged_pattern"
    description: "A merged pattern for visualizing data and concepts using formats like diagrams, graphs, and charts."
    triggers: ["visualize", "diagram", "chart", "graph", "mermaid", "markmap", "graphviz", "ascii art", "show data"]
    weight: 7
  - name: "Merged Pattern: Improve/Refine Content"
    path: "prompts/merged_patterns/996-05_improve-refine-content.md"
    type: "merged_pattern"
    description: "A merged pattern for enhancing and refining existing content (text, code, documentation, etc.)."
    triggers: ["improve content", "refine text", "enhance code", "edit document", "optimize", "fix content"]
    weight: 7
  - name: "Merged Pattern: Utility/Helper Tasks"
    path: "prompts/merged_patterns/996-06_utility-helper-tasks.md"
    type: "merged_pattern"
    description: "A merged pattern for performing general utility and helper tasks."
    triggers: ["utility task", "helper task", "clean text", "generate tags", "compare items", "assist"]
    weight: 6

  # Output Patterns (Migrated from .clinerules/998_patterns)
  - name: "Structured Research Report Pattern"
    path: "prompts/output_patterns/998-00_pattern-structured-research-report.md"
    type: "output_pattern"
    description: "Defines a pattern for generating structured research reports, including guidelines for structure, style, citations, and special formats."
    triggers: ["research report", "academic paper", "formal report", "structured output", "write research"]
    weight: 7

  # Planning Patterns (Migrated from .clinerules/998_patterns)
  - name: "Planning Pattern: Working Backwards"
    path: "prompts/planning_patterns/998-01_pattern-planning-working-backwards.md"
    type: "planning_pattern"
    description: "Defines a planning pattern for breaking down complex tasks by working backwards from the goal."
    triggers: ["planning", "task breakdown", "working backwards", "strategy", "complex task", "plan task"]
    weight: 7

  # Reasoning Patterns (Migrated from .clinerules/998_patterns)
  - name: "Reasoning Pattern: Fake Chain-of-Thought (Fake CoT)"
    path: "prompts/reasoning_patterns/998-02_pattern-fake-cot.md"
    type: "reasoning_pattern"
    description: "Defines a pattern for simulating a Chain-of-Thought reasoning process within specific tags to promote transparency and structure decision-making."
    triggers: ["reasoning", "chain of thought", "cot", "decision making", "justification", "explain thought process"]
    weight: 7

  # Existing Prompt Style Definitions (from .clinerules/999_00_prompt_inventory.md, to be individually loadable)
  # These will point to files in prompts/prompt_styles/
  - name: "Zero-Shot Prompting Style"
    path: "prompts/prompt_styles/999-01_prompt-style-zero-shot.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Zero-Shot Prompting style."
    triggers: ["zero-shot", "direct prompting", "prompt style"]
    weight: 5
  - name: "Few-Shot Prompting Style (In-Context Learning - ICL)"
    path: "prompts/prompt_styles/999-02_prompt-style-few-shot.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Few-Shot Prompting (In-Context Learning - ICL) style."
    triggers: ["few-shot", "in-context learning", "icl", "example-based prompting", "prompt style"]
    weight: 6
  - name: "Chain-of-Thought (CoT) Prompting Style"
    path: "prompts/prompt_styles/999-03_prompt-style-cot.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Chain-of-Thought (CoT) Prompting style."
    triggers: ["chain of thought", "cot", "step-by-step reasoning", "prompt style"]
    weight: 7
  - name: "Fake CoT Prompting Style" # This is distinct from the reasoning pattern above, this is about the *style*
    path: "prompts/prompt_styles/999-04_prompt-style-fake-cot.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Fake CoT Prompting style."
    triggers: ["fake cot", "simulated reasoning", "prompt style"]
    weight: 6
  - name: "Role Prompting Style (Persona Prompting)"
    path: "prompts/prompt_styles/999-05_prompt-style-role.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Role Prompting (Persona Prompting) style."
    triggers: ["role prompting", "persona prompting", "act as", "prompt style"]
    weight: 6
  - name: "Structured Output Prompting Style"
    path: "prompts/prompt_styles/999-06_prompt-style-structured-output.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Structured Output Prompting style."
    triggers: ["structured output", "json output", "yaml output", "formatted output", "prompt style"]
    weight: 7
  - name: "Self-Consistency Prompting Style"
    path: "prompts/prompt_styles/999-07_prompt-style-self-consistency.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Self-Consistency Prompting style."
    triggers: ["self-consistency", "multiple reasoning paths", "robust prompting", "prompt style"]
    weight: 7
  - name: "Tree-of-Thought (ToT) Prompting Style"
    path: "prompts/prompt_styles/999-08_prompt-style-tot.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Tree-of-Thought (ToT) Prompting style."
    triggers: ["tree of thought", "tot", "complex problem solving", "prompt style"]
    weight: 8
  - name: "Meta-Prompting Style"
    path: "prompts/prompt_styles/999-09_prompt-style-meta-prompting.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Meta-Prompting style."
    triggers: ["meta-prompting", "prompt generation", "prompt style"]
    weight: 7
  - name: "Self-Prompting Style"
    path: "prompts/prompt_styles/999-10_prompt-style-self-prompting.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Self-Prompting style."
    triggers: ["self-prompting", "autonomous learning", "prompt style"]
    weight: 7
  - name: "Limit Crossing (LC) Prompting Style"
    path: "prompts/prompt_styles/999-11_prompt-style-limit-crossing.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Limit Crossing (LC) Prompting style."
    triggers: ["limit crossing", "lc prompting", "advanced prompting", "prompt style"]
    weight: 6
  - name: "Task Decomposition Prompting Style"
    path: "prompts/prompt_styles/999-12_prompt-style-task-decomposition.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Task Decomposition Prompting style."
    triggers: ["task decomposition", "sub-tasking", "prompt style"]
    weight: 7
  - name: "Constrained Prompting Style"
    path: "prompts/prompt_styles/999-13_prompt-style-constrained-prompting.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Constrained Prompting style."
    triggers: ["constrained prompting", "rule-based prompting", "prompt style"]
    weight: 6
  - name: "Iterative Refinement Prompting Style"
    path: "prompts/prompt_styles/999-14_prompt-style-iterative-refinement.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Iterative Refinement Prompting style."
    triggers: ["iterative refinement", "feedback loop", "prompt style"]
    weight: 7
  - name: "Contextual Prompting Style"
    path: "prompts/prompt_styles/999-15_prompt-style-contextual-prompting.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Contextual Prompting style."
    triggers: ["contextual prompting", "context awareness", "prompt style"]
    weight: 7
  - name: "Self-Correction/Reflection Prompting Style"
    path: "prompts/prompt_styles/999-16_prompt-style-self-correction.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Self-Correction/Reflection Prompting style."
    triggers: ["self-correction", "reflection", "error handling prompting", "prompt style"]
    weight: 7
  - name: "Prompt Chaining/Decomposition Prompting Style"
    path: "prompts/prompt_styles/999-17_prompt-style-prompt-chaining.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Prompt Chaining/Decomposition Prompting style."
    triggers: ["prompt chaining", "prompt decomposition", "multi-step prompting", "prompt style"]
    weight: 7
  - name: "Ontology-Driven Prompting Style"
    path: "prompts/prompt_styles/999-18_prompt-style-ontology-driven.md"
    type: "prompt_style_guide"
    description: "Guidelines for using the Ontology-Driven Prompting style."
    triggers: ["ontology-driven prompting", "knowledge graph prompting", "semantic prompting", "prompt style"]
    weight: 7

  # Use Cases (from prompts/use_cases/)
  - name: "General Brainstorming & Idea Listing Use Case"
    path: "prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/general-brainstorming-idea-listing.md"
    type: "use_case_guide"
    description: "Defines a use case for generating a diverse list of ideas, concepts, or solutions related to a user-provided topic."
    triggers: ["brainstorming", "idea generation", "idea listing", "creative thinking", "problem solving ideas"]
    weight: 7
  - name: "Mind Map Generation (Text-Based Outline) Use Case"
    path: "prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/mind-map-generation-text-based-outline.md"
    type: "use_case_guide"
    description: "Defines a use case for generating a hierarchical, text-based outline representing a mind map structure."
    triggers: ["mind map", "text outline", "hierarchical list", "idea organization", "brainstorming structure"]
    weight: 7
  - name: "Pros and Cons List Generation Use Case"
    path: "prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/pros-cons-list-generation.md"
    type: "use_case_guide"
    description: "Defines a use case for generating a balanced list of potential advantages (pros) and disadvantages (cons) for a given topic or decision."
    triggers: ["pros and cons", "advantages disadvantages", "decision making", "evaluation list", "compare options"]
    weight: 7
  - name: "SWOT Analysis Generation Use Case"
    path: "prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/swot-analysis-generation.md"
    type: "use_case_guide"
    description: "Defines a use case for generating a structured SWOT analysis (Strengths, Weaknesses, Opportunities, Threats)."
    triggers: ["swot analysis", "strategic planning", "business analysis", "strengths weaknesses opportunities threats"]
    weight: 7
  - name: "Algorithm Implementation from Pseudocode/Description Use Case"
    path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/algorithm-implementation-from-pseudocode.md"
    type: "use_case_guide"
    description: "Defines a use case for translating a given algorithm, described in pseudocode or natural language, into functional code in a specified programming language."
    triggers: ["algorithm implementation", "pseudocode to code", "code generation", "logic translation"]
    weight: 8
  - name: "API Endpoint Implementation Use Case"
    path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/api-endpoint-implementation.md"
    type: "use_case_guide"
    description: "Defines a use case for generating server-side code for a specific API endpoint (REST or GraphQL)."
    triggers: ["api endpoint", "rest api", "graphql api", "server-side code", "backend development"]
    weight: 8
  - name: "Boilerplate Code Generation Use Case"
    path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/boilerplate-code-generation.md"
    type: "use_case_guide"
    description: "Defines a use case for generating initial boilerplate code for a new project, module, component, or file."
    triggers: ["boilerplate code", "starter project", "scaffolding", "project setup", "new module"]
    weight: 8
  - name: "Code Refactoring & Optimization Suggestions Use Case"
    path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/code-refactoring-optimization-suggestions.md"
    type: "use_case_guide"
    description: "Defines a use case for analyzing source code and providing suggestions for refactoring or optimization."
    triggers: ["code refactoring", "code optimization", "improve code", "code review", "performance tuning"]
    weight: 8
  - name: "Code Snippet Generation Use Case"
    path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/code-snippet-generation.md"
    type: "use_case_guide"
    description: "Defines a use case for generating a functional code snippet to perform a specific task or demonstrate a feature."
    triggers: ["code snippet", "sample code", "generate function", "example code"]
    weight: 8
  - name: "Configuration File Generation Use Case"
    path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/configuration-file-generation.md"
    type: "use_case_guide"
    description: "Defines a use case for generating content for various types of configuration files (Dockerfiles, .gitignore, CI/CD, linters)."
    triggers: ["configuration file", "dockerfile", "gitignore", "ci cd pipeline", "linter config", "settings file"]
    weight: 8
  - name: "Database Schema Generation (SQL DDL) Use Case"
    path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/database-schema-generation-sql-ddl.md"
    type: "use_case_guide"
    description: "Defines a use case for generating SQL DDL statements for creating or modifying database schemas."
    triggers: ["database schema", "sql ddl", "create table", "database design", "data modeling"]
    weight: 8

  # Placeholder for Project Type Specific Guidance (from .clinerules/999_00_prompt_inventory.md)
  # These will point to files in prompts/project_types/
  # Example:
  # - name: "Web Server Project Guidance"
  #   path: "prompts/project_types/web-server-project.md" # Assuming this file exists or will be created
  #   type: "project_type_guide"
  #   description: "Guidance for developing web server projects."
  #   triggers: ["web server", "backend", "api development", "project type"]
  #   weight: 7

  # Placeholder for Use Cases (from .clinerules/999_01_use_case_inventory.md)
  # These will point to files in prompts/use_cases/
  # Example:
  # - name: "Comprehensive Blog Post/Article Creation Use Case"
  #   path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/comprehensive-blog-post-article-creation.md" # Assuming this file exists or will be created
  #   type: "use_case_guide"
  #   description: "Detailed prompt and guidance for creating comprehensive blog posts or articles."
  #   triggers: ["blog post", "article writing", "long-form content", "content creation"]
  #   weight: 7

-----------------

File: ClineAGI/prompts/README.md
-----------------
# Prompts Directory Overview

## 1. Purpose Statement

This directory, `prompts/`, serves as the central repository for all prompt templates, patterns, workflows, and guides used by Cline, the AI Software Engineering Assistant. These resources are crucial for guiding Cline's understanding of tasks, structuring its reasoning, and generating high-quality, contextually appropriate responses and actions. The system relies on `prompt_inventory.yaml` in this directory to dynamically load relevant prompt resources.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Markdown Files (`.md`):** All prompt resources are defined in Markdown.
*   **`prompt_inventory.yaml`:** The master YAML file that indexes all dynamically loadable prompts in this directory.
*   **Categorized Subdirectories:** Prompt resources are organized into subdirectories based on their type or domain (e.g., `agent_prompts/`, `use_cases/`, `prompt_styles/`).
*   **Prompt Definitions:** Each Markdown file should contain a specific prompt template, a detailed guide for a use case, a pattern for reasoning or output, or a workflow definition.

### Content That Does NOT Belong Here:
*   **Active Operational Rules (`.clinerules`):** These belong in the `.clinerules/` directory. While prompts guide *how* Cline thinks and responds, `.clinerules` define *what* Cline can do and the explicit steps for its core behaviors and tool usage.
*   **General Project Documentation:** High-level project briefs, product context, system patterns, tech context, and progress tracking belong in the `memory-bank/` directory.
*   **Project-Specific Code or Artifacts:** These should reside within the `projects/` subdirectories or other relevant project-specific locations.
*   **Log Files or Temporary Data:** These should be stored in `design/logs/` or other appropriate temporary/log locations.

## 3. Key Files & Subdirectory Overview

### Key Files:
*   **`prompt_inventory.yaml`**: The master index for all dynamically loadable prompts. This file is critical for the system's ability to select and use the appropriate prompt resources.
*   **`prompt_inventory.md`**: (Potentially a human-readable version or older format of the inventory, now superseded by `prompt_inventory.yaml` for dynamic loading).

### Main Subdirectories:
*   **`agent_prompts/`**: Contains core prompts related to the agent's fundamental reasoning and operational loops.
*   **`core/`**: (Purpose to be further defined based on content) - Likely contains foundational or shared prompt components.
*   **`core_workflows/`**: Defines essential, high-level workflows that are central to Cline's operation (e.g., intake processing).
*   **`merged_patterns/`**: Stores composite prompt patterns that combine multiple strategies or address broad task categories.
*   **`output_patterns/`**: Defines specific structures and guidelines for generating complex outputs.
*   **`planning_patterns/`**: Contains patterns related to task planning and decomposition.
*   **`project_types/`**: Holds detailed guidance and templates specific to different kinds of software projects.
*   **`prompt_inventory/`**: Contains supporting files for the prompt inventory system itself (e.g., `response-styles/`).
*   **`prompt_styles/`**: Provides guidelines and examples for various prompt engineering techniques.
*   **`protocols/`**: Defines formal protocols for complex, multi-step operations or interactions.
*   **`reasoning_patterns/`**: Focuses on patterns that guide the AI's reasoning process.
*   **`reference_documents/`**: Stores key reference materials that provide foundational knowledge or context for Cline, often migrated from `.clinerules`.
*   **`shared_templates/`**: Contains reusable templates for common document types.
*   **`tech_specific_guides/`**: Offers detailed guidance for working with specific technologies or frameworks, often migrated from `.clinerules`.
*   **`use_cases/`**: A comprehensive library of detailed prompts for specific content creation and management tasks, organized by sub-category.
*   **`workflows/`**: Defines specific, often multi-step, workflows for common user requests or operational procedures.

## 4. Usage & Maintenance

*   The `prompt_inventory.yaml` file is the primary mechanism for making prompts discoverable and usable by Cline. It must be kept up-to-date when new prompt files are added or existing ones are modified/moved.
*   Prompt files should be well-structured and clearly written to provide effective guidance to the AI.
*   This `README.md` should be updated if the structure or primary purpose of the `prompts/` directory changes significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/prompt_inventory.yaml
-----------------
- name: "Core Intake Processing Workflow"
  path: "prompts/core_workflows/000-02_workflow-intake-processing.md"
  type: "core_workflow"
  description: "Defines the automated workflow for processing files placed in the intake/ directory."
  triggers: ["intake", "file processing", "automation", "knowledge capture", "new information"]
  weight: 8
- name: "Cline Extension Architecture & Development Guide"
  path: "prompts/reference_documents/001-00_reference-cline-extension-architecture.md"
  type: "reference_document"
  description: "Comprehensive overview of the Cline VSCode extension architecture, components, state management, API integration, task execution, Plan/Act modes, and MCP integration."
  triggers: ["architecture", "extension", "vscode", "development guide", "webview", "controller", "task state", "api providers", "mcp integration", "cline internals"]
  weight: 7
- name: "Community Contributing Guide for .clinerules"
  path: "prompts/reference_documents/001-01_reference-community-contributing-guide.md"
  type: "reference_document"
  description: "Guide for community contributions to the .clinerules repository."
  triggers: ["contributing", "contribution guide", "clinerules repository", "community", "open source"]
  weight: 5
- name: "Comprehensive Software Engineering Best Practices (Gemini Guide)"
  path: "prompts/reference_documents/001-02_reference-gemini-comprehensive-software-engineering-guide.md"
  type: "reference_document"
  description: "An extensive guide covering software engineering best practices, including architecture, debugging, development processes, code quality, collaboration, and security."
  triggers: ["software engineering", "best practices", "architecture", "debugging", "agile", "devops", "code quality", "clean code", "security", "reliability", "development principles"]
  weight: 7
- name: "Writing Effective .clinerules"
  path: "prompts/reference_documents/001-03_reference-writing-effective-clinerules.md"
  type: "reference_document"
  description: "Guidelines and best practices for creating effective .clinerules to guide Cline's behavior, knowledge, and workflows."
  triggers: ["clinerules", "writing guidelines", "best practices", "meta rule", "documentation style", "prompt engineering"]
  weight: 6
- name: "Agent Knowledge Base Summary"
  path: "prompts/reference_documents/001-04_reference-agent-knowledge-base-summary.md"
  type: "reference_document"
  description: "Synthesizes key research findings on AGI, LLMs, planning, reasoning, verification, self-modification, prompt engineering, agent architecture, and ethics."
  triggers: ["agi", "llm", "planning", "reasoning", "verification", "self-modification", "prompt engineering", "agent architecture", "ethics", "knowledge base", "ai research"]
  weight: 7
- name: "Cline for Research Assistant Workflow"
  path: "prompts/workflows/002-00_workflow-cline-for-research.md"
  type: "workflow"
  description: "Guides the user through a research process using available MCP tools, offering choices for refinement, method, and output."
  triggers: ["research", "mcp", "serper", "perplexity", "firecrawl", "web search", "information gathering", "find information"]
  weight: 7
- name: "Todo List Workflow"
  path: "prompts/workflows/002-03_workflow-todo-list.md"
  type: "workflow"
  description: "Defines the workflow for using a todo.md file for task tracking."
  triggers: ["todo", "task tracking", "checklist", "progress management", "manage tasks"]
  weight: 6
- name: "Agility Story Workflow"
  path: "prompts/workflows/002-04_workflow-agility-story.md"
  type: "workflow"
  description: "Defines the process for using the 'agility story' pattern to generate user stories and acceptance criteria in JSON format."
  triggers: ["agile", "user story", "acceptance criteria", "json output", "software development", "requirements"]
  weight: 6
- name: "Analyze Comments Workflow"
  path: "prompts/workflows/002-05_workflow-analyze-comments.md"
  type: "workflow"
  description: "Defines the process for using the 'analyze comments' pattern to evaluate internet comments, characterizing sentiments, praise, and criticisms."
  triggers: ["analyze comments", "sentiment analysis", "comment evaluation", "feedback analysis", "review comments"]
  weight: 6
- name: "Create 5 Sentence Summary Workflow"
  path: "prompts/workflows/002-06_workflow-create-5-sentence-summary.md"
  type: "workflow"
  description: "Defines the process for using the 'create 5 sentence summary' pattern to generate concise summaries at 5 different levels of depth."
  triggers: ["summary", "summarize", "concise summary", "multi-level summary", "short summary"]
  weight: 6
- name: "Extract Jokes Workflow"
  path: "prompts/workflows/002-07_workflow-extract-jokes.md"
  type: "workflow"
  description: "Defines the process for using the 'extract jokes' pattern to extract jokes from text content."
  triggers: ["extract jokes", "find jokes", "humor analysis", "text analysis", "funny"]
  weight: 5
- name: "MCP Server Development Protocol"
  path: "prompts/protocols/003-00_protocol-mcp-development.md"
  type: "protocol"
  description: "Defines the protocol for MCP server development, including planning, implementation, and testing."
  triggers: ["mcp", "mcp server", "model context protocol", "tool development", "sdk", "create mcp"]
  weight: 7
- name: "Slidev Project Instructions Guide"
  path: "prompts/tech_specific_guides/002-01_guide-slidev-projects.md"
  type: "tech_specific_guide"
  description: "Provides guidelines for working with Slidev projects, covering core concepts, structure, key features, syntax, development workflow, and best practices."
  triggers: ["slidev", "presentations", "slides", "markdown presentations", "vue", "vite", "create presentation"]
  weight: 6
- name: "Next.js with Supabase Tech Guide"
  path: "prompts/tech_specific_guides/004-00_tech-specific-next-js-supabase.md"
  type: "tech_specific_guide"
  description: "Guide for developing applications using Next.js with Supabase as a backend."
  triggers: ["next.js", "supabase", "full-stack", "jamstack", "react framework", "postgres"]
  weight: 7
- name: "Tailwind CSS Tech Guide"
  path: "prompts/tech_specific_guides/004-01_tech-specific-tailwind-css.md"
  type: "tech_specific_guide"
  description: "Guide for using Tailwind CSS utility-first framework for styling web applications."
  triggers: ["tailwind css", "utility-first css", "css framework", "styling", "ui development"]
  weight: 7
- name: "Shadcn/UI Tech Guide"
  path: "prompts/tech_specific_guides/004-02_tech-specific-shadcn-ui.md"
  type: "tech_specific_guide"
  description: "Guide for using Shadcn/UI component library with React projects."
  triggers: ["shadcn/ui", "react components", "ui library", "tailwind components", "accessible components"]
  weight: 7
- name: "Supabase Edge Functions Tech Guide"
  path: "prompts/tech_specific_guides/004-03_tech-specific-supabase-edge-functions.md"
  type: "tech_specific_guide"
  description: "Guide for developing and deploying Deno-based serverless functions on Supabase."
  triggers: ["supabase edge functions", "deno", "serverless functions", "backend functions", "typescript"]
  weight: 7
- name: "Stripe Integration Tech Guide"
  path: "prompts/tech_specific_guides/004-04_tech-specific-stripe-integration.md"
  type: "tech_specific_guide"
  description: "Guide for integrating Stripe payments into web applications."
  triggers: ["stripe", "payment integration", "online payments", "e-commerce payments", "subscriptions"]
  weight: 7
- name: "Core AI Pop Quiz Handling"
  path: "prompts/agent_prompts/000-13_core-ai-pop-quiz-handling.md"
  type: "agent_prompt"
  description: "Defines how the AI agent should handle unexpected 'pop quiz' style questions from the user."
  triggers: ["pop quiz", "test question", "agent behavior", "unexpected query"]
  weight: 6
- name: "Core Prometheus-0 Prompting"
  path: "prompts/agent_prompts/000-03_core-prometheus-0-prompting.md"
  type: "agent_prompt"
  description: "Core prompting guidelines based on Prometheus-0 principles for effective LLM interaction."
  triggers: ["prometheus-0", "prompting principles", "llm interaction", "core agent behavior"]
  weight: 9
- name: "Core Agent Planning: Working Backwards"
  path: "prompts/agent_prompts/000-23_core-agent-planning-working-backwards-prompt.md"
  type: "agent_prompt"
  description: "Agent prompt for applying the 'working backwards' planning strategy."
  triggers: ["agent planning", "working backwards", "task decomposition", "strategic planning"]
  weight: 7
- name: "Core Agent Reasoning: Fake CoT"
  path: "prompts/agent_prompts/000-24_core-agent-reasoning-fake-cot-prompt.md"
  type: "agent_prompt"
  description: "Agent prompt for utilizing Fake Chain-of-Thought for reasoning."
  triggers: ["agent reasoning", "fake cot", "chain of thought", "decision justification"]
  weight: 7
- name: "Core Agent Self-Programming Main Loop"
  path: "prompts/agent_prompts/000-25_core-agent-self-programming-main-loop-prompt.md"
  type: "agent_prompt"
  description: "Agent prompt defining its main self-programming operational loop."
  triggers: ["agent loop", "self-programming", "core agent logic", "operational cycle"]
  weight: 9
- name: "Merged Pattern: Summarize Content"
  path: "prompts/merged_patterns/996-00_summarize-content.md"
  type: "merged_pattern"
  description: "A merged pattern for summarizing various types of content, outlining identity, goal, steps, output sections, and use cases."
  triggers: ["summarize", "summary", "content summarization", "text distillation", "key points", "takeaways", "abstract"]
  weight: 8
- name: "Merged Pattern: Analyze Content"
  path: "prompts/merged_patterns/996-01_analyze-content.md"
  type: "merged_pattern"
  description: "A merged pattern for analyzing various types of content, outlining identity, goal, steps, output sections, and use cases."
  triggers: ["analyze", "analysis", "evaluate", "critique", "assess risk", "review content", "investigate"]
  weight: 8
- name: "Merged Pattern: Create Content"
  path: "prompts/merged_patterns/996-02_create-content.md"
  type: "merged_pattern"
  description: "A merged pattern for generating various types of content (code, reports, documents, visualizations, etc.)."
  triggers: ["create content", "generate code", "write report", "document generation", "visualization", "make", "build"]
  weight: 8
- name: "Merged Pattern: Extract Information"
  path: "prompts/merged_patterns/996-03_extract-information.md"
  type: "merged_pattern"
  description: "A merged pattern for extracting various types of information from content."
  triggers: ["extract information", "data extraction", "find details", "pull data", "get information"]
  weight: 7
- name: "Merged Pattern: Visualize Data/Concepts"
  path: "prompts/merged_patterns/996-04_visualize-data-concepts.md"
  type: "merged_pattern"
  description: "A merged pattern for visualizing data and concepts using formats like diagrams, graphs, and charts."
  triggers: ["visualize", "diagram", "chart", "graph", "mermaid", "markmap", "graphviz", "ascii art", "show data"]
  weight: 7
- name: "Merged Pattern: Improve/Refine Content"
  path: "prompts/merged_patterns/996-05_improve-refine-content.md"
  type: "merged_pattern"
  description: "A merged pattern for enhancing and refining existing content (text, code, documentation, etc.)."
  triggers: ["improve content", "refine text", "enhance code", "edit document", "optimize", "fix content"]
  weight: 7
- name: "Merged Pattern: Utility/Helper Tasks"
  path: "prompts/merged_patterns/996-06_utility-helper-tasks.md"
  type: "merged_pattern"
  description: "A merged pattern for performing general utility and helper tasks."
  triggers: ["utility task", "helper task", "clean text", "generate tags", "compare items", "assist"]
  weight: 6
- name: "Structured Research Report Pattern"
  path: "prompts/output_patterns/998-00_pattern-structured-research-report.md"
  type: "output_pattern"
  description: "Defines a pattern for generating structured research reports, including guidelines for structure, style, citations, and special formats."
  triggers: ["research report", "academic paper", "formal report", "structured output", "write research"]
  weight: 7
- name: "Planning Pattern: Working Backwards"
  path: "prompts/planning_patterns/998-01_pattern-planning-working-backwards.md"
  type: "planning_pattern"
  description: "Defines a planning pattern for breaking down complex tasks by working backwards from the goal."
  triggers: ["planning", "task breakdown", "working backwards", "strategy", "complex task", "plan task"]
  weight: 7
- name: "Reasoning Pattern: Fake Chain-of-Thought (Fake CoT)"
  path: "prompts/reasoning_patterns/998-02_pattern-fake-cot.md"
  type: "reasoning_pattern"
  description: "Defines a pattern for simulating a Chain-of-Thought reasoning process within specific tags to promote transparency and structure decision-making."
  triggers: ["reasoning", "chain of thought", "cot", "decision making", "justification", "explain thought process"]
  weight: 7
- name: "Prompt Styles Guide"
  path: "prompts/prompt_styles/999-00_prompt-styles-guide.md"
  type: "prompt_style_guide"
  description: "Overview and guide to various prompt engineering styles."
  triggers: ["prompt styles", "prompt engineering", "prompting techniques"]
  weight: 8
- name: "Zero-Shot Prompting Style"
  path: "prompts/prompt_styles/999-01_prompt-style-zero-shot.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Zero-Shot Prompting style."
  triggers: ["zero-shot", "direct prompting", "prompt style"]
  weight: 5
- name: "Few-Shot Prompting Style (In-Context Learning - ICL)"
  path: "prompts/prompt_styles/999-02_prompt-style-few-shot.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Few-Shot Prompting (In-Context Learning - ICL) style."
  triggers: ["few-shot", "in-context learning", "icl", "example-based prompting", "prompt style"]
  weight: 6
- name: "Chain-of-Thought (CoT) Prompting Style"
  path: "prompts/prompt_styles/999-03_prompt-style-cot.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Chain-of-Thought (CoT) Prompting style."
  triggers: ["chain of thought", "cot", "step-by-step reasoning", "prompt style"]
  weight: 7
- name: "Fake CoT Prompting Style"
  path: "prompts/prompt_styles/999-04_prompt-style-fake-cot.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Fake CoT Prompting style."
  triggers: ["fake cot", "simulated reasoning", "prompt style"]
  weight: 6
- name: "Role Prompting Style (Persona Prompting)"
  path: "prompts/prompt_styles/999-05_prompt-style-role.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Role Prompting (Persona Prompting) style."
  triggers: ["role prompting", "persona prompting", "act as", "prompt style"]
  weight: 6
- name: "Structured Output Prompting Style"
  path: "prompts/prompt_styles/999-06_prompt-style-structured-output.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Structured Output Prompting style."
  triggers: ["structured output", "json output", "yaml output", "formatted output", "prompt style"]
  weight: 7
- name: "Self-Consistency Prompting Style"
  path: "prompts/prompt_styles/999-07_prompt-style-self-consistency.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Self-Consistency Prompting style."
  triggers: ["self-consistency", "multiple reasoning paths", "robust prompting", "prompt style"]
  weight: 7
- name: "Tree-of-Thought (ToT) Prompting Style"
  path: "prompts/prompt_styles/999-08_prompt-style-tot.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Tree-of-Thought (ToT) Prompting style."
  triggers: ["tree of thought", "tot", "complex problem solving", "prompt style"]
  weight: 8
- name: "Meta-Prompting Style"
  path: "prompts/prompt_styles/999-09_prompt-style-meta-prompting.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Meta-Prompting style."
  triggers: ["meta-prompting", "prompt generation", "prompt style"]
  weight: 7
- name: "Self-Prompting Style"
  path: "prompts/prompt_styles/999-10_prompt-style-self-prompting.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Self-Prompting style."
  triggers: ["self-prompting", "autonomous learning", "prompt style"]
  weight: 7
- name: "Limit Crossing (LC) Prompting Style"
  path: "prompts/prompt_styles/999-11_prompt-style-limit-crossing.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Limit Crossing (LC) Prompting style."
  triggers: ["limit crossing", "lc prompting", "advanced prompting", "prompt style"]
  weight: 6
- name: "Task Decomposition Prompting Style"
  path: "prompts/prompt_styles/999-12_prompt-style-task-decomposition.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Task Decomposition Prompting style."
  triggers: ["task decomposition", "sub-tasking", "prompt style"]
  weight: 7
- name: "Constrained Prompting Style"
  path: "prompts/prompt_styles/999-13_prompt-style-constrained-prompting.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Constrained Prompting style."
  triggers: ["constrained prompting", "rule-based prompting", "prompt style"]
  weight: 6
- name: "Iterative Refinement Prompting Style"
  path: "prompts/prompt_styles/999-14_prompt-style-iterative-refinement.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Iterative Refinement Prompting style."
  triggers: ["iterative refinement", "feedback loop", "prompt style"]
  weight: 7
- name: "Contextual Prompting Style"
  path: "prompts/prompt_styles/999-15_prompt-style-contextual-prompting.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Contextual Prompting style."
  triggers: ["contextual prompting", "context awareness", "prompt style"]
  weight: 7
- name: "Self-Correction/Reflection Prompting Style"
  path: "prompts/prompt_styles/999-16_prompt-style-self-correction.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Self-Correction/Reflection Prompting style."
  triggers: ["self-correction", "reflection", "error handling prompting", "prompt style"]
  weight: 7
- name: "Prompt Chaining/Decomposition Prompting Style"
  path: "prompts/prompt_styles/999-17_prompt-style-prompt-chaining.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Prompt Chaining/Decomposition Prompting style."
  triggers: ["prompt chaining", "prompt decomposition", "multi-step prompting", "prompt style"]
  weight: 7
- name: "Ontology-Driven Prompting Style"
  path: "prompts/prompt_styles/999-18_prompt-style-ontology-driven.md"
  type: "prompt_style_guide"
  description: "Guidelines for using the Ontology-Driven Prompting style."
  triggers: ["ontology-driven prompting", "knowledge graph prompting", "semantic prompting", "prompt style"]
  weight: 7
- name: "Ad Copywriting Use Case"
  path: "prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/ad-copywriting.md"
  type: "use_case_guide"
  description: "Defines a use case for generating persuasive and concise advertising copy for various platforms."
  triggers: ["ad copy", "copywriting", "google ads text", "facebook ad copy", "marketing copy"]
  weight: 8
- name: "API Documentation Generation"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/api-documentation-generation.md"
  type: "use_case_guide"
  description: "Generates comprehensive documentation for APIs, including endpoints, requests, responses, auth, and examples."
  triggers: ["api documentation", "document rest api", "swagger generation help", "openapi spec writing", "api reference guide"]
  weight: 100
- name: "Automated Proofreading & Grammar Correction Use Case"
  path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/automated-proofreading-grammar-correction.md"
  type: "use_case_guide"
  description: "Defines a use case for automatically reviewing text to identify and correct errors in grammar, spelling, punctuation, and syntax."
  triggers: ["proofread", "grammar check", "spell check", "correct text", "edit text"]
  weight: 7
- name: "Automated Report Generation (Text-Based) Use Case"
  path: "prompts/use_cases/content-creation-and-management/data-analysis-reporting/automated-report-generation-text-based.md"
  type: "use_case_guide"
  description: "Defines a use case for generating structured, text-based reports summarizing data, analysis results, or system status."
  triggers: ["generate report", "automated reporting", "data summary", "status report", "text report"]
  weight: 7
- name: "Brand Voice & Messaging Guideline Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/brand-voice-messaging-guideline-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for developing guidelines that define a brand's unique voice, tone, and core messaging."
  triggers: ["brand voice", "messaging guidelines", "tone of voice", "brand communication", "style guide"]
  weight: 8
- name: "Business Proposal Outline & Content Ideas Use Case"
  path: "prompts/use_cases/content-creation-and-management/legal-business-document-drafting/business-proposal-outline-content-ideas.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a structured outline and brainstorming content ideas for a business proposal."
  triggers: ["business proposal", "proposal outline", "sales proposal", "project proposal", "client proposal"]
  weight: 8
- name: "Calendar & Scheduling Assistance (Text-Based) Use Case"
  path: "prompts/use_cases/content-creation-and-management/personal-productivity-organization/calendar-scheduling-assistance-text-based.md"
  type: "use_case_guide"
  description: "Defines a use case for interpreting natural language requests to create, modify, or query calendar events and presenting this information textually."
  triggers: ["schedule meeting", "calendar help", "check my schedule", "add event to calendar", "time management"]
  weight: 7
- name: "Case Study Composition Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/case-study-composition.md"
  type: "use_case_guide"
  description: "Defines a use case for creating a compelling case study that showcases a customer's success story."
  triggers: ["case study", "customer success story", "write case study", "marketing content", "testimonial"]
  weight: 8
- name: "Chapter Summaries/Outlines (Fiction) Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/chapter-summaries-outlines.md"
  type: "use_case_guide"
  description: "Defines a use case for generating concise summaries or detailed outlines for individual chapters of a novel or long-form fictional work."
  triggers: ["chapter summary", "chapter outline", "fiction writing", "plot development", "story structure"]
  weight: 7
- name: "Character Arc Planning (Fiction) Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/character-arc-planning.md"
  type: "use_case_guide"
  description: "Defines a use case for outlining the transformation or development of a key character over the course of a story."
  triggers: ["character arc", "character development", "story planning", "fiction writing", "narrative structure"]
  weight: 7
- name: "Character Profile Generation (Fiction) Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/character-profile-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a detailed profile for a fictional character, outlining appearance, personality, backstory, motivations, etc."
  triggers: ["character profile", "character creation", "fiction character", "story character", "character details"]
  weight: 7
- name: "Chatbot/Virtual Assistant Persona Development Use Case"
  path: "prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/persona-development-chatbots-virtual-assistants.md"
  type: "use_case_guide"
  description: "Defines a use case for developing a distinct persona for a chatbot or virtual assistant, including personality, communication style, and example dialogue."
  triggers: ["chatbot persona", "virtual assistant personality", "ai character design", "conversation design"]
  weight: 7
- name: "Code Comment & Explanation Generation"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/code-comment-explanation.md"
  type: "use_case_guide"
  description: "Generates comments for code blocks or explains code functionality in natural language."
  triggers: ["comment code", "explain code", "generate docstrings", "document function", "code explanation"]
  weight: 100
- name: "Competitor Content Analysis Use Case"
  path: "prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/competitor-content-analysis.md"
  type: "use_case_guide"
  description: "Defines a use case for analyzing competitor content to identify strategies, strengths, weaknesses, and opportunities."
  triggers: ["competitor analysis", "content strategy", "market research", "analyze competitor content", "content gaps"]
  weight: 7
- name: "Comprehensive Blog Post/Article Creation Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/comprehensive-blog-post-article-creation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a high-quality, well-researched, and engaging blog post or article on a given topic."
  triggers: ["blog post", "article writing", "content creation", "write article", "long-form content"]
  weight: 8
- name: "Content Calendar Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/content-calendar-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for creating a structured content calendar that outlines topics, formats, platforms, and publication dates."
  triggers: ["content calendar", "editorial calendar", "marketing schedule", "social media calendar", "content planning"]
  weight: 7
- name: "Content Summarization Use Case"
  path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/content-summarization.md"
  type: "use_case_guide"
  description: "Defines a use case for condensing longer text into a shorter version that captures main points and key information."
  triggers: ["summarize content", "text summarization", "abstract generation", "executive summary", "key takeaways"]
  weight: 8
- name: "Contract Clause Generation (Informational Only) Use Case"
  path: "prompts/use_cases/content-creation-and-management/legal-business-document-drafting/contract-clause-generation-informational.md"
  type: "use_case_guide"
  description: "Defines a use case for generating sample contract clauses for common legal or business situations for informational purposes ONLY (NOT legal advice)."
  triggers: ["contract clause", "sample legal clause", "nda clause", "service agreement clause", "informational legal text"]
  weight: 7
- name: "Curriculum Design & Syllabus Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/educational-content-courseware-development/curriculum-design-syllabus-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for designing a comprehensive curriculum and generating a syllabus outlining course structure, objectives, topics, and assessments."
  triggers: ["curriculum design", "syllabus generation", "course outline", "lesson planning", "educational content"]
  weight: 8
- name: "Data Cleaning & Preprocessing Script Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/data-analysis-reporting/data-cleaning-preprocessing-script-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating scripts (e.g., Python with Pandas) for cleaning and preprocessing raw datasets."
  triggers: ["data cleaning", "data preprocessing", "pandas script", "clean dataset", "prepare data for analysis"]
  weight: 8
- name: "Data Visualization Script Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/data-analysis-reporting/data-visualization-script-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating scripts (e.g., Python with Matplotlib, Seaborn, Plotly) for creating various types of charts and graphs."
  triggers: ["data visualization", "create chart", "plot data", "graph generation", "matplotlib script", "seaborn script", "plotly script"]
  weight: 8
- name: "Descriptive Scene Setting (Fiction)"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/descriptive-scene-setting.md"
  type: "use_case_guide"
  description: "Generates vivid and immersive descriptions of a story's setting, including environment, atmosphere, and sensory details."
  triggers: ["describe scene", "set the scene", "fiction setting description", "worldbuilding details", "immersive description"]
  weight: 100
- name: "Dialogue Generation & Refinement (Fiction)"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/dialogue-generation-refinement.md"
  type: "use_case_guide"
  description: "Generates or refines dialogue for fictional characters that is natural, reveals character, and advances plot."
  triggers: ["write dialogue", "character conversation", "fiction dialogue", "refine dialogue scene", "script dialogue"]
  weight: 100
- name: "E-book Writing Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/e-book-writing.md"
  type: "use_case_guide"
  description: "Defines a use case for generating the content for an e-book on a given subject, including chapter outlining and content generation."
  triggers: ["e-book writing", "write e-book", "digital book creation", "long-form guide", "publish e-book"]
  weight: 8
- name: "Educational Handout & Worksheet Creation Use Case"
  path: "prompts/use_cases/content-creation-and-management/educational-content-courseware-development/educational-handout-worksheet-creation.md"
  type: "use_case_guide"
  description: "Defines a use case for creating focused, printable or digital handouts and worksheets to reinforce learning."
  triggers: ["educational handout", "worksheet creation", "lesson materials", "student activities", "teaching aid"]
  weight: 7
- name: "Email Drafting & Management Assistance Use Case"
  path: "prompts/use_cases/content-creation-and-management/personal-productivity-organization/email-drafting-management-assistance.md"
  type: "use_case_guide"
  description: "Defines a use case for assisting in drafting professional emails and managing email-related tasks like summarizing threads or suggesting replies."
  triggers: ["draft email", "write email", "email assistance", "summarize email", "reply to email"]
  weight: 7
- name: "Email Newsletter Content Creation Use Case"
  path: "prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/email-newsletter-content-creation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating engaging and valuable content for email newsletters."
  triggers: ["email newsletter", "newsletter content", "email marketing copy", "subscriber email"]
  weight: 7
- name: "Explainer Video Scriptwriting Use Case"
  path: "prompts/use_cases/content-creation-and-management/educational-content-courseware-development/explainer-video-scriptwriting.md"
  type: "use_case_guide"
  description: "Defines a use case for writing a concise, engaging, and easy-to-understand script for a short explainer video."
  triggers: ["explainer video script", "video scriptwriting", "product demo script", "concept explanation video"]
  weight: 7
- name: "Fact-Checking Assistance Use Case"
  path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/fact-checking-assistance.md"
  type: "use_case_guide"
  description: "Defines a use case for assisting in verifying the factual accuracy of claims within text content."
  triggers: ["fact check", "verify claims", "check accuracy", "validate information", "source verification"]
  weight: 7
- name: "FAQ & Answer Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/faq-and-answer-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a comprehensive list of frequently asked questions (FAQs) and their corresponding answers."
  triggers: ["faq generation", "frequently asked questions", "customer support answers", "knowledge base questions"]
  weight: 7
- name: "Financial Statement Summary & Analysis (Informational) Use Case"
  path: "prompts/use_cases/content-creation-and-management/data-analysis-reporting/financial-statement-summary-analysis-informational.md"
  type: "use_case_guide"
  description: "Defines a use case for summarizing key figures from financial statements and providing basic, high-level analysis for informational purposes ONLY (NOT financial advice)."
  triggers: ["financial statement summary", "analyze income statement", "balance sheet summary", "cash flow analysis", "financial ratios"]
  weight: 7
- name: "Flash Fiction Creation"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/flash-fiction-creation.md"
  type: "use_case_guide"
  description: "Generates extremely brief, complete, and impactful fictional narratives, typically under 1,000 words."
  triggers: ["flash fiction", "short short story", "micro-fiction", "drabble", "write a very short story"]
  weight: 100
- name: "Grant Proposal Writing Assistance Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/grant-proposal-writing-assistance.md"
  type: "use_case_guide"
  description: "Defines a use case for assisting users in drafting compelling and well-structured grant proposals."
  triggers: ["grant proposal", "funding application", "write grant", "proposal writing", "nonprofit funding"]
  weight: 8
- name: "Generating Image Captions & Alt Text Use Case"
  path: "prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/generating-image-captions-alt-text.md"
  type: "use_case_guide"
  description: "Defines a use case for generating concise, descriptive, and contextually relevant captions and alt text for images."
  triggers: ["image caption", "alt text", "image description", "accessibility text", "social media caption"]
  weight: 7
- name: "Interactive Fiction/CYOA Scripting"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/interactive-game-narrative/interactive-fiction-choose-your-own-adventure-scripting.md"
  type: "use_case_guide"
  description: "Generates branching narrative scripts for interactive fiction or choose-your-own-adventure stories."
  triggers: ["interactive fiction script", "choose your own adventure story", "cyoa writing", "branching narrative", "Twine story script"]
  weight: 100
- name: "Interactive Learning Module Scripting Use Case"
  path: "prompts/use_cases/content-creation-and-management/educational-content-courseware-development/interactive-learning-module-scripting.md"
  type: "use_case_guide"
  description: "Defines a use case for designing and scripting content for an interactive e-learning module, including objectives, instructional text, interactive elements, and feedback."
  triggers: ["interactive learning module", "e-learning script", "courseware development", "instructional design", "interactive lesson"]
  weight: 8
- name: "Knowledge Base Article Creation"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/knowledge-base-article-creation.md"
  type: "use_case_guide"
  description: "Creates clear, concise articles for knowledge bases, addressing specific user questions or problems."
  triggers: ["knowledge base article", "write help document", "create faq entry", "how-to guide for product", "troubleshooting article"]
  weight: 100
- name: "Landing Page Content Structure & Copywriting Use Case"
  path: "prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/landing-page-content-structure-copywriting.md"
  type: "use_case_guide"
  description: "Defines a use case for designing the content structure and writing persuasive copy for a landing page."
  triggers: ["landing page content", "copywriting", "conversion optimization", "sales page", "squeeze page"]
  weight: 8
- name: "Lesson Plan Creation Use Case"
  path: "prompts/use_cases/content-creation-and-management/educational-content-courseware-development/lesson-plan-creation.md"
  type: "use_case_guide"
  description: "Defines a use case for developing a structured and detailed plan for a single educational lesson."
  triggers: ["lesson plan", "create lesson", "teaching plan", "educational planning", "course activities"]
  weight: 7
- name: "Marketing Campaign Concept Brainstorming Use Case"
  path: "prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/marketing-campaign-concept-brainstorming.md"
  type: "use_case_guide"
  description: "Defines a use case for generating creative and strategic concepts for a marketing campaign."
  triggers: ["marketing campaign ideas", "campaign brainstorming", "advertising concepts", "marketing strategy session"]
  weight: 8
- name: "Meeting Minutes & Summaries Use Case"
  path: "prompts/use_cases/content-creation-and-management/legal-business-document-drafting/meeting-minutes-summaries.md"
  type: "use_case_guide"
  description: "Defines a use case for accurately recording key discussions, decisions, and action items of a meeting, or creating a concise summary."
  triggers: ["meeting minutes", "meeting summary", "record meeting", "action items", "meeting notes"]
  weight: 7
- name: "Note-Taking & Information Organization Use Case"
  path: "prompts/use_cases/content-creation-and-management/personal-productivity-organization/note-taking-information-organization.md"
  type: "use_case_guide"
  description: "Defines a use case for assisting in capturing, structuring, and organizing notes and information from various sources."
  triggers: ["note taking", "organize notes", "information organization", "meeting notes", "lecture notes"]
  weight: 7
- name: "Novel/Book Outline Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/novel-book-outline-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a structured outline for a novel or non-fiction book, including chapter breakdowns, plot points, and character arcs."
  triggers: ["novel outline", "book outline", "story structure", "plot generation", "writing plan"]
  weight: 8
- name: "Paraphrasing & Rewriting Content Use Case"
  path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/paraphrasing-rewriting-content.md"
  type: "use_case_guide"
  description: "Defines a use case for rephrasing existing text content in different words while retaining the original meaning."
  triggers: ["paraphrase", "rewrite text", "rephrase content", "avoid plagiarism", "simplify text"]
  weight: 7
- name: "Playwriting Act/Scene Structure Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/playwriting-act-scene-structure.md"
  type: "use_case_guide"
  description: "Defines a use case for outlining the act and scene structure for a stage play, detailing plot, character, and thematic progression."
  triggers: ["playwriting", "play structure", "act scene outline", "theatrical script", "stage play outline"]
  weight: 7
- name: "Plot Development & Subplot Brainstorming (Fiction) Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/plot-development-subplot-brainstorming.md"
  type: "use_case_guide"
  description: "Defines a use case for developing the main plot and potential subplots for a fictional narrative, generating ideas for conflicts, turning points, and resolutions."
  triggers: ["plot development", "subplot ideas", "story brainstorming", "narrative design", "fiction plot"]
  weight: 8
- name: "Plot Twist Generation & Foreshadowing Ideas (Fiction) Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/plot-twist-generation-foreshadowing-ideas.md"
  type: "use_case_guide"
  description: "Defines a use case for brainstorming plot twists and subtle foreshadowing techniques to enhance a fictional narrative."
  triggers: ["plot twist", "foreshadowing", "story ideas", "narrative surprise", "fiction writing help"]
  weight: 7
- name: "Poetry Generation"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/poetry-lyrical-content/poetry-generation.md"
  type: "use_case_guide"
  description: "Generates original poetry based on themes, styles, forms, or moods, aiming for artistic expression and emotional resonance."
  triggers: ["write a poem", "poetry generation", "create a sonnet", "haiku about", "free verse poem on"]
  weight: 100
- name: "Policy & Procedure Document Drafting Use Case"
  path: "prompts/use_cases/content-creation-and-management/legal-business-document-drafting/policy-procedure-document-drafting.md"
  type: "use_case_guide"
  description: "Defines a use case for drafting clear, comprehensive, and actionable policy and procedure documents."
  triggers: ["policy drafting", "procedure writing", "sop creation", "organizational guidelines", "company policy"]
  weight: 7
- name: "Presentation Script & Slide Content Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/educational-content-courseware-development/presentation-script-slide-content-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for developing the narrative script (speaker notes) and corresponding slide content for an engaging presentation."
  triggers: ["presentation script", "slide content", "speaker notes", "create presentation", "powerpoint content", "google slides content"]
  weight: 7
- name: "Press Release Drafting Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/press-release-drafting.md"
  type: "use_case_guide"
  description: "Defines a use case for drafting a concise, newsworthy, and professionally formatted press release."
  triggers: ["press release", "draft press release", "news announcement", "media release", "company news"]
  weight: 7
- name: "Product Description Writing Use Case"
  path: "prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/product-description-writing.md"
  type: "use_case_guide"
  description: "Defines a use case for creating compelling, informative, and persuasive product descriptions."
  triggers: ["product description", "e-commerce copy", "write product details", "catalog copy"]
  weight: 8
- name: "Quiz, Test, & Exam Question Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/educational-content-courseware-development/quiz-test-exam-question-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a variety of question types to assess learner understanding and knowledge."
  triggers: ["quiz generation", "test questions", "exam questions", "assessment creation", "multiple choice questions", "essay questions"]
  weight: 7
- name: "Quora/Reddit Answer Drafting Use Case"
  path: "prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/quora-reddit-answer-drafting.md"
  type: "use_case_guide"
  description: "Defines a use case for drafting helpful, informative, and contextually appropriate answers to questions on platforms like Quora or Reddit."
  triggers: ["quora answer", "reddit answer", "answer question online", "forum response", "community help"]
  weight: 7
- name: "Readability Improvement & Simplification Use Case"
  path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/readability-improvement-simplification.md"
  type: "use_case_guide"
  description: "Defines a use case for revising existing text to make it easier to read, understand, and digest."
  triggers: ["improve readability", "simplify text", "make clearer", "plain language", "explain simply"]
  weight: 7
- name: "Recipe Generation & Modification Use Case"
  path: "prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/recipe-generation-modification.md"
  type: "use_case_guide"
  description: "Defines a use case for generating new recipes or modifying existing ones based on specified criteria."
  triggers: ["recipe generation", "modify recipe", "cooking instructions", "create recipe", "dietary recipe adaptation"]
  weight: 7
- name: "Release Notes & Changelog Generation"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/release-notes-changelog.md"
  type: "use_case_guide"
  description: "Generates release notes or changelogs for software, detailing new features, fixes, and changes for a specific version."
  triggers: ["release notes", "changelog generation", "software update notes", "what's new in version", "product update summary"]
  weight: 100
- name: "Research Paper Assistance Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/research-paper-assistance.md"
  type: "use_case_guide"
  description: "Defines a use case for assisting in writing a research paper by summarizing literature, outlining methodologies, interpreting results, and drafting sections."
  triggers: ["research paper", "academic writing", "literature review", "methodology outline", "draft research paper"]
  weight: 8
- name: "Resume/CV & Cover Letter Drafting Use Case"
  path: "prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/resume-cv-cover-letter-drafting.md"
  type: "use_case_guide"
  description: "Defines a use case for assisting users in drafting or refining resumes/CVs and cover letters."
  triggers: ["resume drafting", "cv writing", "cover letter help", "job application documents", "career documents"]
  weight: 8
- name: "RPG Scenario/Encounter Design"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/interactive-game-narrative/rpg-scenario-encounter-design.md"
  type: "use_case_guide"
  description: "Designs self-contained scenarios or encounters for RPGs, including setting, NPCs, challenges, and outcomes."
  triggers: ["rpg encounter design", "d&d scenario", "pathfinder encounter", "create rpg quest", "tabletop game encounter"]
  weight: 100
- name: "Sales Email Sequence Creation Use Case"
  path: "prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/sales-email-sequence-creation.md"
  type: "use_case_guide"
  description: "Defines a use case for designing and drafting a series of coordinated emails aimed at nurturing leads and guiding prospects through the sales funnel."
  triggers: ["sales email sequence", "email cadence", "drip campaign", "lead nurturing emails", "marketing automation emails"]
  weight: 8
- name: "Screenplay Scene Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/screenplay-scene-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a formatted screenplay scene, including scene headings, action lines, character names, and dialogue."
  triggers: ["screenplay scene", "write a scene", "scriptwriting", "movie scene", "tv scene"]
  weight: 7
- name: "Scripting for Automation Use Case"
  path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/scripting-for-automation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating scripts (Bash, Python, etc.) to automate repetitive system tasks or workflows."
  triggers: ["scripting", "automation script", "bash script", "python script", "automate task"]
  weight: 8
- name: "Software Development Kit (SDK) Documentation"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/sdk-documentation.md"
  type: "use_case_guide"
  description: "Creates comprehensive documentation for SDKs, including setup, concepts, guides, API reference, and examples."
  triggers: ["sdk documentation", "document software kit", "sdk guide", "api client library docs", "developer kit documentation"]
  weight: 100
- name: "SEO Content Analysis & Optimization Use Case"
  path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/seo-content-analysis-optimization.md"
  type: "use_case_guide"
  description: "Defines a use case for analyzing existing text content for SEO effectiveness and suggesting revisions to improve visibility."
  triggers: ["seo analysis", "content optimization", "keyword optimization", "improve search ranking", "on-page seo"]
  weight: 7
- name: "Short Story Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/short-story-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating an original short story based on user-provided parameters like genre, theme, or characters."
  triggers: ["short story", "write story", "fiction generation", "narrative creation", "creative writing"]
  weight: 8
- name: "SMS/Push Notification Copywriting Use Case"
  path: "prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/sms-push-notification-copywriting.md"
  type: "use_case_guide"
  description: "Defines a use case for crafting concise, clear, and actionable copy for SMS messages and push notifications."
  triggers: ["sms copywriting", "push notification copy", "mobile messaging", "short form copy", "notification text"]
  weight: 7
- name: "Social Media Post Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/social-media-post-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating engaging and platform-appropriate social media posts."
  triggers: ["social media post", "tweet generation", "facebook post", "instagram caption", "linkedin update"]
  weight: 7
- name: "Song Lyric Writing"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/poetry-lyrical-content/song-lyric-writing.md"
  type: "use_case_guide"
  description: "Generates original song lyrics based on themes, genre, mood, or structure, focusing on emotional resonance and singability."
  triggers: ["write song lyrics", "lyrics for a song", "songwriting help", "create lyrics for pop song", "folk song lyrics about"]
  weight: 100
- name: "Standard Operating Procedure (SOP) Writing"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/sop-writing.md"
  type: "use_case_guide"
  description: "Creates clear, step-by-step instructions for performing routine tasks consistently and correctly."
  triggers: ["write sop", "standard operating procedure", "create procedure document", "task instructions", "process documentation"]
  weight: 100
- name: "Speech & Monologue Writing Use Case"
  path: "prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/speech-monologue-writing.md"
  type: "use_case_guide"
  description: "Defines a use case for drafting a compelling and well-structured speech or monologue for a specific occasion, audience, and purpose."
  triggers: ["speech writing", "monologue writing", "public speaking script", "presentation script", "keynote speech text"]
  weight: 7
- name: "Speechwriting Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/speechwriting.md"
  type: "use_case_guide"
  description: "Defines a use case for drafting a clear, engaging, and impactful speech tailored to a specific occasion, audience, speaker, and purpose."
  triggers: ["speechwriting", "write speech", "public speaking script", "presentation speech", "keynote address"]
  weight: 7
- name: "Style & Tone Adjustment Use Case"
  path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/style-tone-adjustment.md"
  type: "use_case_guide"
  description: "Defines a use case for revising existing text to match a specified style (e.g., formal, informal) or tone (e.g., humorous, serious)."
  triggers: ["change style", "adjust tone", "rewrite formal", "rewrite informal", "make persuasive"]
  weight: 7
- name: "Target Audience Persona Development Use Case"
  path: "prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/target-audience-persona-development.md"
  type: "use_case_guide"
  description: "Defines a use case for creating detailed, semi-fictional representations (personas) of ideal customers or audience segments."
  triggers: ["target audience persona", "customer persona", "user persona", "marketing persona", "audience segmentation"]
  weight: 8
- name: "Technical Manual/User Guide Authoring Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/technical-manual-user-guide-authoring.md"
  type: "use_case_guide"
  description: "Defines a use case for generating clear, accurate, and comprehensive technical manuals or user guides."
  triggers: ["technical manual", "user guide", "documentation writing", "product manual", "software guide"]
  weight: 8
- name: "To-Do List & Task Management Assistance Use Case"
  path: "prompts/use_cases/content-creation-and-management/personal-productivity-organization/todo-list-task-management-assistance.md"
  type: "use_case_guide"
  description: "Defines a use case for helping users create, organize, prioritize, and manage their to-do lists and tasks."
  triggers: ["to-do list", "task management", "organize tasks", "prioritize tasks", "manage my day"]
  weight: 7
- name: "Translation & Localization of Content Use Case"
  path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/translation-localization-content.md"
  type: "use_case_guide"
  description: "Defines a use case for translating text content and adapting (localizing) it for cultural and linguistic nuances of a target audience."
  triggers: ["translate", "localize", "translation", "localization", "adapt content", "multilingual"]
  weight: 7
- name: "Translation & Localization of Text Use Case"
  path: "prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/translation-localization-text.md"
  type: "use_case_guide"
  description: "Defines a use case for translating text and adapting it to cultural, linguistic, and contextual nuances of a target audience/region."
  triggers: ["translate text", "localize content", "language translation", "cultural adaptation", "multilingual content"]
  weight: 7
- name: "Tutorial & How-To Guide Creation"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/tutorial-how-to-guide.md"
  type: "use_case_guide"
  description: "Creates step-by-step instructional content to guide users through a specific task, process, or feature usage."
  triggers: ["create tutorial", "how-to guide", "step-by-step instructions", "write a guide for", "product tutorial"]
  weight: 100
- name: "TV Show Episode Outlining/Beat Sheet Creation Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/tv-show-episode-outlining-beat-sheet-creation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a structured outline or beat sheet for a television show episode."
  triggers: ["tv episode outline", "beat sheet", "script outline", "tv writing", "episode structure"]
  weight: 7
- name: "Unit Test Generation Use Case"
  path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/unit-test-generation.md"
  type: "use_case_guide"
  description: "Defines a use case for generating unit tests for a given piece of code to verify its correctness."
  triggers: ["unit test", "generate tests", "test code", "software testing", "jest", "pytest", "junit"]
  weight: 8
- name: "User Manual & Guide Creation"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/user-manual-guide-creation.md"
  type: "use_case_guide"
  description: "Creates comprehensive user manuals or guides for products/software, covering installation, operation, and troubleshooting."
  triggers: ["user manual", "product guide", "instruction manual", "how to use product", "software user guide"]
  weight: 100
- name: "Video Game Quest/Mission Scripting Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/video-game-quest-mission-scripting.md"
  type: "use_case_guide"
  description: "Defines a use case for designing and writing the narrative script for a video game quest or mission."
  triggers: ["video game quest", "mission script", "game design", "quest writing", "interactive narrative"]
  weight: 7
- name: "Vignette/Scene Writing Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/vignette-scene-writing.md"
  type: "use_case_guide"
  description: "Defines a use case for generating a short, focused piece of writing that captures a specific moment, character sketch, or mood."
  triggers: ["vignette", "scene writing", "descriptive writing", "short fiction piece", "moment in time"]
  weight: 7
- name: "White Paper Development Use Case"
  path: "prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/white-paper-development.md"
  type: "use_case_guide"
  description: "Defines a use case for generating an authoritative, well-researched, and persuasive white paper on a complex issue or solution."
  triggers: ["white paper", "develop white paper", "authoritative report", "in-depth analysis", "thought leadership content"]
  weight: 8
- name: "White Paper & Case Study Development"
  path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/whitepaper-case-study-development.md"
  type: "use_case_guide"
  description: "Develops authoritative white papers on complex issues or compelling case studies showcasing real-world success."
  triggers: ["write white paper", "develop case study", "thought leadership content", "customer success story", "in-depth report on"]
  weight: 100
- name: "World-Building (Fiction) Use Case"
  path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/world-building.md"
  type: "use_case_guide"
  description: "Defines a use case for generating detailed elements of a fictional world, including history, geography, cultures, and laws of physics/magic."
  triggers: ["world building", "create fictional world", "setting design", "fantasy world", "sci-fi world"]
  weight: 8

-----------------

File: ClineAGI/prompts/output_patterns/998-00_pattern-structured-research-report.md
-----------------
---
description: Defines a pattern for generating structured research reports.
author: Cline (AI Assistant)
version: 1.0
tags: ["pattern", "research", "report", "output-format"]
globs: []
---

# Structured Research Report Pattern

## Brief overview
This pattern defines a structure and style for generating comprehensive, well-formatted research reports based on a given query or topic.

## Structure

- Always begin with a clear title using a single `#` header.
- Include a brief introductory paragraph summarizing key findings.
- Organize content into major sections using `##` headers.
- Further divide into subsections using `###` headers.
- Use `####` headers sparingly for special subsections.
- Never skip header levels.
- Write multiple paragraphs per section or subsection, ensuring a narrative flow.
- Each paragraph should present novel insights and analysis, connect ideas to the original query, and build upon previous paragraphs.
- Avoid using lists; convert list-based information into flowing paragraphs or tables.
- Conclude with a synthesis of findings and potential recommendations or next steps using a `##` header.

## Style Guide

- Write in formal academic prose.
- Reserve bold formatting only for critical terms or findings.
- Present comparative data in tables rather than lists.
- Use topic sentences to guide readers through logical progression.

## Citations

- Cite sources inline using bracketed numbers (e.g., `[1][2]`) immediately after the sentence where the information is used.
- Each index should be in its own bracket.
- Cite up to three relevant sources per sentence.
- Do not include a separate References section or list of citations at the end of the report.

## Special Formats

- **Code Snippets:** Include using Markdown fenced code blocks with language identifiers.
- **Mathematical Expressions:** Wrap all math expressions in LaTeX using `\( \)` for inline and `\[ \]` for block formulas. Cite formulas similarly to text.
- **Quotations:** Use Markdown blockquotes.
- **Emphasis:** Use bolding (`**text**`) for critical terms and italics (`*text*`) for highlighting.
- **Tables:** Use Markdown table syntax for comparative data.

-----------------

File: ClineAGI/prompts/output_patterns/README.md
-----------------
# Output Patterns Directory Overview

## 1. Purpose Statement

This directory, `prompts/output_patterns/`, stores prompt files that define specific structures, formats, and guidelines for generating complex or standardized outputs. These patterns help ensure that Cline produces well-organized, consistent, and high-quality results for tasks requiring specific output formats, such as research reports, technical documentation, or structured data.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Output Pattern Definitions (Markdown `.md`):** Files detailing the desired structure, sections, styling, and content requirements for specific types of outputs.
    *   These patterns guide Cline in formatting its responses or generated files.
*   **Naming Convention:** Files may follow a `99X-NN_pattern-descriptive-name.md` pattern (e.g., `998-NN` for general patterns, though this can be flexible).

### Content That Does NOT Belong Here:
*   **General Content Generation Use Cases:** These belong in `prompts/use_cases/`. Output patterns focus on the *structure* of the output, while use cases focus on the *content generation task* itself.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.
*   **Merged Patterns for Broad Tasks:** These belong in `prompts/merged_patterns/`.

## 3. Key Files Overview

As of the last update, this directory contains the following key file:

*   **`998-00_pattern-structured-research-report.md`**: Defines a pattern for generating structured research reports, including guidelines for sections like Abstract, Introduction, Methodology, Results, Discussion, Conclusion, and References, as well as style and citation notes.

*(This list should be kept current as output patterns are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   Cline can reference these patterns when a task requires generating output in a specific, predefined format.
*   These patterns help maintain consistency and quality in generated documents and responses.
*   The `prompt_inventory.yaml` file should include entries for these output patterns to make them discoverable.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/tech_specific_guides/004-02_tech-specific-shadcn-ui.md
-----------------
---
description: Guidelines for using Shadcn UI components.
globs: "**/*.ts, **/*.tsx, **/*.js, **/*.jsx"
---

# Shadcn UI Guidelines

These guidelines define how to effectively use Shadcn UI components in projects.

## Core Concepts

- **Copy and Paste:** Shadcn UI is not a traditional component library. You copy and paste the source code of components directly into your project and modify them as needed.
- **Tailwind CSS:** Shadcn UI components are built with Tailwind CSS. Ensure Tailwind is set up in your project.
- **Customization:** Modify the copied component code and styles directly to fit project requirements.

## Best Practices

- **Install via CLI:** Use the Shadcn UI CLI to add components to your project. This ensures you get the latest code and dependencies.
- **Understand the Code:** Before using or modifying a component, take time to understand its implementation.
- **Customize Thoughtfully:** When customizing, maintain the component's accessibility and responsiveness.
- **Keep Updated:** Periodically check for updates to Shadcn UI components and integrate them into your project as needed.
- **Combine with Tailwind:** Leverage Tailwind CSS utilities to further style and compose Shadcn UI components.

## Examples

```bash
npx shadcn-ui@latest add button
```

```typescript
import { Button } from "@/components/ui/button"

function MyComponent() {
  return (
    <Button variant="outline">Click Me</Button>
  )
}
```

## AI MODEL VERIFICATION STEPS

Before generating code using Shadcn UI components, you SHOULD verify:

1. Has the Shadcn UI component been added to the project using the CLI?
2. Are you importing the component correctly from the components directory?
3. Are you using Tailwind CSS for styling in conjunction with the component?

## CONSEQUENCES OF INCORRECT IMPLEMENTATION

If you generate code without following these guidelines:

1. Components may not be available in the project.
2. Styling may be incorrect.
3. Customizations may break the component's functionality or accessibility.

-----------------

File: ClineAGI/prompts/tech_specific_guides/002-01_guide-slidev-projects.md
-----------------
# Slidev Project Instructions

This document provides guidelines for working with Slidev projects. Slidev is a Markdown-based presentation tool powered by Vue and Vite.

## Core Concepts & Structure

1. **Entry Point**: The main presentation content is typically in `http://slides.md`.
2. **Slide Separation**: Slides are separated by `---` on a new line.
3. **Frontmatter/Headmatter**:
* YAML blocks at the beginning of the file (`--- ... ---`) configure the deck (headmatter) or individual slides (frontmatter).
* Headmatter (first block) applies globally (e.g., `theme`, `title`, `addons`).
* Frontmatter configures specific slides (e.g., `layout`, `background`, `class`, `transition`, `clicks`).
* **YAML Quoting:** Prefer double quotes (`"..."`) for strings containing single quotes (`'`) to avoid parsing errors (e.g., `title: "My Deck's Title"`).
4. **Layouts**:
* Define the structure of slides. Specified via `layout:` in frontmatter.
* Default layout for the first slide is `cover`, others are `default`.
* Custom layouts are placed in the `layouts/` directory as `.vue` files. Use `<slot />` for default content and named slots (`<slot name="xxx" />`) for specific sections.
5. **Components**:
* Vue components can be used directly in Markdown (e.g., `<MyComponent />`).
* Components are auto-imported from:
* Slidev built-ins (`@slidev/client/builtin/`).
* The active theme.
* Installed addons.
* The local `components/` directory.
* Custom components go in the `components/` directory as `.vue` files.
6. **Styles**:
* [UnoCSS](https://unocss.dev) is built-in for utility-first styling. Apply classes directly in Markdown or components.
* Global styles can be added in the `styles/` directory (e.g., `styles/index.css`).
* Scoped styles for a specific slide can be added using `<style scoped>...</style>` within the slide's Markdown.
7. **Assets**:
* Static assets (images, videos) can be placed in the `public/` directory and referenced with absolute paths starting with `/` (e.g., `background: /my-image.png`).
* Relative paths (e.g., `./image.png`) work for standard Markdown image syntax (`![alt](./image.png)`) but might break in frontmatter or components after building. Prefer the `public/` directory method for reliability.
8. **Notes**:
* Presenter notes are added as HTML comments (`<!-- ... -->`) at the *very end* of a slide's Markdown content.
* Notes support Markdown formatting.

## Key Features & Syntax

1. **Code Blocks**:
* Use standard Markdown fenced code blocks (e.g., ` ```ts ... ``` `).
* Syntax highlighting is provided by Shiki.
* Supports line highlighting (`{1,3-5}`), line numbers (`{lines:true}`), Monaco editor (`{monaco}`), diffs (`{monaco-diff}`), code imports (`<<< @/path/to/file.js#region {lines=...}`). Refer to the Syntax Guide for details.
2. **Animations (Clicks)**:
* Use `<v-click>` component or `v-click` directive to reveal elements step-by-step.
* `v-after` reveals elements simultaneously with the previous `v-click`.
* `.hide` modifier (e.g., `v-click.hide`) hides elements instead of showing them.
* `<v-clicks>` component applies `v-click` to its children (useful for lists).
* Control timing with `at="..."` (e.g., `v-click="3"` for absolute click 3, `v-click="'+2'"` for 2 clicks after the previous relative element).
* Specify enter/leave ranges: `v-click="[2, 5]"` (visible from click 2 up to, but not including, 5).
* Override total clicks per slide with `clicks: N` in frontmatter.
3. **Motion (VueUse Motion)**:
* Use the `v-motion` directive for element transitions (e.g., `:initial="{ x: -80 }" :enter="{ x: 0 }"`).
* Can be triggered by clicks using `:click-N` attributes (e.g., `:click-1="{ y: 30 }"`).
4. **Slide Transitions**:
* Set in headmatter (`transition: slide-left`) for global effect or frontmatter for specific slides.
* Built-in transitions: `fade`, `fade-out`, `slide-left`, `slide-right`, `slide-up`, `slide-down`, `view-transition`.
* Specify different forward/backward transitions: `transition: slide-left | slide-right`.
5. **Diagrams**: Supports Mermaid (` ```mermaid ... ``` `) and PlantUML (` ```plantuml ... ``` `).
6. **LaTeX**: Use `$` for inline math (`$a^2+b^2=c^2$`) and `$$` for block math.
7. **Global Context**: Access runtime info like `$nav` (navigation controls), `$clicks` (current click count), `$page` (current slide number), `$frontmatter`, `$slidev.configs` within components or directly in Markdown using `{{ }}`. Use composables like `useNav()` from `@slidev/client` in `<script setup>`.

## Development Workflow

1. **Initialization (Full Project)**: Use `pnpm create slidev <project-name>` (or npm/yarn/bun equivalent).
2. **Development Server (Full Project)**: Run `pnpm dev` (or `npm run dev`, etc.) in the project directory. Access at `http://localhost:3030`.
3. **Development Server (Single File)**: Navigate to the directory containing your `slides.md` and run `npx @slidev/cli`. This is useful for quick previews without a full project setup.
    * **Note:** Ensure you use the correct package name: `@slidev/cli`.
    * **Theme Installation:** If a theme specified in the frontmatter (e.g., `theme: seriph`) isn't installed, Slidev will prompt you to install it. Confirm by pressing 'y' and choosing your package manager (e.g., 'npm').
4. **Editing**: Modify `slides.md` and add custom components/layouts/styles as needed.
4. **Exporting**:
* Install `playwright-chromium` (`pnpm add -D playwright-chromium`).
* Run `pnpm export` (or `npm run export`, etc.) to generate a PDF (`slides-export.pdf` by default).
* Use `--format png` or `--format pptx`.
* Use `--with-clicks` to export each click step as a separate page/image.
* Use `--output <filename>` to specify the output file.
* Use `--dark` for dark mode export.
5. **Building for Hosting**:
* Run `pnpm build` (or `npm run build`, etc.) to create a static SPA in the `dist/` folder.
* Use `--base /path/` if deploying to a subpath.
* Deploy the `dist` folder to static hosting (Netlify, Vercel, GitHub Pages). Configuration files (`netlify.toml`, `vercel.json`, GitHub Actions workflow) are often included in the starter template.

## Best Practices

* Keep `http://slides.md` focused on content.
* Use layouts for consistent slide structure.
* Use components for reusable UI elements and interactivity.
* Leverage themes and addons for styling and features before building custom solutions.
* Use the `public/` directory for static assets referenced in frontmatter or components.
* Utilize presenter mode (`/presenter` route or button) for notes and controls during presentation.
* Pay attention to terminal output for errors (e.g., YAML parsing issues) when starting the server.

-----------------

File: ClineAGI/prompts/tech_specific_guides/README.md
-----------------
# Tech-Specific Guides Directory Overview

## 1. Purpose Statement

This directory, `prompts/tech_specific_guides/`, houses detailed guides and prompt resources for working with specific technologies, frameworks, libraries, or platforms. These guides help Cline understand the nuances, best practices, common commands, and typical project structures associated with particular technologies. Many of these were previously `.clinerules` categorized under `004_tech-specific` and have been migrated here to serve as informational resources and prompt enhancers.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Technology Guides (Markdown `.md`):** Each file should focus on a specific technology (e.g., Slidev, Next.js, Supabase, Tailwind CSS, Shadcn/UI, Stripe).
    *   Content typically includes:
        *   Overview of the technology.
        *   Setup and installation notes.
        *   Common commands and CLI usage.
        *   Key concepts and architectural patterns.
        *   Best practices for development and integration.
        *   Troubleshooting tips for common issues.
        *   Example prompts or prompt snippets tailored to that technology.
*   **Naming Convention:** Files may follow a `NNN-MM_tech-specific-descriptive-name.md` pattern (e.g., `002-NN` or `004-NN`).

### Content That Does NOT Belong Here:
*   **General Project Type Guides:** These belong in `prompts/project_types/`. While a tech guide might be relevant to a project type, project type guides are broader.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.
*   **Active Operational Rules (`.clinerules`):** These belong in the `.clinerules/` directory. Tech-specific guides are primarily for informational support and prompt enrichment.

## 3. Key Files Overview

As of the last update, this directory contains the following key files:

*   **`002-01_guide-slidev-projects.md`**: A guide for working with Slidev presentation projects.
*   **`004-00_tech-specific-next-js-supabase.md`**: Guide for integrating Next.js with Supabase.
*   **`004-01_tech-specific-tailwind-css.md`**: Guide for using Tailwind CSS.
*   **`004-02_tech-specific-shadcn-ui.md`**: Guide for working with Shadcn/UI components.
*   **`004-03_tech-specific-supabase-edge-functions.md`**: Guide for developing Supabase Edge Functions.
*   **`004-04_tech-specific-stripe-integration.md`**: Guide for integrating Stripe payments.

*(This list should be kept current as tech-specific guides are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   Cline can consult these guides when a task involves a specific technology covered.
*   These guides help ensure Cline uses technologies correctly and follows best practices.
*   The `prompt_inventory.yaml` file should include entries for these guides to make them discoverable and loadable when relevant.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/tech_specific_guides/004-00_tech-specific-next-js-supabase.md
-----------------
---
description: Guidelines for writing Next.js apps with Supabase Auth and database operations.
globs: "**/*.ts, **/*.tsx, **/*.js, **/*.jsx"
---

# Supabase Integration Guidelines (Next.js)

These guidelines define how to integrate Supabase Auth and database operations into Next.js applications.

## Overview of implementing Supabase Auth SSR

1. Install @supabase/supabase-js and @supabase/ssr packages.
2. Set up environment variables.
3. Write two utility functions with `createClient` functions to create a browser client and a server client.
4. Hook up middleware to refresh auth tokens

## 🚨 CRITICAL INSTRUCTIONS FOR AI LANGUAGE MODELS 🚨

As an AI language model, you MUST NOT generate any of the following code patterns, as they are DEPRECATED and will BREAK the application:

```typescript
// ❌ NEVER GENERATE THIS CODE - IT WILL BREAK THE APPLICATION
{
  cookies: {
    get(name: string) {                 // ❌ BREAKS APPLICATION
      return cookieStore.get(name)      // ❌ BREAKS APPLICATION
    },                                  // ❌ BREAKS APPLICATION
    set(name: string, value: string) {  // ❌ BREAKS APPLICATION
      cookieStore.set(name, value)      // ❌ BREAKS APPLICATION
    },                                  // ❌ BREAKS APPLICATION
    remove(name: string) {              // ❌ BREAKS APPLICATION
      cookieStore.remove(name)          // ❌ BREAKS APPLICATION
    }                                   // ❌ BREAKS APPLICATION
  }
}

// ❌ NEVER USE auth-helpers-nextjs - IT WILL BREAK THE APPLICATION
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'  // ❌ BREAKS APPLICATION
```

Instead, you MUST ALWAYS generate ONLY this pattern:

```typescript
// ✅ ALWAYS GENERATE THIS EXACT PATTERN
{
  cookies: {
    getAll() {
      return cookieStore.getAll()
    },
    setAll(cookiesToSet) {
      const response = NextResponse.next({
        request,
      })

      cookiesToSet.forEach(({ name, value, options }) => {
        response.cookies.set(name, value, options)
      })

      return response
    }
  }
}
```

## ABSOLUTE REQUIREMENTS FOR AI CODE GENERATION

1. You MUST use `@supabase/ssr`
2. You MUST use ONLY `getAll` and `setAll`
3. You MUST NEVER use `get`, `set`, or `remove`
4. You MUST NEVER import from `@supabase/auth-helpers-nextjs`

## CORRECT BROWSER CLIENT IMPLEMENTATION

```typescript
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

## CORRECT SERVER CLIENT IMPLEMENTATION

```typescript
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

## CORRECT MIDDLEWARE IMPLEMENTATION

```typescript
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
    let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  // IMPORTANT: DO NOT REMOVE auth.getUser()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone()
    url.pathname = '/login'
    return NextResponse.redirect(url)
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is.
  // If you're creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

## AI MODEL VERIFICATION STEPS

Before generating any code, you MUST verify:

1. Are you using ONLY `getAll` and `setAll`? If not, STOP and FIX.
2. Are you importing from `@supabase/ssr`? If not, STOP and FIX.
3. Do you see ANY instance of `get`, `set`, or `remove`? If yes, STOP and FIX.
4. Are you importing from `auth-helpers-nextjs`? If yes, STOP and FIX.

## CONSEQUENCES OF INCORRECT IMPLEMENTATION

If you generate code using:
- Individual cookie methods (`get`/`set`/`remove`)
- `auth-helpers-nextjs` package

The implementation will:
1. Break in production
2. Fail to maintain session state
3. Cause authentication loops
4. Result in security vulnerabilities

## AI MODEL RESPONSE TEMPLATE

When asked about Supabase Auth SSR implementation, you MUST:
1. ONLY use code from this guide
2. NEVER suggest deprecated approaches
3. ALWAYS use the exact cookie handling shown above
4. VERIFY your response against the patterns shown here

Remember: There are NO EXCEPTIONS to these rules.

## Database Operations and Data Integrity

- **DATA INTEGRITY IS THE HIGHEST PRIORITY.** Users must NEVER lose their data due to an operation.
- **FORBIDDEN:** Any destructive database operations like `DROP` (tables, columns, databases) or `DELETE` (without a specific `WHERE` clause) that could result in unintended data loss.
- **FORBIDDEN:** Explicit transaction control statements (`BEGIN`, `COMMIT`, `ROLLBACK`, `END`) unless part of a safe, well-defined migration or script where the impact is fully understood and controlled. (Note: This does NOT apply to `DO $$ BEGIN ... END $$` blocks in PL/pgSQL).
- When performing database modifications (e.g., schema changes), prioritize non-destructive methods.
- When writing database migration scripts, ensure they are safe, idempotent, and preserve existing data. Provide complete script content rather than diffs where possible.
- Always enable Row Level Security (RLS) for new database tables and define appropriate policies based on access requirements.
- Use default values for columns where appropriate to ensure data consistency and reduce null handling.
- Each migration file MUST follow these rules:
    - ALWAYS Start with a markdown summary block (in a multi-line comment) that:
        - Include a short, descriptive title (using a headline) that summarizes the changes (e.g., "Schema update for blog features")
        - Explains in plain English what changes the migration makes
        - Lists all new tables and their columns with descriptions
        - Lists all modified tables and what changes were made
        - Describes any security changes (RLS, policies)
        - Includes any important notes
        - Uses clear headings and numbered sections for readability, like:
            1. New Tables
            2. Security
            3. Changes
    - Include all necessary operations (e.g., table creation and updates, RLS, policies).
- Client Setup:
    - Use `@supabase/supabase-js`.
    - Create a singleton client instance.
    - Use the environment variables from the project's `.env` file.
    - Use TypeScript generated types from the schema.
- Authentication:
    - ALWAYS use email and password sign up.
    - FORBIDDEN: NEVER use magic links, social providers, or SSO for authentication unless explicitly stated!
    - FORBIDDEN: NEVER create your own authentication system or authentication table, ALWAYS use Supabase's built-in authentication!
    - Email confirmation is ALWAYS disabled unless explicitly stated!
- Row Level Security:
    - ALWAYS enable RLS for every new table.
    - Create policies based on user authentication.
    - Test RLS policies by:
        1. Verifying authenticated users can only access their allowed data.
        2. Confirming unauthenticated users cannot access protected data.
        3. Testing edge cases in policy conditions.
- Best Practices:
    - One migration per logical change.
    - Use descriptive policy names.
    - Add indexes for frequently queried columns.
    - Keep RLS policies simple and focused.
    - Use foreign key constraints.
- TypeScript Integration:
    - Generate types from database schema.
    - Use strong typing for all database operations.
    - Maintain type safety throughout the application.
- IMPORTANT: NEVER skip RLS setup for any table. Security is non-negotiable!

-----------------

File: ClineAGI/prompts/tech_specific_guides/004-01_tech-specific-tailwind-css.md
-----------------
---
description: Guidelines for using Tailwind CSS.
globs: "**/*.html, **/*.css, **/*.js, **/*.jsx, **/*.ts, **/*.tsx, **/*.vue"
---

# Tailwind CSS Guidelines

These guidelines define how to effectively use Tailwind CSS in projects.

## Core Concepts

- **Utility-First:** Build designs directly in your markup using pre-defined utility classes.
- **Responsive Design:** Use responsive prefixes (e.g., `sm:`, `md:`, `lg:`) to build responsive layouts.
- **Customization:** Extend or override default Tailwind configuration in `tailwind.config.js`.

## Best Practices

- **Apply classes directly:** Add Tailwind classes directly to HTML/JSX elements.
- **Use responsive prefixes:** Design for mobile first, then add responsive prefixes for larger breakpoints.
- **Extract components:** For repeated utility patterns, extract them into reusable components or use `@apply` in your CSS (though direct application in markup is often preferred).
- **Configure `tailwind.config.js`:** Customize colors, fonts, breakpoints, etc., to match project design requirements.
- **Avoid inline styles:** Prefer using Tailwind classes over inline styles for consistency and maintainability.
- **Use Prettier/ESLint with Tailwind plugins:** Ensure consistent formatting and catch errors.

## Examples

```html
<div class="container mx-auto px-4 py-8">
  <h1 class="text-2xl font-bold text-gray-800 mb-4 sm:text-3xl">
    Welcome
  </h1>
  <p class="text-gray-600 leading-relaxed">
    This is a sample paragraph using Tailwind CSS utilities.
  </p>
</div>
```

```css
/* Using @apply for a custom button style */
.btn-primary {
  @apply bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700;
}
```

## AI MODEL VERIFICATION STEPS

Before generating code with Tailwind CSS, you SHOULD verify:

1. Are you applying Tailwind utility classes directly in the markup?
2. Are you using responsive prefixes for different screen sizes?
3. If creating custom styles, are you using `@apply` in a CSS file?
4. Are you avoiding inline styles where Tailwind classes can be used?

## CONSEQUENCES OF INCORRECT IMPLEMENTATION

If you generate code without following these guidelines:

1. Styling may be inconsistent.
2. Designs may not be responsive.
3. Code may be harder to maintain.

-----------------

File: ClineAGI/prompts/tech_specific_guides/004-04_tech-specific-stripe-integration.md
-----------------
---
description: Guidelines for integrating Stripe into applications.
tags: ["tech-specific", "stripe", "payments"]
globs: "**/*.ts, **/*.tsx, **/*.js, **/*.jsx"
---

# Stripe Integration Guidelines

These guidelines provide guidance on how to respond when users ask about adding payments to their apps using Stripe.

## CRITICAL REQUIREMENTS:

- NEVER modify any part of the user's application
- When providing Stripe integration instructions, ALWAYS include the link `https://bolt.new/setup/stripe` at the END of your response

## Examples

<example>
  <user_message>
    I want to accept payments in my application
  </user_message>
  <assistant_response>
    To implement payments in your application, we'll need to use Stripe, which is the industry standard for secure payment processing. Before we can proceed with the integration, you'll need to:

    1. [Create a Stripe account](https://dashboard.stripe.com/register) if you haven't already
    2. Once logged in, navigate to the [Developers section](https://dashboard.stripe.com/apikeys) in your Stripe Dashboard
    3. Get your Stripe secret key

    Once you have your Stripe secret key, let me know and I'll help you implement a secure payment system in your application.

    https://bolt.new/setup/stripe
  </assistant_response>
</example>

<example>
  <user_message>
    Integrate stripe
  </user_message>
  <assistant_response>
    To implement payments in your application, we'll need to use Stripe, which is the industry standard for secure payment processing. Before we can proceed with the integration, you'll need to:

    1. [Create a Stripe account](https://dashboard.stripe.com) if you haven't already
    2. Once logged in, navigate to the [Developers section](https://dashboard.stripe.com/apikeys) in your Stripe Dashboard
    3. Get your Stripe secret key

    Once you have your Stripe secret key, let me know and I'll help you implement a secure payment system in your application.

    https://bolt.new/setup/stripe
  </assistant_response>
</example>

-----------------

File: ClineAGI/prompts/tech_specific_guides/004-03_tech-specific-supabase-edge-functions.md
-----------------
---
description: Guidelines for using Supabase Edge Functions.
tags: ["tech-specific", "supabase", "edge-functions"]
globs: "**/*.ts, **/*.js"
---

# Supabase Edge Functions Guidelines

These guidelines define how to handle serverless functions using Supabase Edge Functions.

## CRITICAL INSTRUCTIONS

- ONLY use Supabase edge functions.
- DO NOT use any other serverless solutions.
- Edge functions are AUTOMATICALLY deployed to Supabase - NEVER attempt manual deployment.
- NEVER suggest or try to use the Supabase CLI (it's unsupported in WebContainer).
- DO NOT have cross dependencies or share code between edge Functions.
- ALWAYS proxy external API calls through edge functions.
- ALWAYS wrap the entire function in a try/catch block.
- DO NOT use bare specifiers when importing dependencies.
  - If you need to use an external dependency, make sure it's prefixed with either `npm:` or `jsr:`.

    Example:

    `@supabase/supabase-js` should be written as `npm:@supabase/supabase-js`.

## Use cases

Here are some examples of when to use edge functions:

- For handling incoming webhook requests from external services (e.g., Stripe).
- When you need to interact with third-party APIs while keeping API keys secure.

## Calling edge functions

Edge functions can be called from the frontend using this pattern:

```typescript
const apiUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/todos`;

const headers = {
  'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
  'Content-Type': 'application/json',
};

const response = await fetch(apiUrl, { headers });
const todos = await response.json();
```

## Environment Variables

The following environment variables are pre-populated in both local and hosted Supabase environments. These don't need to manually set:

- SUPABASE_URL
- SUPABASE_ANON_KEY
- SUPABASE_SERVICE_ROLE_KEY
- SUPABASE_DB_URL

## Guidelines

1. Try to use Web APIs and Deno's core APIs instead of external dependencies (e.g., use `fetch` instead of Axios, use WebSockets API instead of node-ws).

2. For external imports, always define a version (e.g., `npm:express@4.18.2`).

3. For external dependencies, importing via `npm:` and `jsr:` is preferred.

4. NEVER use imports from `deno.land/x`, `esm.sh` and `unpkg.com`. If you use a package from one of those CDNs, you can replace the CDN origin with the `npm:` specifier. Here is an exampke:

   `https://unpkg.com/react@18/umd/react.development.js` can be converted into `npm:react@18`.

5. Use `node:` specifier for Node built-in APIs when needed.

6. IMPORTANT: Use the built-in `Deno.serve` instead of importing `serve` from `https://deno.land/std@0.168.0/http/server.ts`.

7. A single edge function can handle multiple routes.
   - Use a library like Express or Hono to handle the routes.
   - Each route must be prefixed with `/function-name` so they are routed correctly.

8. File write operations are ONLY permitted in the `/tmp` directory.
   - You can use either Deno or Node File APIs.

9. Use `EdgeRuntime.waitUntil(promise)` for background tasks.
   - DO NOT assume it is available in the request / execution context.

10. Edge functions are stored in the `/home/project/supabase/functions`.

11. Each function gets its own subdirectory with hyphenated names.

12. CORS should ALWAYS be handled using the `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` headers.

-----------------

File: ClineAGI/prompts/protocols/003-00_protocol-mcp-development.md
-----------------
# MCP Server Development Protocol

⚠️ CRITICAL: DO NOT USE attempt_completion BEFORE TESTING ⚠️

## Step 1: Planning (PLAN MODE)
- What problem does this tool solve?
- What API/service will it use?
- What are the authentication requirements?
  □ Standard API key
  □ OAuth (requires separate setup script)
  □ Other credentials

## Step 2: Implementation (ACT MODE)
1. Bootstrap
   - For web services, JavaScript integration, or Node.js environments:
     ```bash
     npx @modelcontextprotocol/create-server my-server
     cd my-server
     npm install
     ```
   - For data science, ML workflows, or Python environments:
     ```bash
     pip install mcp
     # Or with uv (recommended)
     uv add "mcp[cli]"
     ```

2. Core Implementation
   - Use MCP SDK
   - Implement comprehensive logging
     - TypeScript (for web/JS projects):
       ```typescript
       console.error('[Setup] Initializing server...');
       console.error('[API] Request to endpoint:', endpoint);
       console.error('[Error] Failed with:', error);
       ```
     - Python (for data science/ML projects):
       ```python
       import logging
       logging.error('[Setup] Initializing server...')
       logging.error(f'[API] Request to endpoint: {endpoint}')
       logging.error(f'[Error] Failed with: {str(error)}')
       ```
   - Add type definitions
   - Handle errors with context
   - Implement rate limiting if needed

3. Configuration
   - Get credentials from user if needed
   - Add to MCP settings:
     - For TypeScript projects:
       ```json
       {
         "mcpServers": {
           "my-server": {
             "command": "node",
             "args": ["path/to/build/index.js"],
             "env": {
               "API_KEY": "key"
             },
             "disabled": false,
             "autoApprove": []
           }
         }
       }
       ```
     - For Python projects:
       ```bash
       # Directly with command line
       mcp install server.py -v API_KEY=key
       
       # Or in settings.json
       {
         "mcpServers": {
           "my-server": {
             "command": "python",
             "args": ["server.py"],
             "env": {
               "API_KEY": "key"
             },
             "disabled": false,
             "autoApprove": []
           }
         }
       }
       ```

## Step 3: Testing (BLOCKER ⛔️)

<thinking>
BEFORE using attempt_completion, I MUST verify:
□ Have I tested EVERY tool?
□ Have I confirmed success from the user for each test?
□ Have I documented the test results?

If ANY answer is "no", I MUST NOT use attempt_completion.
</thinking>

1. Test Each Tool (REQUIRED)
   □ Test each tool with valid inputs
   □ Verify output format is correct
   ⚠️ DO NOT PROCEED UNTIL ALL TOOLS TESTED

## Step 4: Completion
❗ STOP AND VERIFY:
□ Every tool has been tested with valid inputs
□ Output format is correct for each tool

Only after ALL tools have been tested can attempt_completion be used.

## Key Requirements
- ✓ Must use MCP SDK
- ✓ Must have comprehensive logging
- ✓ Must test each tool individually
- ✓ Must handle errors gracefully
- ⛔️ NEVER skip testing before completion

-----------------

File: ClineAGI/prompts/protocols/README.md
-----------------
# Protocols Directory Overview

## 1. Purpose Statement

This directory, `prompts/protocols/`, stores prompt files that define formal protocols for complex, multi-step operations or interactions that Cline may need to undertake. These protocols provide structured guidance for sequences of actions, decision-making, and tool usage in specific, often technical, contexts.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Protocol Definitions (Markdown `.md`):** Files detailing step-by-step procedures for complex tasks.
    *   These often involve interaction with external systems, development processes, or intricate analytical tasks.
*   **Naming Convention:** Files may follow a `NNN-MM_protocol-descriptive-name.md` pattern (e.g., `003-NN` for general protocols).

### Content That Does NOT Belong Here:
*   **Simple Workflow Definitions:** Shorter, less formal workflows belong in `prompts/workflows/` or `prompts/core_workflows/`. Protocols imply a higher degree of formality and complexity.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.
*   **Specific Use Case Guides:** These belong in `prompts/use_cases/`.

## 3. Key Files Overview

As of the last update, this directory contains the following key file:

*   **`003-00_protocol-mcp-development.md`**: Defines the protocol for Model Context Protocol (MCP) server development, including steps for planning, implementation, testing, and documentation.

*(This list should be kept current as protocols are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   Cline references these protocols when undertaking tasks that require a formal, step-by-step approach.
*   These documents ensure consistency and thoroughness in complex operations.
*   The `prompt_inventory.yaml` file should include entries for these protocols to make them discoverable.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/prompt_inventory/README.md
-----------------
# Prompt Inventory Supporting Files Directory Overview

## 1. Purpose Statement

This directory, `prompts/prompt_inventory/`, is designated for storing supporting files and resources related to the main `prompts/prompt_inventory.yaml` system. This includes guides on specific aspects of prompt construction or response generation that are referenced or utilized by the broader prompt inventory.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Guides and Definitions (Markdown `.md`):** Files that provide detailed explanations or definitions for concepts used within the prompt inventory system.
    *   Example: Guides on different response styles that Cline can adopt.
*   **Supporting Resources:** Any other files that directly support the structure, maintenance, or understanding of the `prompt_inventory.yaml` and its entries.
*   **Subdirectories for Organization:** Further categorization of supporting files (e.g., `response-styles/`).

### Content That Does NOT Belong Here:
*   **Actual Prompt Files for Dynamic Loading:** These belong in their respective categorized subdirectories within `prompts/` (e.g., `prompts/use_cases/`, `prompts/agent_prompts/`).
*   **The Master `prompt_inventory.yaml` file:** This resides in the root of the `prompts/` directory.
*   **The `prompt_inventory.md` file:** This also resides in the root of the `prompts/` directory and serves as a human-readable overview or older version of the inventory.

## 3. Key Subdirectories & Files Overview

As of the last update, this directory contains:

*   **`response-styles/`**: A subdirectory containing guides for different response styles Cline can use (e.g., `research-report-guidelines.md`).

*(This list should be kept current as supporting files or subdirectories are added or modified.)*

## 4. Usage & Maintenance

*   Files in this directory provide deeper context or definitions for elements managed by the `prompt_inventory.yaml`.
*   They help ensure consistency and clarity in how prompts are designed and how responses are styled.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/prompt_inventory/response-styles/research-report-guidelines.md
-----------------
# Research Report Style and Formatting Guidelines

## Writing Guidelines
- Always begin with a clear title using a single `#` header
- Include a brief introductory paragraph summarizing key findings
- Organize content into major sections using `##` headers
- Further divide into subsections using `###` headers
- Use `####` headers sparingly for special subsections
- Never skip header levels
- Write multiple paragraphs per section with narrative flow
- Convert list-based information into flowing paragraphs or tables
- Conclude with synthesis of findings and recommendations

## Style Guide
- Write in formal academic prose
- Reserve bold formatting only for critical terms or findings
- Present comparative data in tables rather than lists
- Use topic sentences to guide logical progression

## Citation Guidelines  
- Cite sources inline using bracketed numbers (e.g., `[1][2]`)
- Each index in its own bracket
- Cite up to three relevant sources per sentence
- No separate References section at end

## Special Formats
- **Code Snippets:** Markdown fenced blocks with language IDs
- **Math:** LaTeX wrapped in `\( \)` inline or `\[ \]` block
- **Quotations:** Markdown blockquotes
- **Emphasis:** Bold for critical terms, italics for highlighting
- **Tables:** Markdown table syntax for comparisons

-----------------

File: ClineAGI/prompts/use_cases/README.md
-----------------
# Use Cases Directory Overview

## 1. Purpose Statement

This directory, `prompts/use_cases/`, serves as a comprehensive library of detailed prompt files, each tailored to a specific task or "use case" that Cline, the AI Software Engineering Assistant, can perform. These use case guides provide structured prompts, examples, and context to help Cline effectively execute a wide variety of content creation, management, analysis, and development tasks.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Specific Use Case Guides (Markdown `.md`):** Each file should define a distinct, actionable use case.
    *   Content typically includes:
        *   A clear objective for the use case.
        *   The types of input Cline might expect.
        *   Detailed prompt structures, often incorporating placeholders for user-specific information.
        *   Examples of desired outputs.
        *   Any relevant context, constraints, or best practices for that specific task.
*   **Categorized Subdirectories:** Use cases are organized into logical subdirectories based on their domain or primary function (e.g., `content-creation-and-management/`, which itself contains further subcategories).
*   **Naming Convention:** Files should be named descriptively based on the use case (e.g., `code-snippet-generation.md`, `content-summarization.md`).

### Content That Does NOT Belong Here:
*   **General Prompting Techniques or Styles:** These belong in `prompts/prompt_styles/`.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.
*   **Broad Workflow Definitions:** While a use case might be part of a larger workflow, the definitions for those broader workflows belong in `prompts/workflows/` or `prompts/core_workflows/`.
*   **Reference Documents or Tech-Specific Guides:** These belong in `prompts/reference_documents/` or `prompts/tech_specific_guides/` respectively.

## 3. Key Subdirectories Overview

As of the last update, this directory's primary subdirectory is:

*   **`content-creation-and-management/`**: Contains a vast array of use cases related to generating, editing, analyzing, and managing various forms of content. This subdirectory is further organized into more granular categories such as:
    *   `brainstorming-idea-generation/`
    *   `code-generation-software-development/`
    *   `content-editing-and-refinement/`
    *   `creative-writing-storytelling/`
    *   `data-analysis-reporting/`
    *   `educational-content-courseware-development/`
    *   `legal-business-document-drafting/`
    *   `long-form-written-content-generation-and-augmentation/`
    *   `marketing-sales-content-strategy-planning/`
    *   `personal-productivity-organization/`
    *   `short-form-and-micro-content-creation/`
    *   `specialized-creative-content-forms/`
    *   `technical-writing-documentation/`

*(This list and the contents of subdirectories should be kept current as use cases are added, modified, or reorganized.)*

## 4. Usage & Maintenance

*   Cline leverages these use case guides when a user's request maps to a defined task.
*   The `prompt_inventory.yaml` file is critical for making these use cases discoverable and dynamically loadable by Cline based on triggers and context.
*   New use cases should be added to the appropriate subdirectory and meticulously documented.
*   This `README.md` should be updated if the overall structure or primary categories within the `prompts/use_cases/` directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/use_cases/software-design-and-architecture/conceptual-ui-component-design.md
-----------------
# Objective
To generate a conceptual design for a User Interface (UI) component, focusing on its purpose, key elements, layout, user flow, and accessibility considerations. This is not for generating code, but for outlining the design principles.

## User Input Requirements
The user needs to provide:
1.  **Component Name/Purpose:** What is the component and what does it do? (e.g., "User login form," "Product card display," "Interactive data dashboard widget").
2.  **Key Functionalities:** What are the essential functions the component must perform?
3.  **Target Users (Optional):** Who will be using this component? (e.g., general public, technical administrators, specific age group). This helps inform accessibility and usability choices.
4.  **Core Elements/Data:** What are the main pieces of information or interactive elements that must be present? (e.g., for a login form: username field, password field, submit button, forgot password link).
5.  **Desired Style/Feel (Optional):** (e.g., modern, minimalist, playful, corporate, data-dense).
6.  **Key Interactions/User Flow (Optional):** How should a user typically interact with this component from start to finish?

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the component's purpose, functionalities, target users, core elements, and desired style.
2.  **Outline Component Design:**
    *   **Purpose Statement:** Briefly reiterate the component's main goal.
    *   **Key Elements:** List and describe each essential visual and interactive element.
    *   **Layout & Structure:** Describe the general arrangement of elements. A simple textual description or a very basic Mermaid diagram (if helpful for complex layouts) can be used.
    *   **User Interaction Flow:** Describe the step-by-step process of a user interacting with the component to achieve its purpose.
    *   **Accessibility Considerations:** Briefly mention key accessibility points (e.g., keyboard navigation, clear labeling, sufficient contrast if colors are discussed conceptually).
    *   **Error States/Feedback (Conceptual):** How might the component indicate errors or provide feedback to the user (without designing specific visuals)?
    *   **Responsiveness (Conceptual):** Briefly mention how the layout might adapt to different screen sizes.
3.  **Focus on Concept, Not Code:** Emphasize that this is a conceptual design. Avoid generating HTML/CSS/JS.
4.  **Offer Variations (Optional):** If appropriate, suggest one or two alternative approaches to layout or interaction.

## Example Output Structure/Format
**Scenario:** User wants a conceptual design for a product filtering sidebar.
*   **User Input:**
    *   Component: Product filtering sidebar for an e-commerce site.
    *   Functionalities: Allow users to filter products by category, price range, and brand.
    *   Core Elements: Category list (checkboxes), price range slider, brand list (checkboxes), apply filters button, clear filters button.
    *   Style: Clean, modern.

*   **Cline Generated Conceptual Design:**

    **Component: Product Filtering Sidebar**

    *   **Purpose:** To allow users to refine the displayed product list on an e-commerce site based on selected criteria.
    *   **Key Elements:**
        *   **Category Filter:** A list of product categories, each with a checkbox. A "Show More/Less" option if categories are numerous.
        *   **Price Range Filter:** A dual-handle slider allowing users to select a min/max price. Current selected range displayed.
        *   **Brand Filter:** A list of available brands, each with a checkbox. Searchable if many brands.
        *   **Apply Filters Button:** A prominent button to apply the selected filter criteria.
        *   **Clear All Filters Button/Link:** To reset all selected filters to default.
    *   **Layout & Structure:**
        *   Vertically stacked sections for Category, Price, and Brand.
        *   "Apply Filters" button at the bottom, "Clear All" typically near the top or bottom.
    *   **User Interaction Flow:**
        1.  User views available filter options.
        2.  User selects desired categories by checking boxes.
        3.  User adjusts the price range slider.
        4.  User selects desired brands by checking boxes.
        5.  User clicks "Apply Filters."
        6.  Product list updates. User can then clear filters or modify selections and re-apply.
    *   **Accessibility Considerations:** Ensure checkboxes are keyboard navigable, slider has keyboard controls, and all interactive elements have clear labels. Sufficient contrast for text and controls.
    *   **Feedback:** Selected filters should be visually distinct. A count of matching products could update dynamically or upon applying filters.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Conceptual UI Component Design"
path: "prompts/use_cases/software-design-and-architecture/conceptual-ui-component-design.md"
type: "use_case_guide"
description: "Outlines a conceptual design for a UI component, focusing on purpose, elements, layout, user flow, and accessibility, without generating code."
triggers: ["design ui component", "conceptual ui design", "ui component outline", "user interface component plan"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/software-design-and-architecture/conceptual-database-schema-design.md
-----------------
# Objective
To generate a conceptual database schema design based on user-provided entities and their relationships. This prompt focuses on identifying entities, attributes, primary keys, foreign keys, and relationship types, not on generating specific SQL DDL.

## User Input Requirements
The user needs to provide:
1.  **Main Purpose of the Database:** What kind of application or system is this database for? (e.g., e-commerce site, blogging platform, project management tool).
2.  **Key Entities:** What are the main objects or concepts that need to be stored? (e.g., Users, Products, Orders, Posts, Comments, Tasks).
3.  **Attributes for Each Entity (Optional but helpful):** What specific pieces of information describe each entity? (e.g., for User: username, email, password_hash, created_at).
4.  **Relationships Between Entities (Optional but helpful):** How do these entities relate to each other? (e.g., "A User can have many Orders," "A Product can be in many Orders," "A Post can have many Comments").
5.  **Specific Requirements (Optional):** Any known constraints, data types to consider (conceptually), or specific features the schema needs to support.

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the database purpose, key entities, and any provided attributes or relationships.
2.  **Identify/Refine Entities:** Confirm the list of core entities.
3.  **Define Attributes & Primary Keys:** For each entity:
    *   Suggest common and relevant attributes if not fully provided by the user.
    *   Identify a suitable primary key (e.g., `id`, `user_id`).
4.  **Define Relationships & Foreign Keys:**
    *   For each relationship described or inferred:
        *   Determine the type of relationship (one-to-one, one-to-many, many-to-many).
        *   For one-to-many relationships, identify where the foreign key should reside.
        *   For many-to-many relationships, propose a junction/join table with its own primary keys and foreign keys linking to the related entities.
5.  **Present Conceptual Schema:**
    *   List each entity with its attributes, clearly marking the primary key (PK) and any foreign keys (FK).
    *   Describe the relationships between entities (e.g., "Users (1) -- (M) Orders" or "A User has many Orders. An Order belongs to one User. Foreign Key: `user_id` in Orders table references `id` in Users table.").
    *   A simple Mermaid Entity Relationship Diagram (ERD) can be highly effective here to visualize the schema.
6.  **Focus on Concept:** Reiterate that this is a conceptual schema. Specific data types, indexing, and constraints would be part of a more detailed physical design or SQL DDL generation (which could be a follow-up prompt).

## Example Output Structure/Format
**Scenario:** User wants a conceptual database schema for a simple blog.
*   **User Input:**
    *   Purpose: Simple blogging platform.
    *   Entities: Users, Posts, Comments.
    *   Relationships: A user writes many posts. A post can have many comments. A user can write many comments.

*   **Cline Generated Conceptual Schema Design:**

    **Conceptual Database Schema: Blogging Platform**

    **Entities & Attributes:**

    1.  **Users**
        *   `user_id` (PK)
        *   `username` (e.g., VARCHAR, UNIQUE)
        *   `email` (e.g., VARCHAR, UNIQUE)
        *   `password_hash` (e.g., VARCHAR)
        *   `created_at` (e.g., TIMESTAMP)

    2.  **Posts**
        *   `post_id` (PK)
        *   `author_id` (FK, references Users.user_id)
        *   `title` (e.g., VARCHAR)
        *   `content` (e.g., TEXT)
        *   `published_at` (e.g., TIMESTAMP)
        *   `updated_at` (e.g., TIMESTAMP)

    3.  **Comments**
        *   `comment_id` (PK)
        *   `post_id` (FK, references Posts.post_id)
        *   `commenter_id` (FK, references Users.user_id)
        *   `comment_text` (e.g., TEXT)
        *   `commented_at` (e.g., TIMESTAMP)

    **Relationships:**

    *   **Users (1) -- (M) Posts:** A User can have many Posts. A Post is written by one User.
        *   Implemented by `author_id` in the `Posts` table.
    *   **Posts (1) -- (M) Comments:** A Post can have many Comments. A Comment belongs to one Post.
        *   Implemented by `post_id` in the `Comments` table.
    *   **Users (1) -- (M) Comments:** A User can write many Comments. A Comment is written by one User.
        *   Implemented by `commenter_id` in the `Comments` table.

    **Mermaid ERD (Conceptual):**
    ```mermaid
    erDiagram
        USERS ||--o{ POSTS : writes
        USERS ||--o{ COMMENTS : comments_on
        POSTS ||--o{ COMMENTS : has
        USERS {
            int user_id PK
            string username
            string email
            string password_hash
            datetime created_at
        }
        POSTS {
            int post_id PK
            int author_id FK
            string title
            text content
            datetime published_at
            datetime updated_at
        }
        COMMENTS {
            int comment_id PK
            int post_id FK
            int commenter_id FK
            text comment_text
            datetime commented_at
        }
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Conceptual Database Schema Design"
path: "prompts/use_cases/software-design-and-architecture/conceptual-database-schema-design.md"
type: "use_case_guide"
description: "Generates a conceptual database schema design, identifying entities, attributes, keys, and relationships. Can include a Mermaid ERD."
triggers: ["design database schema", "conceptual database design", "database entity relationship diagram", "db schema outline"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/software-design-and-architecture/conceptual-api-design.md
-----------------
# Objective
To generate a conceptual design for a RESTful API, focusing on defining resources, HTTP methods, common request/response payloads, and status codes, without generating actual implementation code.

## User Input Requirements
The user needs to provide:
1.  **Purpose of the API:** What service or data will this API expose? (e.g., user management, product catalog, order processing).
2.  **Key Resources:** What are the main entities the API will manage? (e.g., Users, Products, Orders).
3.  **Core Operations/Functionalities:** What are the essential actions that need to be performed on these resources? (e.g., create user, get product details, update order status).
4.  **Data for Each Resource (Conceptual):** What kind of information is associated with each resource? (e.g., for User: name, email, role).
5.  **Authentication/Authorization Needs (Conceptual, Optional):** Any high-level thoughts on who can access what? (e.g., "only admins can delete users," "users can only see their own orders").

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the API's purpose, key resources, core operations, and any conceptual data or security requirements.
2.  **Define Resources & Endpoints:**
    *   For each key resource, define the base endpoint path (e.g., `/users`, `/products`, `/orders`).
    *   Identify common CRUD (Create, Read, Update, Delete) operations and map them to standard HTTP methods and endpoint patterns:
        *   `GET /resources`: List all resources.
        *   `POST /resources`: Create a new resource.
        *   `GET /resources/{id}`: Get a specific resource by ID.
        *   `PUT /resources/{id}` or `PATCH /resources/{id}`: Update a specific resource.
        *   `DELETE /resources/{id}`: Delete a specific resource.
    *   Consider any custom actions or nested resources if implied by the user's needs (e.g., `GET /users/{id}/orders`).
3.  **Outline Request/Response Payloads (Conceptual):**
    *   For each endpoint, briefly describe the expected JSON request payload (for POST/PUT) and the typical JSON response payload. Focus on key fields rather than exhaustive detail.
    *   Example for `POST /users`: Request might include `username`, `email`, `password`. Response might include `user_id`, `username`, `email`, `created_at`.
4.  **Identify Common HTTP Status Codes:**
    *   List relevant status codes for typical outcomes:
        *   `200 OK` (Successful GET, PUT, PATCH)
        *   `201 Created` (Successful POST)
        *   `204 No Content` (Successful DELETE)
        *   `400 Bad Request` (Client error, e.g., invalid payload)
        *   `401 Unauthorized` (Authentication required)
        *   `403 Forbidden` (Authenticated but not permitted)
        *   `404 Not Found` (Resource not found)
        *   `500 Internal Server Error` (Server-side issue)
5.  **Mention Authentication (Conceptual):** Briefly note how authentication might be handled (e.g., "Authentication could be token-based (JWT) via an Authorization header").
6.  **Present Conceptual API Design:**
    *   Organize by resource. For each resource, list its endpoints, methods, conceptual payloads, and common status codes.
    *   A simple textual list or a table format can be effective.

## Example Output Structure/Format
**Scenario:** User wants a conceptual API design for a basic task management service.
*   **User Input:**
    *   Purpose: Task management.
    *   Resources: Tasks.
    *   Operations: Create task, list tasks, get task, update task, delete task.
    *   Task Data: title, description, status (e.g., todo, in-progress, done), due_date.

*   **Cline Generated Conceptual API Design:**

    **Conceptual API Design: Task Management Service**

    **Resource: Tasks (`/tasks`)**

    1.  **`GET /tasks`**
        *   **Description:** List all tasks.
        *   **Response Payload (Array of Tasks):** `[{ "task_id", "title", "status", "due_date" }, ...]`
        *   **Status Codes:** `200 OK`

    2.  **`POST /tasks`**
        *   **Description:** Create a new task.
        *   **Request Payload:** `{ "title": "string", "description": "string", "due_date": "date" }`
        *   **Response Payload:** `{ "task_id", "title", "description", "status": "todo", "due_date", "created_at" }`
        *   **Status Codes:** `201 Created`, `400 Bad Request`

    3.  **`GET /tasks/{task_id}`**
        *   **Description:** Get a specific task by its ID.
        *   **Response Payload:** `{ "task_id", "title", "description", "status", "due_date", "created_at", "updated_at" }`
        *   **Status Codes:** `200 OK`, `404 Not Found`

    4.  **`PUT /tasks/{task_id}`** (or `PATCH`)
        *   **Description:** Update an existing task.
        *   **Request Payload:** `{ "title": "string" (optional), "description": "string" (optional), "status": "string" (optional), "due_date": "date" (optional) }`
        *   **Response Payload:** Updated task object.
        *   **Status Codes:** `200 OK`, `400 Bad Request`, `404 Not Found`

    5.  **`DELETE /tasks/{task_id}`**
        *   **Description:** Delete a task.
        *   **Response Payload:** None.
        *   **Status Codes:** `204 No Content`, `404 Not Found`

    **Authentication (Conceptual):**
    *   Endpoints could be protected, requiring a user authentication token (e.g., JWT) passed in an `Authorization` header. Access control might restrict users to only manage their own tasks.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Conceptual API Design"
path: "prompts/use_cases/software-design-and-architecture/conceptual-api-design.md"
type: "use_case_guide"
description: "Outlines a conceptual design for a RESTful API, including resources, methods, payload ideas, and status codes."
triggers: ["design api", "conceptual api design", "rest api outline", "api endpoint planning"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/communication-and-messaging/instagram-caption-generation.md
-----------------
# Objective
To generate engaging and contextually appropriate Instagram captions that complement visual content (images/videos), incorporate relevant hashtags, and encourage user interaction.

## User Input Requirements
The user needs to provide:
1.  **Description of Visual Content:** What does the image or video show? Key elements, mood, style.
2.  **Purpose of the Post:** (e.g., share a personal moment, promote a product/service, tell a story, ask a question, drive traffic to a link in bio).
3.  **Core Message/Story (Optional):** Any specific narrative or message to convey beyond the visual.
4.  **Desired Tone (Optional):** (e.g., fun, inspirational, informative, witty, artistic, casual). Default is engaging and positive.
5.  **Hashtag Preference (Optional):** (e.g., "suggest relevant hashtags," "use these: #travel #art," "include a mix of popular and niche hashtags," "no hashtags"). Default is to suggest 3-7 relevant hashtags, including a mix if appropriate.
6.  **Call to Action (Optional):** (e.g., "Link in bio!", "What do you think?", "Tag a friend who...", "Save this post!").
7.  **Target Audience (Optional):** (e.g., followers, potential customers, specific community).

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the visual content, purpose, core message, target audience, tone, hashtag preference, and call to action.
2.  **Draft Caption:**
    *   **Visual Synergy:** Ensure the caption complements and enhances the visual content, rather than just describing it literally.
    *   **Engaging Opening:** Start with a hook or an intriguing question to capture attention.
    *   **Storytelling (if applicable):** If there's a story to tell, weave it concisely into the caption.
    *   **Emojis:** Use emojis appropriately to add personality and visual appeal, breaking up text where needed.
    *   **Hashtags:** Include a good mix of relevant hashtags (general, niche, community-specific) to maximize reach, unless otherwise specified. Place them either at the end of the caption or subtly integrated if it fits.
    *   **Call to Action:** Make the CTA clear and compelling. If directing to a link in bio, state it explicitly.
    *   **Spacing & Readability:** Use line breaks to improve readability for longer captions.
    *   **Questions for Engagement:** Consider ending with a question to encourage comments.
3.  **Consider Instagram's Context:** Think about what kind of captions perform well on Instagram (authenticity, storytelling, behind-the-scenes, user-generated content mentions).
4.  **Review for Engagement:** Read the caption to ensure it's engaging, authentic, and encourages interaction.

## Example Output Structure/Format
**Scenario:** User wants a caption for an Instagram photo of a sunset over mountains.
*   **User Input:**
    *   Visual Content: Photo of a vibrant orange and purple sunset over a mountain range. Mood is peaceful and awe-inspiring.
    *   Purpose: Share a beautiful moment, inspire followers.
    *   Tone: Awe-inspired, reflective.
    *   Hashtags: Suggest relevant, mix of popular and niche.
    *   Call to Action: "What's your favorite sunset memory?"

*   **Cline Generated Instagram Caption:**
    "Chasing horizons and soaking in every last drop of this incredible sunset. 🌄✨ There's something truly magical about the sky painting itself in these colors. Moments like these remind you to just pause and breathe.

    What's your favorite sunset memory? Share it below! 👇

    #SunsetLovers #MountainView #GoldenHour #NaturePhotography #TravelGram #PeacefulMoments #SkyOnFire #Wanderlust"

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Instagram Caption Generation"
path: "prompts/use_cases/communication-and-messaging/instagram-caption-generation.md"
type: "use_case_guide"
description: "Generates engaging Instagram captions that complement visuals, use relevant hashtags, and encourage interaction."
triggers: ["instagram caption", "draft instagram post", "write ig caption"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/communication-and-messaging/whatsapp-message-generation.md
-----------------
# Objective
To generate appropriate WhatsApp messages suitable for various contexts, considering its informal nature, common use of emojis, and suitability for quick updates or group coordination.

## User Input Requirements
The user needs to provide:
1.  **Context/Purpose:** What is the reason for the message? (e.g., quick update, asking a question, coordinating a meetup, sharing a link/photo).
2.  **Recipient(s):** Who is the message for? (e.g., a friend, a family group, a colleague for informal chat). This helps determine the tone.
3.  **Key Information:** What essential details must be included in the message?
4.  **Desired Tone (Optional):** (e.g., casual, friendly, urgent, playful). If not specified, a generally friendly and casual tone will be used.
5.  **Emoji Preference (Optional):** (e.g., "use emojis," "no emojis," "suggest relevant emojis"). Default is to suggest/use common, relevant emojis.
6.  **Call to Action (Optional):** Is there anything specific the recipient should do? (e.g., reply, confirm, check a link).

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the context, recipient, key information, and any specific tone or emoji preferences.
2.  **Draft Message:**
    *   Keep the message concise and to the point, suitable for quick reading.
    *   Use informal language appropriate for WhatsApp unless the context dictates otherwise.
    *   Incorporate the key information naturally.
    *   Suggest or include relevant emojis to enhance tone and expressiveness, unless requested otherwise.
    *   If a call to action is specified, make it clear and easy to understand.
3.  **Consider Variations (Optional):** If appropriate, offer a couple of slightly different phrasings or emoji uses.
4.  **Review for Clarity:** Ensure the message is easy to understand and conveys the intended meaning effectively.

## Example Output Structure/Format
**Scenario:** User wants to remind a friend about a movie night.
*   **User Input:**
    *   Context: Remind friend about movie night.
    *   Recipient: Alex (friend).
    *   Key Information: Movie night is tonight at 7 PM at my place. We're watching "Galaxy Quest". Bring snacks if you can!
    *   Tone: Casual, excited.
    *   Emoji: Yes, use them.

*   **Cline Generated WhatsApp Message:**
    "Hey Alex! 👋 Just a reminder about movie night tonight! 🎬 We're kicking off "Galaxy Quest" at my place around 7 PM. If you can, bring some snacks to share! 🍿 Can't wait! 😄"

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "WhatsApp Message Generation"
path: "prompts/use_cases/communication-and-messaging/whatsapp-message-generation.md"
type: "use_case_guide"
description: "Generates WhatsApp messages suitable for various informal contexts, considering emojis and conciseness."
triggers: ["whatsapp message", "draft whatsapp", "write whatsapp text"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/communication-and-messaging/twitter-x-post-generation.md
-----------------
# Objective
To generate concise and engaging posts suitable for X (formerly Twitter), considering character limits, the common use of hashtags, and the platform's fast-paced nature.

## User Input Requirements
The user needs to provide:
1.  **Core Message/Topic:** What is the main point of the post?
2.  **Purpose of the Post:** (e.g., share an opinion, ask a question, promote a link, announce something, engage in a trend).
3.  **Key Information/Links:** Any specific details, URLs, or user mentions to include.
4.  **Desired Tone (Optional):** (e.g., witty, informative, provocative, humorous, serious). Default is engaging and concise.
5.  **Hashtag Preference (Optional):** (e.g., "suggest relevant hashtags," "use these specific hashtags: #example1 #example2," "no hashtags"). Default is to suggest 1-3 relevant hashtags.
6.  **Call to Action (Optional):** (e.g., "What do you think?", "Read more here:", "RT if you agree!").
7.  **Image/Video Context (Optional):** If the post is meant to accompany an image or video, briefly describe it so the text can be synergistic.

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the core message, purpose, key information, tone, hashtag preference, and any call to action.
2.  **Draft Post:**
    *   **Brevity is Key:** Craft the message to be well within X's character limits. Use concise language.
    *   **Engaging Hook:** Start with a hook to grab attention quickly.
    *   **Clarity:** Ensure the main point is clear despite the brevity.
    *   **Hashtags:** Include 1-3 relevant and potentially trending hashtags to increase visibility, unless requested otherwise.
    *   **Mentions:** If user mentions (`@username`) are provided, incorporate them correctly.
    *   **Links:** If a URL is provided, ensure it's included (it will be shortened by X).
    *   **Call to Action:** Integrate the call to action smoothly.
    *   **Tone:** Reflect the desired tone.
3.  **Consider Alternatives (Optional):** Offer 1-2 variations if the message allows for different angles or hashtag strategies.
4.  **Review for Impact:** Read the post to ensure it's impactful and suitable for the X platform.

## Example Output Structure/Format
**Scenario:** User wants to share a blog post about AI ethics on X.
*   **User Input:**
    *   Core Message: New blog post on the ethical implications of advanced AI.
    *   Purpose: Promote blog post, encourage discussion.
    *   Key Information/Link: [link_to_blog_post]
    *   Tone: Thought-provoking, slightly serious.
    *   Hashtags: Suggest relevant.
    *   Call to Action: "Read the full post and share your thoughts."

*   **Cline Generated X Post:**
    "Just published a new piece exploring the complex ethical landscape of advanced AI. 🤔 What are the biggest challenges we face? Read the full post here: [link_to_blog_post] and share your thoughts! 👇 #AIethics #ResponsibleAI #FutureTech"

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "X (Twitter) Post Generation"
path: "prompts/use_cases/communication-and-messaging/twitter-x-post-generation.md"
type: "use_case_guide"
description: "Generates concise and engaging posts for X (formerly Twitter), including hashtags and calls to action."
triggers: ["twitter post", "draft tweet", "write X post", "tweet generation"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/communication-and-messaging/linkedin-post-generation.md
-----------------
# Objective
To generate professional and insightful posts suitable for LinkedIn, focusing on industry insights, professional achievements, networking, or sharing valuable content.

## User Input Requirements
The user needs to provide:
1.  **Core Message/Topic:** What is the main subject of the post?
2.  **Purpose of the Post:** (e.g., share an article with commentary, announce a professional achievement, offer an industry insight, ask a professional question, start a discussion).
3.  **Key Information/Links:** Any specific details, URLs (e.g., to an article, portfolio, company page), or individuals/companies to mention (though LinkedIn's @mention works differently, the names can be included for context).
4.  **Desired Tone (Optional):** (e.g., formal, informative, thought-provoking, encouraging, professional). Default is professional and insightful.
5.  **Hashtag Preference (Optional):** (e.g., "suggest relevant professional hashtags," "use these: #leadership #innovation," "no hashtags"). Default is to suggest 2-4 relevant professional hashtags.
6.  **Call to Action (Optional):** (e.g., "What are your thoughts?", "Read the full article here:", "Let's connect!", "Looking for collaborators on...").
7.  **Target Audience (Optional):** (e.g., peers in [industry], potential employers, clients, general professional network).

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the core message, purpose, target audience, key information, tone, hashtag preference, and any call to action.
2.  **Draft Post:**
    *   **Professional Tone:** Maintain a professional and respectful tone throughout the post.
    *   **Value Proposition:** Ensure the post offers value to the reader (e.g., insight, useful information, a point for discussion).
    *   **Structure for Readability:** Use short paragraphs, bullet points if appropriate for lists, and clear language. LinkedIn posts can be longer than X posts.
    *   **Hashtags:** Include 2-4 relevant professional hashtags to increase visibility within relevant professional communities.
    *   **Links:** If a URL is provided, incorporate it naturally.
    *   **Call to Action:** Integrate the call to action clearly.
    *   **Opening Hook:** Start with an engaging sentence to capture attention.
3.  **Consider LinkedIn's Context:** Think about what kind of content performs well on LinkedIn (e.g., career advice, industry trends, personal success stories with lessons, insightful questions).
4.  **Review for Professionalism:** Ensure the language, tone, and content are appropriate for a professional networking platform.

## Example Output Structure/Format
**Scenario:** User wants to share an insightful article about remote work trends on LinkedIn.
*   **User Input:**
    *   Core Message: Sharing an article about the future of remote work and its impact on company culture.
    *   Purpose: Share article, offer commentary, and spark discussion.
    *   Key Information/Link: [link_to_article], main point of commentary: "Flexibility is key, but maintaining a strong culture requires deliberate effort."
    *   Tone: Insightful, professional.
    *   Hashtags: Suggest relevant.
    *   Call to Action: "What strategies have you found effective for remote team culture?"

*   **Cline Generated LinkedIn Post:**
    "Fascinating read on the evolving landscape of remote work and its profound impact on company culture: [link_to_article]

    My key takeaway is that while flexibility is becoming a standard expectation, building and maintaining a strong, cohesive team culture in a distributed environment requires deliberate and innovative strategies. It's not just about the tools, but the human connection.

    What strategies have your organizations found effective in nurturing culture with remote or hybrid teams? Would love to hear your thoughts and experiences in the comments below.

    #RemoteWork #FutureOfWork #CompanyCulture #Leadership #HR"

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "LinkedIn Post Generation"
path: "prompts/use_cases/communication-and-messaging/linkedin-post-generation.md"
type: "use_case_guide"
description: "Generates professional and insightful posts for LinkedIn, suitable for sharing articles, achievements, or starting discussions."
triggers: ["linkedin post", "draft linkedin", "write linkedin update"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/communication-and-messaging/generic-instant-messenger-prompt.md
-----------------
# Objective
To generate versatile instant messages suitable for a variety of platforms (e.g., Slack, Discord, general chat applications), allowing for adaptation in tone, formality, and features like mentions or channel references.

## User Input Requirements
The user needs to provide:
1.  **Platform (Optional but Recommended):** Which IM platform is this for? (e.g., Slack, Discord, general chat). This helps tailor specific features like @mentions or #channel references.
2.  **Context/Purpose:** What is the reason for the message? (e.g., asking a question in a channel, direct message update, team announcement).
3.  **Recipient(s)/Channel:** Who is the message for, or which channel is it intended for? (e.g., `@username`, `#general-channel`, "Project Team DM").
4.  **Key Information:** What essential details must be included in the message?
5.  **Desired Tone (Optional):** (e.g., professional, casual, urgent, informative, friendly). Default will be a context-aware professional but friendly tone.
6.  **Specific Formatting (Optional):** Any platform-specific formatting desired? (e.g., "use bullet points for the list," "bold the deadline," "include a thread link").
7.  **Call to Action (Optional):** What should recipients do? (e.g., "thoughts?", "please review," "let me know if you have questions").

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the platform (if specified), context, recipient/channel, key information, and any specific tone or formatting requests.
2.  **Draft Message:**
    *   Structure the message for clarity and readability within a chat interface.
    *   Use appropriate language for the specified platform and context.
    *   If a platform like Slack or Discord is mentioned, incorporate common conventions:
        *   Use `@mention` for specific users if names are provided.
        *   Use `#channel` for channel references.
        *   Consider using formatting like `*bold*`, `_italics_`, `` `code` ``, or ` ```code block``` ` if appropriate for the content and platform.
        *   Use bullet points (`* item` or `- item`) or numbered lists for clarity when presenting multiple items.
    *   Incorporate the key information effectively.
    *   Ensure the call to action is clear.
3.  **Review for Platform Conventions:** If a platform was specified, double-check if the drafted message aligns with its common usage patterns.
4.  **Offer Alternatives (If Complex):** For messages with multiple formatting options or tones, Cline might suggest a primary version and a slight alternative.

## Example Output Structure/Format
**Scenario:** User wants to post an update to a project channel in Slack.
*   **User Input:**
    *   Platform: Slack
    *   Context: Update on Feature X development.
    *   Channel: `#project-phoenix`
    *   Key Information: UI components for Feature X are complete. Backend integration is next. Blocked by API key for staging environment. ETA for UI completion was today.
    *   Desired Tone: Informative, slightly urgent regarding the blocker.
    *   Call to Action: `@devops-team` can someone provide the API key for staging?

*   **Cline Generated Slack Message:**
    "Hi team in `#project-phoenix`! 👋\n\nQuick update on Feature X:\n*   All UI components are now complete and meet today's ETA. ✅\n*   Next up is backend integration.\n*   **BLOCKER:** We're currently blocked on backend work pending the API key for the staging environment.\n\n`@devops-team` could you please assist with providing the API key for staging when you get a chance? Thanks! 🙏"

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Generic Instant Messenger Prompt"
path: "prompts/use_cases/communication-and-messaging/generic-instant-messenger-prompt.md"
type: "use_case_guide"
description: "Generates versatile instant messages for platforms like Slack, Discord, etc., adapting to context, tone, and platform-specific formatting."
triggers: ["instant message", "draft IM", "slack message", "discord message", "chat message"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/communication-and-messaging/signal-message-generation.md
-----------------
# Objective
To generate appropriate Signal messages, considering its emphasis on privacy and security, which might influence the tone and content for sensitive communications or professional interactions where security is a priority.

## User Input Requirements
The user needs to provide:
1.  **Context/Purpose:** What is the reason for the message? (e.g., sharing sensitive information, secure coordination, professional communication).
2.  **Recipient(s):** Who is the message for? (e.g., a colleague, a client, a group for secure discussion). This helps determine the tone and level of formality.
3.  **Key Information:** What essential details must be included in the message?
4.  **Desired Tone (Optional):** (e.g., formal, direct, discreet, professional). If not specified, a generally direct and slightly more formal tone than WhatsApp will be used, acknowledging the platform's nature.
5.  **Sensitivity Level (Optional):** (e.g., "highly sensitive," "confidential," "standard"). This can influence phrasing to be more cautious or direct.
6.  **Call to Action (Optional):** Is there anything specific the recipient should do? (e.g., confirm receipt, acknowledge, provide specific feedback securely).

## Cline's Workflow/Guidance
1.  **Analyze Input:** Understand the context, recipient, key information, desired tone, and sensitivity level.
2.  **Draft Message:**
    *   Prioritize clarity and directness.
    *   Use language appropriate for the recipient and the sensitivity of the information.
    *   Avoid overly casual slang or emojis if the context is professional or sensitive, unless explicitly requested.
    *   Incorporate the key information concisely and accurately.
    *   If the information is sensitive, consider phrasing that minimizes risk if the message were inadvertently seen out of context (though Signal's E2EE is the primary protection).
    *   If a call to action is specified, ensure it is unambiguous.
3.  **Consider Security Implications (Subtly):** While Cline doesn't manage encryption, the language can reflect an understanding of secure communication practices (e.g., "Please confirm receipt via Signal," "Let's discuss further on our secure call.").
4.  **Review for Precision:** Ensure the message is precise and conveys the intended meaning without ambiguity, especially if dealing with sensitive or technical details.

## Example Output Structure/Format
**Scenario:** User wants to send a project update with a sensitive attachment link to a client via Signal.
*   **User Input:**
    *   Context: Share project update and link to a secure document.
    *   Recipient: Ms. Evans (client).
    *   Key Information: Project Alpha milestone 1 is complete. The detailed report is available at [secure_link]. Please review by EOD Tuesday.
    *   Tone: Professional, direct.
    *   Sensitivity: Confidential.

*   **Cline Generated Signal Message:**
    "Dear Ms. Evans, This message is to confirm that Milestone 1 for Project Alpha has been successfully completed. The detailed progress report is now available for your review at the following secure link: [secure_link]. We would appreciate your feedback by end of day, Tuesday. Please confirm receipt of this message. Best regards."

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Signal Message Generation"
path: "prompts/use_cases/communication-and-messaging/signal-message-generation.md"
type: "use_case_guide"
description: "Generates Signal messages, considering privacy, security, and appropriate tone for sensitive or professional communication."
triggers: ["signal message", "draft signal", "write secure message", "signal text"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/sdk-documentation.md
-----------------
# Use Case Definition: Software Development Kit (SDK) Documentation

**Objective:** To create comprehensive documentation for a Software Development Kit (SDK), enabling developers to effectively understand, integrate, and utilize the SDK in their own applications.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Completeness:**
    *   All public classes, functions, methods, properties, and events of the SDK are documented.
    *   Parameters, return types, and exceptions are accurately described.
    *   Installation and setup instructions are correct and cover common environments.
*   **Clarity & Understandability:**
    *   Documentation is clear and easy for developers to follow.
    *   Explains concepts, architecture (high-level), and usage patterns.
*   **Actionable Code Examples:**
    *   Provides practical, runnable code examples for key functionalities and common use cases in the SDK's target language(s).
*   **Task-Oriented Guides & Tutorials:**
    *   Includes "Getting Started" guides and tutorials for common tasks to help developers quickly become productive.
*   **API Reference:**
    *   A detailed reference section for all public components of the SDK.
*   **Conceptual Explanations:**
    *   Explains the "why" behind certain design choices or features, not just the "how."
*   **Ease of Navigation:**
    *   Well-structured with clear organization (e.g., by module, by functionality), searchability (conceptual), and linking between related topics.
*   **Up-to-Date:**
    *   Reflects the current version of the SDK.

## 2. Key Stages & Processes Involved

1.  **Understand SDK Architecture & Functionality:**
    *   Thoroughly review the SDK's source code, design documents, and intended use cases.
    *   Identify all public interfaces, modules, classes, functions, etc.
2.  **Define Target Developer Audience:**
    *   Who will be using this SDK? What is their typical skill level and familiarity with the underlying technology?
3.  **Outline Documentation Structure:**
    *   Plan main sections:
        *   Introduction/Overview (Purpose of SDK, key features)
        *   Getting Started (Installation, setup, first steps)
        *   Core Concepts (Explanation of key architectural ideas or components)
        *   Guides/Tutorials (Task-based walkthroughs)
        *   API Reference (Detailed documentation of each public element)
        *   Code Examples (More extensive examples, if not embedded in guides)
        *   Troubleshooting/FAQ
        *   Changelog/Release Notes
4.  **Write Installation & Setup Guide:**
    *   Provide clear, step-by-step instructions for installing and configuring the SDK in common development environments.
5.  **Develop Conceptual Documentation:**
    *   Explain the SDK's architecture, main components, and how they work together.
6.  **Create Task-Oriented Guides/Tutorials:**
    *   Write step-by-step guides for achieving common tasks using the SDK. Include code snippets.
7.  **Generate API Reference Documentation:**
    *   For each public class, function, method, property, enum, etc.:
        *   Brief summary of its purpose.
        *   Signature (parameters with types and descriptions, return type with description).
        *   Detailed explanation of behavior.
        *   Potential exceptions or error conditions.
        *   Short code example of usage.
    *   (This can often be partially automated using code documentation tools like Javadoc, Doxygen, Sphinx, TypeDoc, etc. AI can help generate the descriptive text).
8.  **Write Comprehensive Code Examples:**
    *   Develop standalone, runnable examples that showcase key features and common integration patterns.
9.  **Add Troubleshooting & FAQ Sections:**
    *   Address common problems developers might encounter.
10. **Review for Accuracy, Clarity, and Completeness:**
    *   Verify all information against the SDK. Test code examples.
    *   Have other developers review the documentation for usability.

## 3. Inputs Required from User/System

*   **SDK Source Code (Essential):** Or at least detailed specifications of all public interfaces.
*   **Target Programming Language(s) of the SDK:**
*   **Overview of SDK Purpose & Key Features:**
*   **Installation/Setup Procedures:**
*   **Common Use Cases & Tasks the SDK is Designed For:**
*   **Target Developer Audience Profile:**
*   **Any Existing (even partial) Documentation or Developer Notes:**
*   **Desired Documentation Format/Platform (Optional):** (e.g., "Markdown for Docusaurus," "content for ReadMe.com").

## 4. Potential Challenges & Considerations

*   **Keeping Documentation Synchronized with Code Changes:** A constant challenge. Automation (e.g., generating API reference from code comments) is crucial.
*   **Explaining Complex Concepts Simply:**
*   **Anticipating Developer Needs & Questions:**
*   **Maintaining Consistency Across a Large API Surface:**
*   **Providing Useful Code Examples for Diverse Scenarios:**
*   **Versioning:** Clearly documenting changes between SDK versions.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy & Technical Correctness:** Is the documentation a reliable reflection of the SDK?
*   **Completeness:** Does it cover all public aspects of the SDK needed by developers?
*   **Clarity & Understandability:** Can developers easily grasp how to use the SDK?
*   **Effectiveness of Guides & Examples:** Do they enable developers to quickly integrate and use the SDK?
*   **Navigability:** Can developers find the information they need efficiently?
*   **Reduction in SDK-Related Support Questions (Indirect):** Good documentation should empower developers to solve problems themselves.
*   **Developer Onboarding Time (Indirect):** Effective SDK documentation should shorten the time it takes for a new developer to become proficient with the SDK.

## 6. Example Output Structure/Format
**Scenario:** User needs a part of the API reference for a Python SDK class `ImageProcessor`.
*   **User Input:**
    *   SDK Language: Python
    *   Class: `ImageProcessor`
    *   Method: `resize(self, new_width, new_height, interpolation_method="bilinear")`
    *   Method Description: Resizes an image to the specified dimensions using a chosen interpolation method.
    *   Parameters:
        *   `new_width` (int): Target width in pixels.
        *   `new_height` (int): Target height in pixels.
        *   `interpolation_method` (str, optional): "bilinear" (default) or "bicubic".
    *   Returns: A new `Image` object with the resized image.
    *   Raises: `ValueError` if dimensions are non-positive.

*   **Cline Generated API Reference Snippet:**

    ---
    ### Class: `ImageProcessor`

    Provides methods for image manipulation.

    #### Method: `resize()`

    `resize(self, new_width, new_height, interpolation_method="bilinear")`

    Resizes the currently loaded image to the specified `new_width` and `new_height`.

    **Parameters:**

    *   `new_width` (int):
        The target width for the resized image in pixels. Must be a positive integer.
    *   `new_height` (int):
        The target height for the resized image in pixels. Must be a positive integer.
    *   `interpolation_method` (str, optional):
        The algorithm used for resizing. Defaults to `"bilinear"`.
        Accepted values:
        *   `"bilinear"`: Bilinear interpolation.
        *   `"bicubic"`: Bicubic interpolation (often higher quality but slower).

    **Returns:**

    *   `Image`: A new `Image` object containing the resized image data. The original `ImageProcessor` object's image remains unchanged.

    **Raises:**

    *   `ValueError`: If `new_width` or `new_height` are less than or equal to zero.

    **Example:**

    ```python
    # Assuming 'processor' is an instance of ImageProcessor with an image loaded
    try:
        resized_image = processor.resize(800, 600, interpolation_method="bicubic")
        resized_image.save("resized_photo.jpg")
        print("Image resized and saved successfully.")
    except ValueError as e:
        print(f"Error resizing image: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    ```
    ---

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Software Development Kit (SDK) Documentation"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/sdk-documentation.md"
type: "use_case_guide"
description: "Creates comprehensive documentation for SDKs, including setup, concepts, guides, API reference, and examples."
triggers: ["sdk documentation", "document software kit", "sdk guide", "api client library docs", "developer kit documentation"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/knowledge-base-article-creation.md
-----------------
# Use Case Definition: Knowledge Base Article Creation

**Objective:** To create clear, concise, and informative articles for a knowledge base, addressing specific user questions, problems, or tasks related to a product, service, or topic.

## 1. Core Requirements & Quality Indicators

*   **Problem/Solution Focused:**
    *   Clearly addresses a specific question, issue, or task that a user might have.
    *   Provides a clear solution, explanation, or set of instructions.
*   **Accuracy & Up-to-Date Information:**
    *   Content is technically accurate and reflects the current state of the product/service.
*   **Clarity & Simplicity:**
    *   Written in clear, easy-to-understand language, avoiding unnecessary jargon.
    *   Steps or explanations are straightforward.
*   **Actionability:**
    *   If instructional, provides clear, step-by-step guidance that users can follow.
*   **Conciseness:**
    *   Gets straight to the point and provides necessary information efficiently.
*   **Discoverability (Keywords & Titling):**
    *   Article title and content use keywords that users are likely to search for when encountering the problem or seeking the information.
*   **Proper Formatting & Structure:**
    *   Uses headings, subheadings, bullet points, numbered lists, and bold text to improve readability and scannability.
    *   May include (or suggest inclusion of) screenshots or diagrams where helpful.
*   **Completeness (for the specific issue):**
    *   Provides all necessary information for the user to understand or resolve the specific issue addressed by the article.
*   **Linking to Related Articles (if applicable):**
    *   May suggest links to other relevant knowledge base articles for further information or related issues.

## 2. Key Stages & Processes Involved

1.  **Identify User Need/Problem:**
    *   What specific question, problem, or task will this article address? (This often comes from support tickets, FAQs, user feedback, or product updates).
2.  **Research & Gather Information:**
    *   Collect all necessary factual information, technical details, and procedural steps related to the topic.
3.  **Define Target Audience for the Article:**
    *   Consider the user's likely technical proficiency and prior knowledge.
4.  **Outline Article Structure:**
    *   **Title:** Clear, concise, and keyword-rich. Often phrased as a question or "How to..."
    *   **Introduction/Problem Statement:** Briefly state the issue or question the article addresses.
    *   **Solution/Explanation/Steps:** Provide the core information or instructions.
    *   **Additional Information/Tips (Optional):**
    *   **Related Articles/Resources (Optional):**
5.  **Draft the Content:**
    *   Write clearly and directly.
    *   Use step-by-step instructions for procedures.
    *   Explain any necessary technical terms.
6.  **Incorporate Keywords Naturally:**
    *   Include terms that users would search for.
7.  **Format for Readability:**
    *   Use headings, lists, bold text, etc.
    *   Suggest where screenshots or visuals would be beneficial.
8.  **Review for Accuracy, Clarity, and Completeness:**
    *   Verify all technical information and steps.
    *   Ensure the article fully addresses the intended question/problem.
    *   Proofread for errors.
9.  **Add Metadata (Tags/Categories):**
    *   Assign relevant tags or categories to help with organization and searchability within the knowledge base.

## 3. Inputs Required from User/System

*   **Topic/Problem/Question for the Article:**
*   **Target Audience (e.g., end-users, developers, beginners, advanced users):**
*   **Key Information, Steps, or Solutions to Include:**
*   **Product/Service/Feature the Article Pertains To:**
*   **Relevant Keywords (Optional):**
*   **Any Existing Related Documentation or Internal Notes:**
*   **Desired Tone (e.g., formal, friendly, technical):**

## 4. Potential Challenges & Considerations

*   **Keeping Articles Up-to-Date:** As products/services evolve, knowledge base articles need regular review and updates.
*   **Anticipating All User Questions/Variations:** It's hard to cover every possible scenario.
*   **Balancing Detail with Simplicity:** Providing enough information without overwhelming the user.
*   **Discoverability:** Ensuring users can find the right article when they need it.
*   **Consistency Across Articles:** Maintaining a consistent style, tone, and format across the entire knowledge base.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Understandability:** Can users easily understand the information provided?
*   **Problem Resolution (Indirect):** Does the article effectively help users solve the specific problem or answer their question?
*   **Accuracy:** Is the technical information correct?
*   **Completeness (for the specific topic):** Does it provide all necessary details for the issue at hand?
*   **Actionability:** If it's a how-to, are the steps clear and easy to follow?
*   **Findability (Title & Keywords):** Is the title descriptive and likely to match user search queries?
*   **Readability & Formatting:** Is the article well-structured and easy to scan?

## 6. Example Output Structure/Format
**Scenario:** User needs a knowledge base article on how to reset a password for "AppX."
*   **User Input:**
    *   Topic: How to reset password for AppX.
    *   Product: AppX
    *   Target Audience: End-users.
    *   Key Steps: Go to login page, click "Forgot Password," enter email, receive reset link, create new password.

*   **Cline Generated Knowledge Base Article:**

    ---
    **Title:** How to Reset Your AppX Password

    **Applies to:** AppX User Accounts

    **Last Updated:** {{CURRENT_DATE_YYYY_MM_DD}}

    ---

    If you've forgotten your password for AppX, you can easily reset it by following these steps:

    1.  **Navigate to the Login Page:**
        *   Open your web browser and go to the AppX login page (e.g., `https://appx.example.com/login`).

    2.  **Click "Forgot Password":**
        *   On the login form, locate and click the link that says "Forgot Password?" or "Reset Password." This is usually found below the password input field.
        *   *(Suggested Screenshot: Login page with "Forgot Password?" link highlighted)*

    3.  **Enter Your Email Address:**
        *   You will be prompted to enter the email address associated with your AppX account.
        *   Type your email address into the field and click "Submit" or "Send Reset Link."
        *   *(Suggested Screenshot: Email input field for password reset)*

    4.  **Check Your Email:**
        *   AppX will send a password reset link to the email address you provided. This email usually arrives within a few minutes.
        *   **Important:** If you don't see the email in your inbox, please check your spam or junk folder.
        *   The email will contain a unique link to reset your password. Click on this link.

    5.  **Create a New Password:**
        *   The link will take you to a page where you can create a new password for your AppX account.
        *   Enter your new password in the designated fields. Ensure it meets any stated complexity requirements (e.g., minimum length, use of numbers or special characters).
        *   Confirm your new password by typing it again.
        *   Click "Save Password" or "Reset Password."
        *   *(Suggested Screenshot: New password creation form)*

    6.  **Login with Your New Password:**
        *   Once your password has been successfully reset, you can return to the AppX login page and sign in with your email address and your new password.

    **Troubleshooting:**

    *   **Didn't receive the reset email?** Double-check your spam/junk folder. Ensure you entered the correct email address associated with your account. If you still don't receive it after 15-20 minutes, try the "Forgot Password" process again or contact AppX support.
    *   **Reset link expired?** Password reset links are often time-sensitive. If the link has expired, you'll need to restart the "Forgot Password" process.

    **Related Articles:**
    *   [[How to Change Your AppX Email Address]]
    *   [[Securing Your AppX Account]]

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Knowledge Base Article Creation"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/knowledge-base-article-creation.md"
type: "use_case_guide"
description: "Creates clear, concise articles for knowledge bases, addressing specific user questions or problems."
triggers: ["knowledge base article", "write help document", "create faq entry", "how-to guide for product", "troubleshooting article"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/tutorial-how-to-guide.md
-----------------
# Use Case Definition: Tutorial & How-To Guide Creation

**Objective:** To create instructional content that guides a user step-by-step through a specific task, process, or the usage of a feature, enabling them to learn and perform the task successfully.

## 1. Core Requirements & Quality Indicators

*   **Clear Goal/Objective:**
    *   The tutorial has a clearly stated learning objective or task outcome.
*   **Logical Step-by-Step Structure:**
    *   Instructions are broken down into a clear, logical sequence of manageable steps.
*   **Action-Oriented Instructions:**
    *   Each step clearly describes an action the user needs to take. Uses imperative verbs.
*   **Clarity & Simplicity:**
    *   Language is simple, direct, and easy for the target audience to understand.
    *   Avoids jargon or explains it if necessary.
*   **Accuracy & Correctness:**
    *   All steps and information provided are technically accurate and up-to-date.
*   **Completeness:**
    *   Includes all necessary information, prerequisites, and resources needed to complete the task.
*   **Visual Aids (Suggestions for):**
    *   Suggests where screenshots, diagrams, or code snippets would enhance understanding.
*   **Expected Outcomes/Verification:**
    *   Clearly describes what the user should expect to see or achieve after completing each step or the entire tutorial.
    *   May include verification steps.
*   **Troubleshooting/Common Issues (Optional but helpful):**
    *   May address common problems users might encounter and how to resolve them.
*   **Context & Prerequisites:**
    *   Clearly states any prior knowledge, software, or setup required before starting the tutorial.

## 2. Key Stages & Processes Involved

1.  **Define Tutorial Goal & Target Audience:**
    *   What specific skill or task will the user learn?
    *   Who is the tutorial for (e.g., beginner, intermediate, advanced)? What is their existing knowledge?
2.  **Break Down the Task into Core Steps:**
    *   Identify all the major actions and sub-actions required to complete the task from start to finish.
    *   Arrange steps in a logical, chronological order.
3.  **Gather Necessary Information & Assets:**
    *   Collect all technical details, commands, code snippets, and identify where visuals (screenshots, diagrams) would be needed.
4.  **Write an Introduction:**
    *   State the tutorial's objective.
    *   List any prerequisites.
    *   Briefly outline what the user will accomplish.
5.  **Draft Each Step:**
    *   Start each step with a clear action verb.
    *   Provide concise instructions for that action.
    *   Explain the "why" behind a step if it's not obvious.
    *   Describe the expected result of the step.
6.  **Incorporate Visual Cues & Code Snippets:**
    *   Indicate where screenshots or diagrams should be placed.
    *   Format code snippets clearly and ensure they are correct.
7.  **Add Explanations & Context:**
    *   Provide brief explanations for concepts or tools as they are introduced.
8.  **Write a Conclusion/Summary:**
    *   Recap what the user has learned or accomplished.
    *   Suggest next steps or further learning resources.
9.  **Include Troubleshooting/FAQ (Optional):**
    *   Anticipate common problems and provide solutions.
10. **Review & Test (Walkthrough):**
    *   Follow the tutorial steps exactly as written to ensure accuracy, clarity, and completeness. (AI can simulate this by reviewing logic).
    *   Have someone from the target audience test the tutorial if possible.
    *   Proofread for errors.

## 3. Inputs Required from User/System

*   **Task or Process to be Taught:**
*   **Target Audience & Their Assumed Skill Level:**
*   **Specific Software, Tool, or Feature Being Used:**
*   **Key Steps or Workflow (if already partially defined by user):**
*   **Desired Outcome for the User:** What should they be able to do after the tutorial?
*   **Any Specific Points to Emphasize or Avoid:**
*   **Preferred Format (e.g., blog post, knowledge base article, video script outline):**
*   **Code Snippets or Commands to be Included (if available):**

## 4. Potential Challenges & Considerations

*   **Assuming Prior Knowledge:** Incorrectly gauging the target audience's existing knowledge.
*   **Missing Steps:** Overlooking small but crucial steps that are obvious to an expert but not to a beginner.
*   **Lack of Clarity:** Using ambiguous language or unclear instructions.
*   **Outdated Information:** Tutorials can quickly become outdated if the software or process changes.
*   **Overwhelming Detail:** Providing too much information at once.
*   **Insufficient Visuals:** Text-only tutorials for visual tasks can be hard to follow.

## 5. Metrics for Success (How to Evaluate Output)

*   **Task Completion Rate (Indirect):** Can users successfully complete the task by following the tutorial?
*   **Clarity & Understandability:** Are the instructions easy to follow?
*   **Accuracy:** Are all steps and technical details correct?
*   **Completeness:** Does it include all necessary information?
*   **Actionability:** Are the steps clear and direct?
*   **Efficiency:** Can users learn or perform the task relatively quickly using the guide?
*   **User Confidence:** Does the tutorial empower the user and build their confidence?
*   **Reduction in Support/Help Requests (Indirect):**

## 6. Example Output Structure/Format
**Scenario:** User wants a tutorial on how to create a new Git branch and push it to a remote repository.
*   **User Input:**
    *   Task: Create a new Git branch, make a commit, and push it to GitHub.
    *   Target Audience: Beginner Git users.
    *   Tools: Git command line, GitHub.

*   **Cline Generated Tutorial (Excerpt):**

    ---
    **Title: How to Create and Push a New Git Branch to GitHub**

    This tutorial will guide you through the process of creating a new branch in your local Git repository, making changes, committing them, and then pushing the new branch to your remote repository on GitHub.

    **Prerequisites:**
    *   Git installed on your computer.
    *   An existing local Git repository connected to a remote GitHub repository.
    *   Basic understanding of Git concepts (commit, repository).

    **Steps:**

    1.  **Navigate to Your Local Repository:**
        *   Open your terminal or command prompt.
        *   Use the `cd` command to navigate into the directory of your local Git project.
            ```bash
            cd path/to/your/project
            ```

    2.  **Ensure Your Main Branch is Up-to-Date (Optional but Recommended):**
        *   It's good practice to start new branches from an up-to-date main branch (often called `main` or `master`).
            ```bash
            git checkout main
            git pull origin main
            ```

    3.  **Create a New Branch:**
        *   Use the `git checkout -b` command followed by your desired branch name. This command creates the new branch and immediately switches you to it.
            *Example: To create a branch named `feature/new-login-page`*
            ```bash
            git checkout -b feature/new-login-page
            ```
        *   *Verification:* You can confirm you are on the new branch by typing `git branch`. The current branch will have an asterisk (*) next to it.

    4.  **Make Your Code Changes:**
        *   Work on your files as usual. Add new files, modify existing ones, etc., for the feature or fix you are working on.

    5.  **Stage Your Changes:**
        *   Once you've made your changes, you need to "stage" them for commit. This tells Git which changes you want to include in the next commit.
            *To stage all changes:*
            ```bash
            git add .
            ```
            *To stage a specific file:*
            ```bash
            git add path/to/your/file.txt
            ```

    6.  **Commit Your Changes:**
        *   Commit your staged changes with a descriptive message.
            ```bash
            git commit -m "Implement new login page design"
            ```

    7.  **Push the New Branch to GitHub:**
        *   The first time you push a new local branch, you need to tell Git which remote repository and remote branch to push to. The `-u` (or `--set-upstream`) option sets up tracking for future pushes.
            ```bash
            git push -u origin feature/new-login-page
            ```
            *(Replace `feature/new-login-page` with your actual branch name).*
        *   For subsequent pushes on this branch, you can simply use `git push`.

    8.  **Verify on GitHub:**
        *   Open your repository on GitHub in a web browser. You should see a notification about your recently pushed branch, often with an option to create a Pull Request.

    **Congratulations!** You've successfully created a new branch, committed changes, and pushed it to GitHub.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Tutorial & How-To Guide Creation"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/tutorial-how-to-guide.md"
type: "use_case_guide"
description: "Creates step-by-step instructional content to guide users through a specific task, process, or feature usage."
triggers: ["create tutorial", "how-to guide", "step-by-step instructions", "write a guide for", "product tutorial"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/release-notes-changelog.md
-----------------
# Use Case Definition: Release Notes & Changelog Generation

**Objective:** To generate clear, concise, and informative release notes or a changelog for a software product, detailing new features, improvements, bug fixes, and any breaking changes in a specific version or release.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Completeness:**
    *   All significant changes (new features, bug fixes, improvements, deprecations, breaking changes) for the release are included.
    *   Information is technically accurate.
*   **Clarity & Conciseness:**
    *   Written in clear, easy-to-understand language.
    *   Avoids excessive jargon or overly technical descriptions unless the target audience is highly technical.
    *   Highlights the most important changes for users.
*   **User-Centric Language:**
    *   Focuses on the benefits and impact of changes from the user's perspective.
    *   Explains "what's in it for them."
*   **Structured Format:**
    *   Organized logically, typically by category (e.g., New Features, Improvements, Bug Fixes, Breaking Changes).
    *   Uses headings, bullet points, and consistent formatting for readability.
*   **Actionable Information (if applicable):**
    *   If there are breaking changes or actions users need to take, these are clearly communicated.
    *   May link to more detailed documentation or migration guides.
*   **Version Specificity:**
    *   Clearly indicates the product version to which the notes apply.
*   **Tone Appropriateness:**
    *   Maintains a professional and informative tone, appropriate for the product and company.

## 2. Key Stages & Processes Involved

1.  **Gather Information about Changes:**
    *   Collect data from commit logs, issue trackers (e.g., Jira, GitHub Issues), pull requests, developer notes, and product management specifications.
2.  **Categorize Changes:**
    *   Group changes into logical categories:
        *   `New Features` or `Added`
        *   `Improvements` or `Changed`
        *   `Bug Fixes` or `Fixed`
        *   `Deprecated` (features planned for removal)
        *   `Removed` (features removed in this version)
        *   `Security` (security-related fixes)
        *   `Breaking Changes` (critical for users to know)
3.  **Write Descriptions for Each Change:**
    *   For each item, write a brief, clear description of the change and its impact or benefit to the user.
    *   Link to relevant issue numbers or pull requests if appropriate (common in changelogs).
4.  **Highlight Key Features/Changes:**
    *   If there are major new features or significant improvements, give them more prominence.
5.  **Draft Introduction & Conclusion (Optional):**
    *   A brief introduction summarizing the release.
    *   A concluding remark, perhaps pointing to future plans or where to get support.
6.  **Structure and Format:**
    *   Organize the notes with clear headings for each category.
    *   Use bullet points for individual items within categories.
    *   Ensure consistent formatting.
7.  **Review for Accuracy, Clarity, and Completeness:**
    *   Verify that all significant changes are included and accurately described.
    *   Check for clarity and conciseness.
    *   Proofread for typos and grammatical errors.
8.  **Add Version Number and Release Date:**

## 3. Inputs Required from User/System

*   **List of Changes:** This is the primary input. It can be a list of commit messages, issue tracker tickets, pull request summaries, or a manually compiled list of features/fixes.
*   **Product Name and Version Number:**
*   **Release Date:**
*   **Previous Version Number (for comparison, if generating a diff-like changelog):**
*   **Target Audience:** (e.g., end-users, developers, internal team).
*   **Desired Format/Style:** (e.g., formal release notes, developer-focused changelog, marketing-oriented announcement).
*   **Categorization Scheme (if specific preferences exist):**
*   **Links to Issue Tracker/PRs (Optional, for changelogs):**

## 4. Potential Challenges & Considerations

*   **Gathering Comprehensive Change Information:** Ensuring no significant changes are missed, especially in large projects.
*   **Translating Technical Changes into User Benefits:** Explaining the value of changes in a way users understand.
*   **Handling Breaking Changes:** Communicating these clearly and providing guidance for users.
*   **Consistency in Detail and Tone:** Maintaining a uniform style across all entries.
*   **Timeliness:** Release notes should be available at the time of release.
*   **Audience Variation:** Different audiences (technical vs. non-technical) may need different levels of detail or different language.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy & Completeness:** Are all important changes for the version included and correctly described?
*   **Clarity:** Can users easily understand what has changed and how it affects them?
*   **Usefulness:** Do the notes provide valuable information to users about the new release?
*   **Organization & Readability:** Is the information well-structured and easy to scan?
*   **Actionability:** If actions are required from users (e.g., for breaking changes), are these clearly communicated?
*   **Professionalism:** Do the notes reflect positively on the product and company?

## 6. Example Output Structure/Format
**Scenario:** User needs release notes for version 1.2.0 of "PhotoMagicApp."
*   **User Input:**
    *   Product: PhotoMagicApp
    *   Version: 1.2.0
    *   Release Date: {{CURRENT_DATE_YYYY_MM_DD}}
    *   Changes:
        *   New: Added "Vintage Film" filter pack. (Issue #101)
        *   Improved: Faster image processing for large RAW files. (Issue #105)
        *   Fixed: Crash when applying "Sharpen" filter to panoramic images. (Issue #98)
        *   Fixed: Incorrect color balance on some imported HEIC files. (Issue #102)
        *   Security: Addressed a vulnerability in the image metadata parser. (Issue #110)

*   **Cline Generated Release Notes:**

    ---
    **PhotoMagicApp - Version 1.2.0 Release Notes**

    **Release Date:** {{CURRENT_DATE_YYYY_MM_DD}}

    We're excited to announce the release of PhotoMagicApp version 1.2.0! This update brings new creative options, performance enhancements, and important bug fixes.

    **✨ New Features**
    *   **Vintage Film Filter Pack:** Explore a new collection of stunning vintage film filters to give your photos a classic, nostalgic look. (Related to #101)

    **🚀 Improvements**
    *   **Enhanced RAW File Processing:** Experience significantly faster processing speeds when working with large RAW image files, getting you to your edits quicker. (Related to #105)

    **🐞 Bug Fixes**
    *   Fixed an issue that could cause the application to crash when applying the "Sharpen" filter to panoramic images. (Related to #98)
    *   Resolved a problem where incorrect color balance was sometimes applied to imported HEIC files. (Related to #102)

    **🔒 Security**
    *   Addressed a security vulnerability related to the parsing of image metadata. We recommend all users update to ensure the security of their application. (Related to #110)

    ---
    Thank you for using PhotoMagicApp! We're always working to improve your photo editing experience. For feedback or support, please visit our community forum or contact our support team.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Release Notes & Changelog Generation"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/release-notes-changelog.md"
type: "use_case_guide"
description: "Generates release notes or changelogs for software, detailing new features, fixes, and changes for a specific version."
triggers: ["release notes", "changelog generation", "software update notes", "what's new in version", "product update summary"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/tutorial-how-to-guide-writing.md
-----------------
# Use Case Definition: Tutorial & How-To Guide Writing

**Objective:** To create clear, step-by-step instructional content that guides a user through a specific task, process, or the use of a particular feature, enabling them to achieve a defined outcome successfully.

## 1. Core Requirements & Quality Indicators

*   **Clear Goal/Outcome:**
    *   The tutorial has a well-defined objective that the user will achieve by following the steps.
*   **Actionable, Sequential Steps:**
    *   Instructions are broken down into a logical sequence of clear, actionable steps.
    *   Each step is easy to follow and understand.
*   **Accuracy & Correctness:**
    *   All instructions, commands, code snippets, and descriptions are technically accurate and lead to the desired result.
*   **Completeness:**
    *   Includes all necessary prerequisites, steps, and information required to complete the task.
    *   Doesn't assume prior knowledge that the target audience may not possess (unless explicitly stated).
*   **Clarity & Simplicity:**
    *   Uses plain language, avoiding jargon where possible or explaining it clearly.
    *   Focuses on the task at hand without unnecessary digressions.
*   **Visual Cues/Formatting:**
    *   Effectively uses formatting (headings, numbered lists, bold text, code blocks) to enhance readability and guide the user.
    *   Suggests where screenshots or diagrams would be beneficial.
*   **Verification/Expected Results:**
    *   May include information on how users can verify they have completed a step correctly or what the expected outcome should look like.
*   **Troubleshooting (Optional but helpful):**
    *   May anticipate common problems users might encounter and offer solutions.
*   **Target Audience Appropriateness:**
    *   Language, level of detail, and assumed knowledge are appropriate for the intended audience (e.g., beginner, intermediate, advanced).

## 2. Key Stages & Processes Involved

1.  **Define Tutorial Objective & Target Audience:**
    *   What specific task will this tutorial teach? What will the user be able to do after completing it?
    *   Who is this tutorial for? What is their current skill level?
2.  **Outline Prerequisite Knowledge/Setup:**
    *   What does the user need to know or have in place before starting the tutorial? (e.g., software installed, specific account, prior concepts understood).
3.  **Break Down the Task into Logical Steps:**
    *   Divide the overall task into a sequence of manageable, chronological steps.
    *   Ensure each step is a distinct action or piece of information.
4.  **Write Clear Instructions for Each Step:**
    *   Start each step with an action verb.
    *   Provide precise details. For UI interactions, specify button names, menu paths. For CLI, provide exact commands.
    *   Explain the purpose or result of each step briefly.
5.  **Incorporate Code Snippets/Commands:**
    *   Provide accurate and complete code examples or commands that users can copy and paste.
    *   Explain what the code/command does.
6.  **Describe Expected Outcomes/Verification Points:**
    *   After key steps, explain what the user should see or how they can confirm success.
7.  **Add Explanations & Conceptual Information (as needed):**
    *   Briefly explain underlying concepts if necessary for understanding the steps, but keep the focus on the "how-to."
8.  **Include Visual Aid Suggestions:**
    *   Identify points where screenshots, diagrams, or videos would significantly aid understanding and describe what they should illustrate.
9.  **Draft Introduction & Conclusion:**
    *   **Introduction:** State the tutorial's goal, target audience, and what they will learn. List prerequisites.
    *   **Conclusion:** Briefly summarize what was accomplished, suggest next steps, or link to further resources.
10. **Add Troubleshooting Tips (Optional):**
    *   Anticipate common issues and provide solutions.
11. **Review & Test:**
    *   Follow the tutorial steps exactly as written to ensure they are accurate, complete, and lead to the desired outcome. (AI can simulate a logical walkthrough).
    *   Have someone from the target audience test it if possible.
    *   Proofread for clarity and errors.

## 3. Inputs Required from User/System

*   **Specific Task or Process to be Taught:**
*   **Target Audience & Their Assumed Skill Level:**
*   **Product, Software, or System the Tutorial is For:**
*   **Key Steps or Workflow (if already partially defined by user):**
*   **Any Specific Commands, Code Snippets, or UI Elements to Reference:**
*   **Desired Outcome for the User Completing the Tutorial:**
*   **Prerequisites (if known):**
*   **Common Pitfalls or Errors to Address (if known):**

## 4. Potential Challenges & Considerations

*   **Assuming Prior Knowledge:** Incorrectly gauging what the target audience already knows.
*   **Missing Steps:** Omitting crucial small steps that are obvious to an expert but not to a beginner.
*   **Outdated Instructions:** Software UIs and commands change, making tutorials obsolete if not maintained.
*   **Clarity of Language:** Explaining technical concepts in simple terms.
*   **Scope Creep:** Trying to cover too much in a single tutorial.
*   **Testing Thoroughness:** Ensuring the tutorial works in various environments or configurations if applicable.

## 5. Metrics for Success (How to Evaluate Output)

*   **Task Completion Rate (Indirect):** Can users successfully complete the task by following the tutorial?
*   **Clarity & Understandability:** Are the instructions easy to follow?
*   **Accuracy:** Are all steps and technical details correct?
*   **Completeness:** Does it include all necessary information and steps?
*   **Efficiency:** Can users achieve the goal relatively quickly using the tutorial?
*   **User Confidence:** Does the tutorial empower users and reduce frustration?
*   **Reduction in Support Requests (Indirect):** Good tutorials should answer common how-to questions.

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/api-documentation-generation.md
-----------------
# Use Case Definition: API Documentation Generation

**Objective:** To generate clear, comprehensive, and accurate documentation for an Application Programming Interface (API), detailing its endpoints, request/response formats, authentication methods, parameters, error codes, and usage examples.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Completeness:**
    *   All public endpoints are documented.
    *   Information about request methods (GET, POST, PUT, DELETE, etc.), parameters, headers, and authentication is correct and complete.
    *   Response formats (e.g., JSON, XML), status codes, and error messages are accurately described.
*   **Clarity & Understandability:**
    *   Documentation is easy for developers to understand, regardless of their familiarity with the API.
    *   Uses clear, concise language and avoids jargon where possible (or explains it).
*   **Actionable Examples:**
    *   Provides practical code examples for common use cases in one or more popular programming languages.
    *   Examples are correct and runnable.
*   **Standardized Format:**
    *   Often follows established API documentation standards or tools (e.g., OpenAPI Specification/Swagger, API Blueprint, Slate, ReadMe.com). AI can generate content suitable for these formats.
*   **Ease of Navigation:**
    *   Well-organized with a clear structure, making it easy for developers to find the information they need (e.g., by endpoint, by resource).
*   **Up-to-Date:**
    *   Documentation accurately reflects the current version and behavior of the API. (AI generates based on provided info; maintenance is key).
*   **Covers Key Aspects:**
    *   **Authentication:** How to authenticate requests.
    *   **Endpoints:** List of all available endpoints with their paths and HTTP methods.
    *   **Request Parameters:** Path parameters, query parameters, request body schema.
    *   **Response Schemas:** Structure of successful responses and error responses.
    *   **Status & Error Codes:** Meaning of different HTTP status codes returned by the API.
    *   **Rate Limiting (if applicable):** Information on usage limits.
    *   **Versioning (if applicable):** How API versions are handled.

## 2. Key Stages & Processes Involved

1.  **Gather API Specifications & Source Code (if available):**
    *   Collect all relevant information about the API: design documents, source code (especially controller/route definitions and data models), existing (even partial) documentation.
2.  **Identify All Endpoints & HTTP Methods:**
    *   List every accessible API endpoint and the HTTP methods it supports.
3.  **Document Each Endpoint:**
    *   For each endpoint:
        *   **Summary/Purpose:** Briefly explain what the endpoint does.
        *   **Path & Method:** (e.g., `GET /users/{id}`).
        *   **Authentication Requirements:**
        *   **Request Parameters:**
            *   Path parameters (e.g., `{id}`): Name, data type, description, required/optional.
            *   Query parameters: Name, data type, description, required/optional.
            *   Request Headers: Name, description, example values.
            *   Request Body: Schema (e.g., JSON object with fields, data types, descriptions), example.
        *   **Responses:**
            *   Success Responses: HTTP status code (e.g., 200 OK, 201 Created), description, response body schema, example.
            *   Error Responses: Possible HTTP status codes (e.g., 400, 401, 404, 500), description, error response body schema, example.
4.  **Document Global Information:**
    *   **Authentication:** Detailed explanation of how to authenticate with the API (e.g., API keys, OAuth 2.0).
    *   **Base URL:**
    *   **Rate Limiting:**
    *   **Versioning Strategy:**
    *   **General Error Handling Principles:**
5.  **Write Code Examples:**
    *   Provide clear, runnable code snippets demonstrating how to call key endpoints in popular languages (e.g., Python, JavaScript, Java, cURL).
6.  **Structure & Organize Documentation:**
    *   Organize by resource, functionality, or endpoint.
    *   Create an overview/introduction.
    *   Ensure easy navigation (e.g., a table of contents, sidebar).
7.  **Review for Accuracy, Clarity, and Completeness:**
    *   Verify all information against the actual API behavior.
    *   Have another developer (or AI in a review role) check for clarity.

## 3. Inputs Required from User/System

*   **API Design Specifications or Source Code:** The most crucial input. This could be OpenAPI specs, controller/route definitions from code, database schemas, etc.
*   **Target Audience for Documentation:** (e.g., internal developers, external partners, public).
*   **List of Programming Languages for Code Examples:**
*   **Authentication Method(s) Used:**
*   **Information about Rate Limiting, Versioning (if applicable):**
*   **Desired Documentation Format/Tool (Optional):** (e.g., "generate Swagger UI compatible JSON," "Markdown for Slate").
*   **Examples of Existing API Documentation Liked by User (Optional):**

## 4. Potential Challenges & Considerations

*   **Keeping Documentation Synchronized with API Changes:** This is a major ongoing challenge. Automated generation from code/specs helps.
*   **Documenting Complex Workflows:** APIs involving multiple chained calls or asynchronous operations can be hard to document clearly.
*   **Technical Accuracy:** Ensuring all parameter names, data types, and response structures are perfectly correct.
*   **Balancing Detail with Simplicity:** Providing enough information without overwhelming the user.
*   **Maintaining Code Examples:** Ensuring examples remain correct as the API or client libraries evolve.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy:** Does the documentation correctly reflect the API's behavior?
*   **Completeness:** Are all necessary aspects (endpoints, params, auth, errors, examples) covered?
*   **Clarity:** Is the documentation easy for a developer to understand and use to integrate with the API?
*   **Actionability of Examples:** Can developers use the code examples to make successful API calls?
*   **Navigability & Organization:** Can information be found quickly?
*   **Adherence to Standards (if specified):** Does it meet OpenAPI or other formatting requirements?
*   **Reduction in Support Questions (Indirect):** Good documentation should reduce the need for developers to ask basic questions about API usage.

## 6. Example Output Structure/Format
**Scenario:** User needs documentation for a `GET /products/{id}` endpoint.
*   **User Input:**
    *   Endpoint: `GET /products/{id}`
    *   Description: Retrieves details for a specific product.
    *   Authentication: API Key in `X-API-KEY` header.
    *   Path Parameter: `id` (integer, required, product's unique identifier).
    *   Successful Response (200 OK): JSON object with `id`, `name`, `description`, `price`.
    *   Error Response (404 Not Found): JSON object with `error`, `message`.
    *   Code Example Language: Python

*   **Cline Generated API Documentation Snippet:**

    ---

    ### Get Product by ID

    Retrieves the details of a specific product identified by its ID.

    **HTTP Request**
    `GET /products/{id}`

    **Authentication**
    Requires an API Key passed in the `X-API-KEY` header.

    **Path Parameters**

    | Parameter | Type    | Required | Description                  |
    | :-------- | :------ | :------- | :--------------------------- |
    | `id`      | Integer | Yes      | The unique identifier of the product. |

    **Responses**

    *   **`200 OK`** - Product details retrieved successfully.
        ```json
        {
          "id": 123,
          "name": "Wireless Noise-Cancelling Headphones",
          "description": "Premium headphones with active noise cancellation and long battery life.",
          "price": 299.99,
          "category": "Electronics"
        }
        ```

    *   **`401 Unauthorized`** - API key is missing or invalid.
        ```json
        {
          "error": "Unauthorized",
          "message": "Valid API key required."
        }
        ```

    *   **`404 Not Found`** - No product found with the specified ID.
        ```json
        {
          "error": "Not Found",
          "message": "Product with ID {id} not found."
        }
        ```

    **Example Request (Python):**
    ```python
    import requests

    api_key = "YOUR_API_KEY"
    product_id = 123
    base_url = "https://api.example.com/v1" # Assuming v1 is part of base URL

    headers = {
        "X-API-KEY": api_key
    }

    response = requests.get(f"{base_url}/products/{product_id}", headers=headers)

    if response.status_code == 200:
        product_data = response.json()
        print("Product Name:", product_data.get("name"))
        print("Price:", product_data.get("price"))
    elif response.status_code == 404:
        print("Error:", response.json().get("message"))
    else:
        print("An error occurred:", response.status_code, response.text)
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "API Documentation Generation"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/api-documentation-generation.md"
type: "use_case_guide"
description: "Generates comprehensive documentation for APIs, including endpoints, requests, responses, auth, and examples."
triggers: ["api documentation", "document rest api", "swagger generation help", "openapi spec writing", "api reference guide"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/sop-writing.md
-----------------
# Use Case Definition: Standard Operating Procedure (SOP) Writing

**Objective:** To create clear, step-by-step instructions for performing a specific routine task or process consistently and correctly, often for operational, safety, or quality assurance purposes.

## 1. Core Requirements & Quality Indicators

*   **Clarity & Unambiguity:**
    *   Instructions are precise, easy to understand, and leave no room for misinterpretation.
    *   Uses simple, direct language.
*   **Accuracy & Correctness:**
    *   All steps are technically correct and reflect the approved method for performing the task.
*   **Completeness:**
    *   Includes all necessary steps, information, materials, and safety precautions required to perform the task successfully.
*   **Sequential Logic:**
    *   Steps are presented in the correct chronological order.
*   **Action-Oriented:**
    *   Instructions are written using clear, imperative verbs (e.g., "Connect," "Verify," "Record").
*   **Consistency:**
    *   Terminology and formatting are consistent with other SOPs within the organization (if applicable).
*   **Safety & Compliance (if applicable):**
    *   Clearly highlights any safety warnings, required personal protective equipment (PPE), or compliance checkpoints.
*   **Testability/Verifiability:**
    *   It should be possible for someone to follow the SOP and achieve the desired, consistent outcome.
*   **Accessibility:**
    *   Formatted for easy reading and quick reference, often using numbered steps, bullet points, and clear headings.

## 2. Key Stages & Processes Involved

1.  **Define Purpose & Scope of the SOP:**
    *   What specific task or process will this SOP cover?
    *   Who is the target audience for this SOP (e.g., new employees, experienced technicians)?
    *   What is the desired outcome of following this SOP?
2.  **Gather Information:**
    *   Consult with subject matter experts (SMEs), observe the process being performed, review existing (even informal) documentation, and identify all necessary tools, materials, and safety equipment.
3.  **Break Down the Process into Sequential Steps:**
    *   Identify every individual action required to complete the task from start to finish.
    *   Ensure steps are in the correct logical order.
4.  **Draft Each Step Clearly:**
    *   Start each step with an action verb.
    *   Be specific and provide necessary details (e.g., "Tighten the bolt to 10 Nm," not just "Tighten the bolt").
    *   Include any decision points or conditional logic (e.g., "If X, then do Y, otherwise do Z").
5.  **Incorporate Safety Warnings & Precautions:**
    *   Clearly identify any hazards associated with each step or the overall process.
    *   Specify required PPE or safety measures.
    *   Use standardized warning symbols or formatting if applicable.
6.  **Add Supporting Information:**
    *   **Purpose:** Why this SOP exists.
    *   **Scope:** What this SOP covers (and doesn't cover).
    *   **Responsibilities:** Who is responsible for performing the task and ensuring compliance.
    *   **Materials/Equipment Needed:** A list of all required items.
    *   **Definitions/Glossary (if needed):** For any specialized terms.
    *   **References (if any):** To other relevant documents or standards.
7.  **Structure & Format the SOP Document:**
    *   Use a standardized template if available.
    *   Employ clear headings, numbered steps, bullet points, and visual cues (bolding, warnings).
    *   Suggest where diagrams or photos would be beneficial.
8.  **Review & Validate with SMEs and Target Users:**
    *   Have experts review for technical accuracy and completeness.
    *   Have representative users try to perform the task using the draft SOP to identify any ambiguities or missing steps. (AI can simulate a clarity review).
9.  **Finalize, Approve, and Distribute:**
    *   Incorporate feedback, get official approval (if required by organizational process), and make the SOP accessible to relevant personnel. Include version control.

## 3. Inputs Required from User/System

*   **Task/Process to be Documented:**
*   **Target Audience for the SOP:** Their experience level and role.
*   **Key Steps Involved (if known by user, or to be determined by AI from process description):**
*   **Required Materials, Tools, or Equipment:**
*   **Known Safety Hazards or Precautions:**
*   **Desired Outcome of the Process:**
*   **Any Existing Informal Instructions or Notes:**
*   **Company SOP Template or Formatting Guidelines (if any):**
*   **Regulatory or Compliance Requirements (if applicable):**

## 4. Potential Challenges & Considerations

*   **Capturing Tacit Knowledge:** SMEs may perform steps automatically without realizing they are part of the process.
*   **Ensuring All Edge Cases/Variations are Covered (or explicitly excluded):**
*   **Keeping SOPs Up-to-Date:** Processes change, and SOPs must be revised accordingly.
*   **User Comprehension:** Writing for a diverse audience with varying literacy or technical skills.
*   **Overly Complex SOPs:** Making the document too long or difficult to follow can reduce compliance.
*   **Lack of Visuals:** Text-only SOPs can be less effective for complex physical tasks.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Understandability:** Can a target user easily understand and follow each step?
*   **Accuracy & Correctness:** Are all steps technically sound and safe?
*   **Completeness:** Does the SOP cover all necessary actions, information, and precautions?
*   **Actionability:** Are the instructions specific and imperative?
*   **Consistency (with other SOPs/standards):**
*   **Task Success Rate (Indirect):** If followed correctly, does the SOP lead to the desired, consistent outcome?
*   **Reduction in Errors/Incidents (Indirect):** Effective SOPs should help reduce mistakes and safety incidents related to the task.
*   **Ease of Use:** Is the SOP well-formatted and easy to reference during task performance?

## 6. Example Output Structure/Format
**Scenario:** User needs an SOP for making a backup of a specific server directory.
*   **User Input:**
    *   Task: Daily backup of `/srv/appdata` on `Server01` to `/mnt/backups/Server01/`.
    *   Audience: Junior System Administrators.
    *   Key Tool: `rsync`.
    *   Retention: Keep 7 daily backups.

*   **Cline Generated SOP (Excerpt):**

    ---
    **Standard Operating Procedure**
    **SOP Number:** OPS-BKUP-001
    **Title:** Daily Backup of AppData on Server01
    **Version:** 1.0
    **Effective Date:** {{CURRENT_DATE_YYYY_MM_DD}}
    **Author:** Cline AI
    ---

    **1. Purpose**
    To ensure a consistent and reliable daily backup of the `/srv/appdata` directory on `Server01`.

    **2. Scope**
    This SOP applies to all Junior System Administrators responsible for routine server backups.

    **3. Responsibilities**
    Junior System Administrators are responsible for executing this SOP daily and verifying successful completion. Senior System Administrators are responsible for reviewing backup logs weekly.

    **4. Materials/Equipment Needed**
    *   Access to a terminal with SSH capabilities.
    *   Credentials for user `backupadmin` on `Server01`.
    *   Access to the backup server where `/mnt/backups/` is located.

    **5. Safety Precautions**
    *   Verify correct server and directory paths before executing commands to prevent accidental data overwrite on the wrong target.

    **6. Procedure**

    *   **6.1. Connect to Server01:**
        1.  Open a terminal window.
        2.  SSH into Server01 as the `backupadmin` user:
            ```bash
            ssh backupadmin@Server01
            ```
    *   **6.2. Prepare Backup Directory:**
        1.  Define today's date for the backup folder name (YYYY-MM-DD format):
            ```bash
            TODAY=$(date +%Y-%m-%d)
            ```
        2.  Define the target backup path:
            ```bash
            TARGET_DIR="/mnt/backups/Server01/$TODAY"
            ```
        3.  Create the target directory if it doesn't exist:
            ```bash
            mkdir -p "$TARGET_DIR"
            ```
    *   **6.3. Perform Backup using rsync:**
        1.  Execute the rsync command:
            ```bash
            rsync -avh --delete /srv/appdata/ "$TARGET_DIR/"
            ```
            *   `-a`: Archive mode (preserves permissions, ownership, timestamps, etc.)
            *   `-v`: Verbose output.
            *   `-h`: Human-readable numbers.
            *   `--delete`: Deletes files in the destination if they no longer exist in the source.
        2.  Monitor the output for any errors.
    *   **6.4. Verify Backup (Basic Check):**
        1.  List the contents of the target directory to ensure files are present:
            ```bash
            ls -lR "$TARGET_DIR" | head -n 20 # Display first 20 lines
            ```
        2.  Compare file counts or sizes if a more thorough check is needed (detailed check SOP may be separate).
    *   **6.5. Log Completion:**
        1.  Record the successful completion (or any errors) in the daily operations log, noting the date and time.
    *   **6.6. Manage Old Backups (Retention Policy):**
        1.  List backup directories older than 7 days:
            ```bash
            find /mnt/backups/Server01/ -mindepth 1 -maxdepth 1 -type d -mtime +7
            ```
        2.  **CAUTION:** Before deleting, verify the list.
        3.  Delete old backup directories (example, verify before running):
            ```bash
            # find /mnt/backups/Server01/ -mindepth 1 -maxdepth 1 -type d -mtime +7 -exec rm -rf {} \;
            ```
            *Note: Automated deletion script is preferred and covered in SOP OPS-BKUP-MGMT-002.*

    **7. References**
    *   SOP OPS-BKUP-MGMT-002: Automated Backup Retention Policy

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Standard Operating Procedure (SOP) Writing"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/sop-writing.md"
type: "use_case_guide"
description: "Creates clear, step-by-step instructions for performing routine tasks consistently and correctly."
triggers: ["write sop", "standard operating procedure", "create procedure document", "task instructions", "process documentation"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/whitepaper-case-study-development.md
-----------------
# Use Case Definition: White Paper & Case Study Development

**Objective:**
*   **White Paper:** To create an authoritative, in-depth report or guide on a complex issue, often presenting a problem and offering a specific solution or perspective, aimed at educating an audience and establishing thought leadership.
*   **Case Study:** To document a real-world example of how a product, service, or methodology was successfully implemented to solve a specific problem for a client or user, showcasing benefits and results.

## 1. Core Requirements & Quality Indicators

*   **For White Papers:**
    *   **Authoritative & Well-Researched:** Content is based on solid research, data, and expert understanding.
    *   **In-Depth Analysis:** Provides a thorough examination of the topic, problem, and proposed solution.
    *   **Persuasive Argumentation (Often):** Clearly articulates a point of view or advocates for a particular approach.
    *   **Educational Value:** Informs and educates the target audience.
    *   **Professional Tone & Structure:** Formal language, logical organization (e.g., Abstract, Introduction, Problem, Solution, Conclusion, References).
    *   **Credibility:** Sources are cited (if applicable), and claims are well-supported.
*   **For Case Studies:**
    *   **Factual & Authentic:** Based on a real customer/user experience and verifiable results.
    *   **Problem/Solution/Result Structure:** Clearly outlines the client's initial challenge, the solution provided, and the measurable outcomes/benefits.
    *   **Compelling Narrative:** Tells an engaging story of success.
    *   **Quantifiable Results:** Includes specific data and metrics to demonstrate impact (e.g., "increased sales by X%," "reduced costs by Y").
    *   **Client Voice (Often):** May include direct quotes or testimonials from the client.
    *   **Relatability:** Potential customers can see themselves in the client's situation and understand how the solution could benefit them.
*   **Common to Both:**
    *   **Clear Target Audience:** Written with a specific reader in mind.
    *   **Professional Presentation:** Well-written, grammatically correct, and properly formatted.

## 2. Key Stages & Processes Involved

*   **For White Papers:**
    1.  **Define Topic, Objective, and Target Audience:** What issue will it address? What is the paper's goal? Who is it for?
    2.  **Conduct Thorough Research:** Gather data, statistics, expert opinions, and supporting evidence.
    3.  **Develop Thesis/Argument:** Formulate the core message or solution being presented.
    4.  **Outline Structure:** (e.g., Abstract, Introduction, Problem Definition, Analysis of Current Approaches, Proposed Solution/Perspective, Benefits, Implementation Considerations, Conclusion).
    5.  **Draft Content:** Write each section, presenting information and arguments logically.
    6.  **Incorporate Data & Evidence:** Use charts, graphs, or data points to support claims (AI can suggest where these are needed and what they should show).
    7.  **Cite Sources:** Properly attribute all external information.
    8.  **Write Executive Summary/Abstract & Conclusion:**
    9.  **Review & Refine:** Check for clarity, accuracy, persuasiveness, and logical flow.
*   **For Case Studies:**
    1.  **Identify Suitable Client/Project:** Choose a success story that highlights key benefits.
    2.  **Gather Information (Interview Client, Collect Data):** Understand the client's initial situation, challenges, the solution implemented, and the results achieved. (AI relies on user providing this info).
    3.  **Outline Structure:** (e.g., Client Profile, Challenge/Problem, Solution Implemented, Results/Benefits, Client Testimonial, Conclusion/Future).
    4.  **Draft the Narrative:** Tell the story in an engaging way.
        *   **Challenge:** Describe the client's pain points before the solution.
        *   **Solution:** Explain how the product/service was used to address the challenge.
        *   **Results:** Detail the positive outcomes, using quantifiable data where possible.
    5.  **Incorporate Client Quotes/Testimonials:** Add authenticity and credibility.
    6.  **Highlight Key Takeaways:** Summarize the main benefits demonstrated.
    7.  **Review & Approve (with Client if possible):** Ensure accuracy and client satisfaction with their portrayal.

## 3. Inputs Required from User/System

*   **For White Papers:**
    *   **Topic/Issue to be Addressed:**
    *   **Main Argument/Thesis (if known):**
    *   **Target Audience:** (e.g., industry executives, technical professionals, policymakers).
    *   **Key Data, Research Findings, or Source Materials to Include:**
    *   **Desired Length & Format (Optional):**
*   **For Case Studies:**
    *   **Client/Project Details:** Name, industry, background.
    *   **Problem/Challenge Faced by Client:**
    *   **Solution Provided (Product/Service Used):** How it was implemented.
    *   **Specific Measurable Results & Benefits Achieved:** (Quantifiable data is key).
    *   **Client Testimonials/Quotes (if available):**
    *   **Target Audience for the Case Study:**

## 4. Potential Challenges & Considerations

*   **White Papers:**
    *   **Maintaining Objectivity vs. Persuasion:** Balancing informative content with a persuasive goal.
    *   **Depth of Research:** Requires significant understanding of the topic.
    *   **Complexity:** Presenting complex information in an accessible way.
*   **Case Studies:**
    *   **Obtaining Client Approval & Accurate Data:** Essential for credibility.
    *   **Quantifying Results:** Sometimes difficult to isolate the impact of a single solution.
    *   **Storytelling:** Making a factual account engaging.
    *   **Avoiding Sales Hype:** Maintaining a credible, evidence-based tone.

## 5. Metrics for Success (How to Evaluate Output)

*   **For White Papers:**
    *   **Depth & Authority:** Does it demonstrate strong understanding and provide valuable insights?
    *   **Clarity of Argument:** Is the thesis well-supported and easy to follow?
    *   **Educational Value:** Does it effectively inform the target audience?
    *   **Persuasiveness (if applicable):** Is it likely to convince readers of its viewpoint?
*   **For Case Studies:**
    *   **Clarity of Problem-Solution-Result:** Is the narrative easy to follow?
    *   **Impact of Results:** Are the benefits clear and compelling (especially if quantified)?
    *   **Credibility & Authenticity:** Does it feel like a genuine success story?
    *   **Relatability:** Can potential customers identify with the client's situation and see the value?
*   **Common to Both:**
    *   **Professionalism:** Is the writing high-quality, well-structured, and error-free?
    *   **Audience Appropriateness:** Is it tailored to the intended reader?

## 6. Example Output Structure/Format

**Scenario (Case Study):** User wants a case study about "Acme Corp" improving efficiency using "SolutionX."
*   **User Input:**
    *   Client: Acme Corp, a mid-sized logistics company.
    *   Challenge: Manual route planning leading to inefficiencies and high fuel costs.
    *   Solution: Implemented SolutionX, an AI-powered route optimization software.
    *   Results: Reduced fuel costs by 15%, decreased delivery times by 20%, improved driver satisfaction.
    *   Quote: "SolutionX revolutionized our logistics. We're saving money and our drivers are happier." - Jane Doe, COO Acme Corp.

*   **Cline Generated Case Study (Excerpt):**

    ---
    **Case Study: Acme Corp Boosts Efficiency and Cuts Costs with SolutionX**

    **Client:** Acme Corp
    **Industry:** Logistics & Transportation
    **Challenge:** Inefficient manual route planning, high fuel expenditure, and extended delivery times.

    **The Challenge: Navigating a Complex Route Network**

    Acme Corp, a leading mid-sized logistics provider, faced growing challenges with its manual route planning processes. As their operations expanded, dispatchers struggled to optimize routes for their fleet of 50 vehicles, leading to excessive mileage, high fuel consumption, and frequent delivery delays. This not only impacted their bottom line but also began to affect driver morale and customer satisfaction. "We knew we were leaving money on the table and burning unnecessary fuel," said Jane Doe, COO of Acme Corp.

    **The Solution: Implementing SolutionX for AI-Powered Optimization**

    Acme Corp turned to SolutionX, a state-of-the-art AI-powered route optimization platform. The implementation involved integrating SolutionX with Acme's existing order management system. SolutionX's algorithms analyzed historical traffic data, real-time conditions, vehicle capacities, and delivery windows to generate optimized routes automatically. Dispatchers were trained to use the intuitive SolutionX dashboard to manage and adjust routes as needed.

    **The Results: Measurable Improvements Across the Board**

    Within three months of implementing SolutionX, Acme Corp experienced significant improvements:
    *   **15% Reduction in Fuel Costs:** Optimized routes led to less mileage and lower fuel consumption.
    *   **20% Decrease in Average Delivery Times:** More efficient routing meant faster deliveries and improved customer satisfaction.
    *   **Increased Driver Satisfaction:** Drivers reported less stress due to more predictable and efficient routes.
    *   **Enhanced Operational Visibility:** Dispatchers gained better insight into fleet operations.

    *"SolutionX revolutionized our logistics. We're saving money and our drivers are happier."* - Jane Doe, COO, Acme Corp.

    **Conclusion**

    By adopting SolutionX, Acme Corp successfully transformed its route planning from a manual, time-consuming task into an efficient, data-driven operation. The quantifiable savings and operational improvements demonstrate the power of AI in optimizing complex logistics.

    ---

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "White Paper & Case Study Development"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/whitepaper-case-study-development.md"
type: "use_case_guide"
description: "Develops authoritative white papers on complex issues or compelling case studies showcasing real-world success."
triggers: ["write white paper", "develop case study", "thought leadership content", "customer success story", "in-depth report on"]
weight: 100

## 6. Example Output Structure/Format

**Scenario (Case Study):** User wants a case study about "Acme Corp" improving efficiency using "SolutionX."
*   **User Input:**
    *   Client: Acme Corp, a mid-sized logistics company.
    *   Challenge: Manual route planning leading to inefficiencies and high fuel costs.
    *   Solution: Implemented SolutionX, an AI-powered route optimization software.
    *   Results: Reduced fuel costs by 15%, decreased delivery times by 20%, improved driver satisfaction.
    *   Quote: "SolutionX revolutionized our logistics. We're saving money and our drivers are happier." - Jane Doe, COO Acme Corp.

*   **Cline Generated Case Study (Excerpt):**

    ---
    **Case Study: Acme Corp Boosts Efficiency and Cuts Costs with SolutionX**

    **Client:** Acme Corp
    **Industry:** Logistics & Transportation
    **Challenge:** Inefficient manual route planning, high fuel expenditure, and extended delivery times.

    **The Challenge: Navigating a Complex Route Network**

    Acme Corp, a leading mid-sized logistics provider, faced growing challenges with its manual route planning processes. As their operations expanded, dispatchers struggled to optimize routes for their fleet of 50 vehicles, leading to excessive mileage, high fuel consumption, and frequent delivery delays. This not only impacted their bottom line but also began to affect driver morale and customer satisfaction. "We knew we were leaving money on the table and burning unnecessary fuel," said Jane Doe, COO of Acme Corp.

    **The Solution: Implementing SolutionX for AI-Powered Optimization**

    Acme Corp turned to SolutionX, a state-of-the-art AI-powered route optimization platform. The implementation involved integrating SolutionX with Acme's existing order management system. SolutionX's algorithms analyzed historical traffic data, real-time conditions, vehicle capacities, and delivery windows to generate optimized routes automatically. Dispatchers were trained to use the intuitive SolutionX dashboard to manage and adjust routes as needed.

    **The Results: Measurable Improvements Across the Board**

    Within three months of implementing SolutionX, Acme Corp experienced significant improvements:
    *   **15% Reduction in Fuel Costs:** Optimized routes led to less mileage and lower fuel consumption.
    *   **20% Decrease in Average Delivery Times:** More efficient routing meant faster deliveries and improved customer satisfaction.
    *   **Increased Driver Satisfaction:** Drivers reported less stress due to more predictable and efficient routes.
    *   **Enhanced Operational Visibility:** Dispatchers gained better insight into fleet operations.

    *"SolutionX revolutionized our logistics. We're saving money and our drivers are happier."* - Jane Doe, COO, Acme Corp.

    **Conclusion**

    By adopting SolutionX, Acme Corp successfully transformed its route planning from a manual, time-consuming task into an efficient, data-driven operation. The quantifiable savings and operational improvements demonstrate the power of AI in optimizing complex logistics.

    ---

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "White Paper & Case Study Development"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/whitepaper-case-study-development.md"
type: "use_case_guide"
description: "Develops authoritative white papers on complex issues or compelling case studies showcasing real-world success."
triggers: ["write white paper", "develop case study", "thought leadership content", "customer success story", "in-depth report on"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/release-notes-changelog-generation.md
-----------------
# Use Case Definition: Release Notes & Changelog Generation

**Objective:** To compile and write clear, concise, and informative release notes or a changelog for a software product update, detailing new features, improvements, bug fixes, and any breaking changes or known issues.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Completeness:**
    *   All significant changes in the release are included (new features, bug fixes, improvements, deprecations, breaking changes).
    *   Information is technically accurate.
*   **Clarity & Conciseness:**
    *   Changes are described in a way that is easy for the target audience (users, developers) to understand.
    *   Avoids overly technical jargon unless writing for a developer audience and it's necessary.
*   **User-Centric Language (for user-facing notes):**
    *   Focuses on the benefits or impact of changes from the user's perspective.
*   **Structured & Organized:**
    *   Changes are typically grouped by category (e.g., "New Features," "Improvements," "Bug Fixes," "Breaking Changes").
    *   Uses clear headings, bullet points, or numbered lists for readability.
*   **Actionable Information (if applicable):**
    *   If changes require user action (e.g., updating configurations, learning a new workflow), this is clearly communicated.
    *   May link to more detailed documentation for complex features.
*   **Version Information:**
    *   Clearly states the version number and release date.
*   **Tone Appropriateness:**
    *   Maintains a professional and informative tone, which can be adjusted based on brand voice (e.g., more celebratory for major features).

## 2. Key Stages & Processes Involved

1.  **Gather Information about Changes:**
    *   Collect data on all changes included in the release. This can come from:
        *   Version control commit logs (e.g., Git history).
        *   Issue tracking systems (e.g., Jira, GitHub Issues).
        *   Developer notes or internal documentation.
        *   Product management specifications.
2.  **Categorize Changes:**
    *   Group the changes into logical categories (e.g., New Features, Enhancements, Bug Fixes, Performance Improvements, Security Updates, Deprecations, Breaking Changes).
3.  **Prioritize & Select Significant Changes:**
    *   For user-facing release notes, focus on changes that directly impact the user experience or functionality. Minor internal refactoring might be omitted or summarized.
    *   Changelogs for developers might be more exhaustive.
4.  **Draft Descriptions for Each Change:**
    *   For each item, write a clear, concise description of:
        *   What was changed.
        *   Why it was changed (the benefit or problem solved).
        *   How it impacts the user (if applicable).
    *   Use consistent terminology.
5.  **Highlight Key Features & Major Improvements:**
    *   Give prominence to the most important updates in the release.
6.  **Document Breaking Changes & Deprecations Clearly:**
    *   If any changes require users to modify their existing usage or will remove functionality, these must be highlighted with clear instructions or warnings.
7.  **Add Version Information & Release Date:**
8.  **Include Links to Further Documentation (if needed):**
    *   For complex new features, link to detailed user guides or API documentation.
9.  **Structure the Release Notes/Changelog:**
    *   Use a standard format (e.g., Markdown).
    *   Start with a brief overview or summary of the release highlights.
    *   Use headings for categories.
    *   Use bullet points for individual changes.
10. **Review for Accuracy, Clarity, and Completeness:**
    *   Verify all listed changes against the actual release.
    *   Ensure descriptions are understandable by the target audience.
    *   Proofread for errors.

## 3. Inputs Required from User/System

*   **List of Changes/Commits/Issue Tickets for the Release:** This is the primary source material.
*   **Previous Version Number & New Version Number:**
*   **Release Date:**
*   **Target Audience for the Notes:** (e.g., end-users, developers, internal team).
*   **Product Name:**
*   **Key Highlights or Themes of the Release (Optional):**
*   **Any Known Issues or Breaking Changes to Emphasize:**
*   **Links to Detailed Documentation for New Features (Optional):**
*   **Company/Product Style Guide for Tone & Terminology (Optional):**

## 4. Potential Challenges & Considerations

*   **Gathering Comprehensive Change Information:** Ensuring no significant changes are missed, especially in large teams or complex releases.
*   **Translating Technical Changes into User Benefits:** Explaining the value of updates in a way users understand.
*   **Handling a Large Number of Small Changes:** Deciding what to include and how to group minor fixes or improvements.
*   **Communicating Breaking Changes Effectively:** Minimizing user frustration by providing clear warnings and migration paths.
*   **Maintaining Consistency Across Releases:** Using a similar format and level of detail for all release notes.
*   **Timeliness:** Preparing release notes in conjunction with the actual software release.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy:** Do the notes correctly reflect what's in the release?
*   **Completeness:** Are all user-impactful changes documented?
*   **Clarity:** Can the target audience easily understand the changes and their implications?
*   **Usefulness:** Do the notes provide valuable information to users/developers?
*   **Organization:** Is the information well-structured and easy to navigate?
*   **Tone Appropriateness:** Does the tone align with the brand and the nature of the release?
*   **Actionability (for breaking changes/deprecations):** Are users given clear guidance if they need to take action?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/user-manual-guide-creation.md
-----------------
# Use Case Definition: User Manual & Guide Creation

**Objective:** To create comprehensive, clear, and user-friendly manuals or guides that help users understand how to install, operate, maintain, and troubleshoot a product, software, or system.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Completeness:**
    *   All relevant features, functions, and procedures are accurately described.
    *   Information is up-to-date with the current version of the product/software.
*   **Clarity & Simplicity:**
    *   Instructions are easy to understand for the target audience, avoiding unnecessary jargon.
    *   Complex procedures are broken down into simple, step-by-step instructions.
*   **Task-Oriented:**
    *   Focuses on helping users achieve specific tasks or goals with the product.
*   **Logical Organization & Structure:**
    *   Information is organized logically (e.g., by feature, by task, setup -> operation -> troubleshooting).
    *   Includes a table of contents, index (conceptual for AI), and clear headings/subheadings for easy navigation.
*   **Visual Aids (Conceptual for AI):**
    *   AI can suggest where diagrams, screenshots, or illustrations would be beneficial and describe what they should show.
*   **Consistency:**
    *   Terminology, formatting, and style are consistent throughout the manual.
*   **Accessibility:**
    *   Content is structured in a way that is accessible (e.g., clear fonts, good contrast if AI were generating visuals, descriptive text for any conceptual images).
*   **Troubleshooting & FAQs:**
    *   Often includes sections for common problems and their solutions, or frequently asked questions.

## 2. Key Stages & Processes Involved

1.  **Understand Product/Software & Target Audience:**
    *   Thoroughly learn about the product/software: its features, functionality, and how it works.
    *   Identify the target users: their technical proficiency, prior knowledge, and goals.
2.  **Outline Manual/Guide Structure:**
    *   Plan the main sections (e.g., Introduction, Getting Started, Installation, Key Features, How-To Guides, Troubleshooting, Glossary, Index).
    *   Break down sections into chapters or topics.
3.  **Gather Information & Content:**
    *   Collect all necessary technical specifications, feature descriptions, operational procedures, and troubleshooting tips from product designers, engineers, or existing materials.
4.  **Write Content for Each Section:**
    *   **Introduction:** Overview of the product and the manual.
    *   **Getting Started/Installation:** Step-by-step setup instructions.
    *   **Feature Explanations:** Describe each feature, its purpose, and how to use it.
    *   **Procedural Instructions (How-To):** Provide clear, numbered steps for performing common tasks.
    *   **Troubleshooting:** List common issues, their causes, and solutions.
    *   **FAQ:** Answer frequently asked questions.
    *   **Glossary:** Define technical terms.
5.  **Incorporate Visual Aid Descriptions (Conceptual):**
    *   Identify where screenshots, diagrams, or flowcharts would clarify instructions and describe what these visuals should depict.
6.  **Ensure Clarity & Simplicity:**
    *   Use clear, direct language. Define technical terms if they must be used.
    *   Write short sentences and paragraphs. Use active voice.
7.  **Review for Accuracy, Completeness, and Usability:**
    *   Verify all instructions and information against the actual product/software.
    *   Have someone representative of the target audience test the instructions. (AI can simulate a review for clarity).
    *   Proofread for errors.

## 3. Inputs Required from User/System

*   **Detailed Product/Software Information:** Specifications, feature lists, how it works, UI descriptions (if software).
*   **Target Audience Profile:** Technical skill level, familiarity with similar products.
*   **Purpose of the Manual/Guide:** (e.g., quick start guide, comprehensive reference manual).
*   **Key Tasks Users Need to Perform:**
*   **Known Common Issues or FAQs:**
*   **Existing Technical Documentation or Developer Notes (if any):**
*   **Branding/Style Guidelines for Documentation (Optional):**
*   **List of Sections/Topics to Cover (Optional):**

## 4. Potential Challenges & Considerations

*   **Keeping Pace with Product Updates:** Manuals can quickly become outdated if not maintained.
*   **Technical Accuracy:** Ensuring all steps and descriptions are precisely correct.
*   **Audience Variability:** Writing for users with different levels of technical expertise.
*   **Complexity of Product:** Documenting highly complex systems clearly is challenging.
*   **Visuals:** Effective manuals often rely heavily on visuals, which AI can only describe or suggest.
*   **Testing Instructions:** Verifying that all procedures work as described.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Understandability:** Can a target user easily understand and follow the instructions?
*   **Accuracy:** Is the information technically correct and up-to-date (based on input)?
*   **Completeness:** Does it cover all essential aspects of using the product/software for the intended scope of the manual?
*   **Task Success Rate (Indirect):** Would users be able to successfully perform tasks using this manual?
*   **Organization & Navigability:** Is information easy to find?
*   **Usefulness of Troubleshooting/FAQs:** Are common problems addressed effectively?
*   **Consistency:** Is terminology and style consistent?

## 6. Example Output Structure/Format
**Scenario:** User needs a section for a user manual on how to assemble a "SmartDesk Lamp."
*   **User Input:**
    *   Product: SmartDesk Lamp
    *   Section: Assembly Instructions
    *   Target Audience: General consumers.
    *   Key Parts: Lamp Base, Lamp Arm, Shade, LED Bulb, Power Adapter.
    *   Key Steps: Attach arm to base, attach shade to arm, install bulb, connect power.

*   **Cline Generated User Manual Excerpt:**

    ---
    **Chapter 2: Assembling Your SmartDesk Lamp**

    This section will guide you through the simple assembly process for your new SmartDesk Lamp. Please identify all parts before you begin.

    **Parts Included:**
    *   (A) Lamp Base (1)
    *   (B) Lamp Arm (1)
    *   (C) Lamp Shade (1)
    *   (D) LED Bulb (1)
    *   (E) Power Adapter (1)
    *(Suggested Illustration: Labeled diagram of all parts)*

    **Assembly Steps:**

    1.  **Attach the Lamp Arm to the Base:**
        *   Take the Lamp Base (A) and place it on a flat, stable surface.
        *   Align the bottom connector of the Lamp Arm (B) with the receiving port on the top of the Lamp Base (A).
        *   Gently push the Lamp Arm downwards into the Lamp Base until you hear or feel a click, indicating it is securely attached.
        *   *(Suggested Illustration: Close-up of arm connecting to base)*

    2.  **Attach the Lamp Shade:**
        *   Take the Lamp Shade (C).
        *   Locate the threaded connector at the top of the Lamp Arm (B).
        *   Align the opening of the Lamp Shade with the threaded connector and gently screw the shade clockwise until it is snug. Do not overtighten.
        *   *(Suggested Illustration: Shade being attached to arm)*

    3.  **Install the LED Bulb:**
        *   Carefully unpack the LED Bulb (D).
        *   Gently screw the LED Bulb clockwise into the socket located inside the Lamp Shade (C) until it is secure.
        *   *(Suggested Illustration: Bulb being screwed into socket)*

    4.  **Connect the Power Adapter:**
        *   Plug the small connector of the Power Adapter (E) into the power input port located on the back of the Lamp Base (A).
        *   Plug the other end of the Power Adapter into a standard electrical outlet.

    5.  **Test Your Lamp:**
        *   Use the power button (usually located on the Lamp Base or Arm) to turn on your SmartDesk Lamp.
        *   If the lamp does not turn on, please double-check all connections (Steps 1-4) and ensure the power outlet is working. Refer to the "Troubleshooting" section if issues persist.

    Your SmartDesk Lamp is now assembled and ready to use! Refer to Chapter 3 for Operating Instructions.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "User Manual & Guide Creation"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/user-manual-guide-creation.md"
type: "use_case_guide"
description: "Creates comprehensive user manuals or guides for products/software, covering installation, operation, and troubleshooting."
triggers: ["user manual", "product guide", "instruction manual", "how to use product", "software user guide"]
weight: 100

## 6. Example Output Structure/Format
**Scenario:** User needs a section for a user manual on how to assemble a "SmartDesk Lamp."
*   **User Input:**
    *   Product: SmartDesk Lamp
    *   Section: Assembly Instructions
    *   Target Audience: General consumers.
    *   Key Parts: Lamp Base, Lamp Arm, Shade, LED Bulb, Power Adapter.
    *   Key Steps: Attach arm to base, attach shade to arm, install bulb, connect power.

*   **Cline Generated User Manual Excerpt:**

    ---
    **Chapter 2: Assembling Your SmartDesk Lamp**

    This section will guide you through the simple assembly process for your new SmartDesk Lamp. Please identify all parts before you begin.

    **Parts Included:**
    *   (A) Lamp Base (1)
    *   (B) Lamp Arm (1)
    *   (C) Lamp Shade (1)
    *   (D) LED Bulb (1)
    *   (E) Power Adapter (1)
    *(Suggested Illustration: Labeled diagram of all parts)*

    **Assembly Steps:**

    1.  **Attach the Lamp Arm to the Base:**
        *   Take the Lamp Base (A) and place it on a flat, stable surface.
        *   Align the bottom connector of the Lamp Arm (B) with the receiving port on the top of the Lamp Base (A).
        *   Gently push the Lamp Arm downwards into the Lamp Base until you hear or feel a click, indicating it is securely attached.
        *   *(Suggested Illustration: Close-up of arm connecting to base)*

    2.  **Attach the Lamp Shade:**
        *   Take the Lamp Shade (C).
        *   Locate the threaded connector at the top of the Lamp Arm (B).
        *   Align the opening of the Lamp Shade with the threaded connector and gently screw the shade clockwise until it is snug. Do not overtighten.
        *   *(Suggested Illustration: Shade being attached to arm)*

    3.  **Install the LED Bulb:**
        *   Carefully unpack the LED Bulb (D).
        *   Gently screw the LED Bulb clockwise into the socket located inside the Lamp Shade (C) until it is secure.
        *   *(Suggested Illustration: Bulb being screwed into socket)*

    4.  **Connect the Power Adapter:**
        *   Plug the small connector of the Power Adapter (E) into the power input port located on the back of the Lamp Base (A).
        *   Plug the other end of the Power Adapter into a standard electrical outlet.

    5.  **Test Your Lamp:**
        *   Use the power button (usually located on the Lamp Base or Arm) to turn on your SmartDesk Lamp.
        *   If the lamp does not turn on, please double-check all connections (Steps 1-4) and ensure the power outlet is working. Refer to the "Troubleshooting" section if issues persist.

    Your SmartDesk Lamp is now assembled and ready to use! Refer to Chapter 3 for Operating Instructions.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "User Manual & Guide Creation"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/user-manual-guide-creation.md"
type: "use_case_guide"
description: "Creates comprehensive user manuals or guides for products/software, covering installation, operation, and troubleshooting."
triggers: ["user manual", "product guide", "instruction manual", "how to use product", "software user guide"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/code-comment-generation-explanation.md
-----------------
# Use Case Definition: Code Comment Generation & Explanation

**Objective:** To generate clear, concise, and helpful comments for source code, or to explain existing code segments in natural language, aiding in code understanding, maintainability, and collaboration.

## 1. Core Requirements & Quality Indicators

*   **For Comment Generation:**
    *   **Accuracy:** Comments accurately describe the purpose, logic, and behavior of the code segment they refer to.
    *   **Clarity & Conciseness:** Comments are easy to understand and to the point. Avoid overly verbose or cryptic comments.
    *   **Relevance:** Comments explain the "why" or "how" of complex or non-obvious code, not just restate what the code does in plain English.
    *   **Proper Formatting:** Adheres to language-specific comment syntax (e.g., `//`, `/* */`, `#`, `""" """`).
    *   **Placement:** Comments are placed appropriately (e.g., before a function/class, at the end of a complex line, before a block of logic).
    *   **Consistency:** Follows existing commenting style within the codebase if one exists.
*   **For Code Explanation:**
    *   **Accurate Interpretation:** The explanation correctly describes the functionality, logic, and purpose of the provided code snippet.
    *   **Clarity for Target Audience:** Explanation is tailored to the likely technical understanding of the user (e.g., simpler for beginners, more detailed for experienced devs).
    *   **Completeness:** Covers the key aspects of the code's operation.
    *   **Identifies Key Logic/Algorithms:** Points out important algorithms, data structures, or design patterns used.
    *   **Explains Inputs/Outputs/Side Effects:** Describes what the code takes as input, what it produces, and any side effects it might have.

## 2. Key Stages & Processes Involved

*   **For Comment Generation:**
    1.  **Analyze Code Segment:** Understand the purpose, inputs, outputs, internal logic, and any non-obvious aspects of the code block.
    2.  **Identify Need for Comment:** Determine if a comment is necessary (e.g., for complex logic, public API, non-trivial algorithm, important pre/post-conditions).
    3.  **Determine Comment Type:** (e.g., block comment for function/class, inline comment for specific line).
    4.  **Draft Comment Text:** Write clear, concise text explaining the "why" or "how."
        *   For functions/methods: Describe purpose, parameters (name, type, description), return value (type, description), any exceptions thrown.
        *   For complex blocks: Explain the algorithm or logic.
        *   For non-obvious lines: Clarify intent.
    5.  **Format & Place Comment:** Insert the comment into the code with correct syntax and placement.
*   **For Code Explanation:**
    1.  **Parse & Understand Code:** Analyze the syntax, structure, control flow, data flow, and dependencies of the code snippet.
    2.  **Identify High-Level Purpose:** What is the overall goal of this code?
    3.  **Break Down into Logical Parts:** Explain individual functions, loops, conditional statements, and key operations.
    4.  **Explain Data Structures & Variables:** Describe the role of important variables and data structures.
    5.  **Describe Algorithm/Logic:** Explain the method or algorithm being implemented.
    6.  **Identify Inputs, Outputs, and Side Effects:**
    7.  **Synthesize Explanation:** Combine the analysis into a coherent natural language description.
    8.  **Provide Examples (Optional):** Illustrate how the code might be used or what its output would be for certain inputs.

## 3. Inputs Required from User/System

*   **For Comment Generation:**
    *   **Source Code Segment:** The specific piece of code that needs commenting.
    *   **Context (Optional):** Surrounding code or information about the module/project can help.
    *   **Target Audience for Comments (Optional):** (e.g., other team members, future self, open-source contributors).
    *   **Specific Commenting Standard/Style (Optional):** (e.g., Javadoc, Doxygen, Google Style Guide).
*   **For Code Explanation:**
    *   **Source Code Snippet:** The code to be explained.
    *   **Programming Language (if not obvious from snippet):**
    *   **Context (Optional):** Where does this code fit in a larger system?
    *   **Target Audience for Explanation (Optional):** (e.g., "explain like I'm five," "explain for a senior developer").

## 4. Potential Challenges & Considerations

*   **Comment Generation:**
    *   **Over-Commenting:** Commenting obvious code.
    *   **Out-of-Sync Comments:** Comments that are not updated when code changes, leading to misinformation.
    *   **Poorly Written Comments:** Comments that are unclear, incorrect, or just restate the code.
*   **Code Explanation:**
    *   **Handling Obfuscated or Poorly Written Code:** Explaining complex or messy code can be difficult.
    *   **Inferring Intent:** Sometimes the "why" behind code is not apparent from the code itself.
    *   **Level of Detail:** Providing the right amount of detail for the target audience.
    *   **Accuracy for Complex Algorithms:** Ensuring the explanation of intricate logic is correct.

## 5. Metrics for Success (How to Evaluate Output)

*   **For Comment Generation:**
    *   **Helpfulness:** Would this comment aid a developer in understanding the code?
    *   **Accuracy:** Does it correctly describe the code?
    *   **Clarity & Conciseness:** Is it easy to read and to the point?
    *   **Necessity:** Does the code actually need this comment, or is it self-explanatory?
    *   **Proper Formatting & Placement:**
*   **For Code Explanation:**
    *   **Correctness of Explanation:** Does it accurately describe what the code does?
    *   **Clarity & Understandability:** Can the target audience understand the explanation?
    *   **Completeness:** Does it cover the important aspects of the code?
    *   **Insightfulness:** Does it provide useful insights beyond a literal translation of code to words?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/technical-writing-documentation/code-comment-explanation.md
-----------------
# Use Case Definition: Code Comment & Explanation Generation

**Objective:** To generate clear, concise, and informative comments for blocks of code, or to provide a natural language explanation of what a piece of code does, its purpose, inputs, outputs, and key logic.

## 1. Core Requirements & Quality Indicators

*   **Accuracy of Explanation:**
    *   The explanation or comments correctly describe the functionality and logic of the code.
    *   Does not misinterpret the code's behavior.
*   **Clarity & Conciseness:**
    *   Comments are brief and to the point, explaining the "why" or "how" of complex parts, not just restating the code.
    *   Explanations are easy to understand for the target audience (e.g., another developer, a less technical stakeholder).
*   **Completeness (for explanations):**
    *   Covers the main purpose, inputs, outputs, and critical logic steps of the code block.
*   **Relevance of Comments:**
    *   Comments are added where they are most needed: complex logic, non-obvious decisions, public API contracts (e.g., function docstrings).
    *   Avoids over-commenting simple, self-explanatory code.
*   **Adherence to Language/Project Conventions:**
    *   Comments follow the syntax and common style guidelines for the specific programming language (e.g., Javadoc, Python docstrings, XML comments for C#).
    *   Aligns with any project-specific commenting conventions.
*   **Identification of Key Logic:**
    *   Highlights the most important or complex parts of the code in the explanation.
*   **Parameter & Return Value Documentation (for functions/methods):**
    *   Clearly documents the purpose, type, and any constraints for each parameter.
    *   Clearly documents the return value's type and meaning.

## 2. Key Stages & Processes Involved

1.  **Code Parsing & Understanding (Conceptual for AI):**
    *   Analyze the provided code snippet or function.
    *   Identify control flow (loops, conditionals), variable assignments, function calls, and overall structure.
    *   Infer the purpose and algorithm of the code.
2.  **Identify Comment-Worthy Sections:**
    *   Pinpoint parts of the code that are complex, non-obvious, or represent important design decisions.
    *   Identify public functions/methods/classes that require docstrings or header comments.
3.  **Generate Comments:**
    *   For functions/methods: Write docstrings/header comments explaining purpose, parameters, return values, and any exceptions raised.
    *   For complex blocks: Write inline comments explaining the logic or rationale.
4.  **Generate Natural Language Explanation (if requested):**
    *   **Overall Purpose:** Start with a high-level summary of what the code does.
    *   **Inputs:** Describe the expected inputs/parameters.
    *   **Key Logic Steps:** Explain the main steps or algorithm in a clear sequence.
    *   **Outputs:** Describe the expected outputs or return values.
    *   **Side Effects (if any):** Mention any changes to state outside the function/block.
5.  **Format According to Conventions:**
    *   Ensure comments and explanations adhere to language-specific and project-specific formatting rules.
6.  **Review for Clarity, Accuracy, and Conciseness:**
    *   Check that comments are helpful and not just restating the obvious.
    *   Ensure explanations are understandable and accurate.

## 3. Inputs Required from User/System

*   **Code Snippet/Block/Function/File:** The actual code to be commented or explained.
*   **Programming Language:**
*   **Desired Output:** (e.g., "add inline comments," "generate a Python docstring," "explain this function in plain English").
*   **Target Audience for Explanation (Optional):** (e.g., "for a junior developer," "for a non-technical manager").
*   **Specific Commenting Style/Format (Optional):** (e.g., Javadoc, reStructuredText for Sphinx).
*   **Focus Areas for Explanation (Optional):** If the user wants clarification on particular parts of the code.

## 4. Potential Challenges & Considerations

*   **Understanding Complex or Obfuscated Code:** AI might struggle with highly complex, poorly written, or intentionally obfuscated code.
*   **Inferring Intent:** Determining the original developer's intent or the "why" behind certain design choices can be difficult from code alone.
*   **Avoiding Redundant Comments:** Comments should add value, not just state what the code clearly does.
*   **Keeping Comments Synchronized with Code Changes:** Generated comments are static; if the code changes, comments need to be updated (a separate task).
*   **Level of Detail:** Providing the right amount of detail in explanations – not too much, not too little.
*   **Language-Specific Nuances:** Correctly applying commenting conventions for all languages.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy of Comments/Explanation:** Do they correctly describe what the code does?
*   **Clarity & Helpfulness:** Would the comments/explanation help another developer understand the code faster?
*   **Conciseness:** Are comments brief and to the point? Are explanations free of unnecessary jargon?
*   **Appropriateness of Comment Placement:** Are comments added where they are most needed?
*   **Adherence to Conventions:** Do comments follow standard formatting for the language?
*   **Completeness of Explanation:** Does it cover purpose, inputs, outputs, and key logic?
*   **Usefulness for Target Audience:** Is the explanation pitched at the right level?

## 6. Example Output Structure/Format
**Scenario:** User provides a Python function and asks for a docstring and a plain English explanation.
*   **User Input:**
    ```python
    def calculate_factorial(n):
        if n < 0:
            raise ValueError("Factorial is not defined for negative numbers")
        elif n == 0:
            return 1
        else:
            result = 1
            for i in range(1, n + 1):
                result *= i
            return result
    ```
    *   Request: "Generate a Python docstring and explain this function."

*   **Cline Generated Output:**

    **Python Docstring:**
    ```python
    def calculate_factorial(n):
        """Calculate the factorial of a non-negative integer.

        Args:
            n (int): A non-negative integer.

        Returns:
            int: The factorial of n (n!).

        Raises:
            ValueError: If n is a negative integer.
        """
        if n < 0:
            raise ValueError("Factorial is not defined for negative numbers")
        elif n == 0:
            return 1
        else:
            result = 1
            for i in range(1, n + 1):
                result *= i
            return result
    ```

    **Plain English Explanation:**

    This Python function, `calculate_factorial`, is designed to compute the factorial of a given non-negative whole number.
    *   **Input:** It takes one argument, `n`, which should be a whole number that is not negative.
    *   **Logic:**
        *   If the input `n` is a negative number, the function will stop and report an error (a `ValueError`), because factorials are not defined for negative numbers.
        *   If `n` is 0, the function immediately returns 1 (since the factorial of 0 is 1).
        *   If `n` is a positive whole number, the function calculates the factorial by starting with a result of 1 and then multiplying it by each whole number from 1 up to `n`. For example, if `n` is 5, it calculates 1 * 1 * 2 * 3 * 4 * 5.
    *   **Output:** The function returns the calculated factorial of `n`.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Code Comment & Explanation Generation"
path: "prompts/use_cases/content-creation-and-management/technical-writing-documentation/code-comment-explanation.md"
type: "use_case_guide"
description: "Generates comments for code blocks or explains code functionality in natural language."
triggers: ["comment code", "explain code", "generate docstrings", "document function", "code explanation"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/educational-content-courseware-development/interactive-learning-module-scripting.md
-----------------
# Use Case Definition: Interactive Learning Module Scripting

**Objective:** To design and script the content for an interactive e-learning module, including learning objectives, instructional text/narration, interactive elements (e.g., quizzes, simulations, drag-and-drop), branching scenarios, and feedback mechanisms.

## 1. Core Requirements & Quality Indicators

*   **Clear Learning Objectives:**
    *   The module has specific, measurable learning outcomes.
*   **Engaging & Interactive Content:**
    *   Incorporates various interactive elements to actively engage the learner.
    *   Goes beyond passive reading or listening.
*   **Logical Flow & Structure (Often Modular):**
    *   Content is broken down into manageable segments or screens.
    *   Information and activities are sequenced logically to build understanding.
*   **Clear Instructions for Interactions:**
    *   Users understand how to interact with quizzes, simulations, or other elements.
*   **Immediate & Constructive Feedback:**
    *   Provides timely and helpful feedback for interactive exercises (e.g., explaining why an answer is correct/incorrect).
*   **Adaptive Pathing (Optional):**
    *   May include branching logic where the learning path adapts based on user responses or performance.
*   **Accessibility Considerations (Conceptual):**
    *   Content should be designable for accessibility (e.g., text alternatives for non-text content, keyboard navigability for interactions). AI describes content with this in mind.
*   **Alignment with Educational Goals:**
    *   The module effectively teaches the intended concepts or skills.
*   **Technical Feasibility (Conceptual):**
    *   The scripted interactions are generally feasible to implement with common e-learning authoring tools or web technologies.

## 2. Key Stages & Processes Involved

1.  **Define Learning Objectives & Target Audience:**
    *   What should learners be able to do after completing this module?
    *   Who are the learners? What is their prior knowledge and technical setup?
2.  **Outline Module Structure & Content Flow:**
    *   Break the module into sections, topics, or screens.
    *   Plan the sequence of information presentation, activities, and assessments.
3.  **Script Instructional Content:**
    *   Write the text for on-screen display or narration for audio/video elements.
    *   Keep content concise and focused.
4.  **Design Interactive Elements:**
    *   For each section, brainstorm appropriate interactions:
        *   **Quizzes:** Multiple-choice, true/false, fill-in-the-blank, matching.
        *   **Simulations:** Scenarios where learners practice skills in a safe environment.
        *   **Drag-and-Drop Activities:** For sorting, matching, or sequencing.
        *   **Click-to-Reveal/Hotspots:** For exploring information.
        *   **Scenario-Based Questions/Branching Scenarios:** Present a situation and ask the learner how they would respond, with different consequences for different choices.
5.  **Script Interaction Logic & Feedback:**
    *   For each interactive element:
        *   Define the correct answer(s) or successful completion criteria.
        *   Write feedback for correct responses.
        *   Write constructive feedback for incorrect responses, explaining the concept.
        *   If branching, define where each choice leads.
6.  **Develop Assessment Strategy:**
    *   How will overall learning be assessed (e.g., end-of-module quiz, completion of a final simulation)?
7.  **Write Navigation & UI Text (Conceptual):**
    *   Consider text for buttons (Next, Back, Submit), instructions, and help pop-ups.
8.  **Storyboard (Conceptual for AI):**
    *   AI can describe the content and layout for each screen/segment, including text, visuals to be sourced, and interactive elements.
9.  **Review & Refine:**
    *   Check for clarity, accuracy, engagement, and logical flow.
    *   Ensure interactions are meaningful and contribute to learning.
    *   "Walk through" the module from a learner's perspective.

## 3. Inputs Required from User/System

*   **Topic & Specific Learning Objectives for the Module:**
*   **Target Audience Profile:** (Technical skills, learning context).
*   **Core Content/Information to be Taught:** (e.g., source texts, product features, procedural steps).
*   **Desired Types of Interactivity (Optional):** (e.g., "include a branching scenario," "needs a drag-and-drop").
*   **Technical Constraints or Preferred Authoring Tool (Optional):** (This can influence the types of interactions that are feasible).
*   **Overall Desired Length or Seat Time for the Module (Optional):**
*   **Assessment Requirements:**
*   **Branding/Style Guidelines (if applicable):**

## 4. Potential Challenges & Considerations

*   **Complexity of Interaction Design:** Creating truly effective and engaging interactions requires careful thought.
*   **Technical Implementation (Beyond AI Scope):** AI scripts the content and logic; actual development in an authoring tool or code is separate.
*   **Balancing Information with Interaction:** Avoiding too much passive content or too many trivial interactions.
*   **Cognitive Load:** Ensuring the module isn't overwhelming for learners.
*   **Feedback Quality:** Writing feedback that is genuinely helpful and corrective.
*   **Accessibility of Interactions:** Ensuring all users can engage with the interactive elements.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Learning Path:** Is the module well-structured and easy for a learner to navigate?
*   **Engagement Potential:** Are the scripted interactions and content likely to keep learners engaged?
*   **Effectiveness of Interactions:** Do the interactive elements effectively reinforce learning or allow for practice?
*   **Quality of Feedback:** Is the scripted feedback for interactions clear, constructive, and accurate?
*   **Alignment with Objectives:** Does the module content and activities directly support the stated learning objectives?
*   **Actionability for Developer/Designer:** Is the script detailed enough for an e-learning developer or instructional designer to build the module?
*   **Completeness:** Does the script cover all necessary content and interactions for the defined scope?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/educational-content-courseware-development/educational-handout-worksheet-creation.md
-----------------
# Use Case Definition: Educational Handout & Worksheet Creation

**Objective:** To create focused, printable or digital handouts and worksheets that reinforce learning, provide practice, or summarize key information for students related to a specific lesson or topic.

## 1. Core Requirements & Quality Indicators

*   **Alignment with Learning Objectives:**
    *   The handout/worksheet directly supports and reinforces the learning objectives of a specific lesson or topic.
*   **Clear Instructions & Purpose:**
    *   Students can easily understand what they are supposed to do with the handout/worksheet.
    *   The educational purpose is clear.
*   **Accurate Content:**
    *   All information, questions, and activities are factually correct and relevant to the topic.
*   **Age/Level Appropriateness:**
    *   Language, complexity, and tasks are suitable for the target learners.
*   **Engaging & Varied Activities (for worksheets):**
    *   May include different types of exercises (e.g., fill-in-the-blanks, matching, short answer, problem-solving, labeling diagrams) to maintain engagement.
*   **Concise & Focused (for handouts):**
    *   Handouts (e.g., summaries, key term lists, diagrams) present information efficiently.
*   **Clear Formatting & Layout:**
    *   Well-organized, easy to read, with adequate space for student responses if it's a worksheet.
    *   Suggests where visuals or diagrams would be beneficial.
*   **Reinforcement of Key Concepts:**
    *   Helps students practice, review, or deepen their understanding of important concepts.

## 2. Key Stages & Processes Involved

1.  **Identify Learning Objective(s) & Key Content:**
    *   What specific knowledge or skill should this handout/worksheet reinforce or practice?
    *   What are the core concepts from the lesson?
2.  **Determine Type of Resource:**
    *   Is it a summary handout, a practice worksheet, a vocabulary list, a graphic organizer, a problem set?
3.  **Design Activities/Content Structure:**
    *   **Worksheets:** Plan the types of questions or activities (e.g., fill-in-the-blanks, matching, short answer, labeling, true/false, problem-solving).
    *   **Handouts:** Outline the key information to be presented (e.g., main points of a lecture, definitions of key terms, a diagram with labels).
4.  **Draft Content & Instructions:**
    *   Write clear instructions for any activities.
    *   Develop questions, problems, or informational text.
    *   Ensure language is appropriate for the target learners.
5.  **Create Answer Key (for worksheets, if applicable):**
    *   Provide correct answers or model solutions.
6.  **Format for Usability:**
    *   Organize content logically with clear headings and sections.
    *   Ensure enough space for written answers on worksheets.
    *   Use formatting (bold, italics, lists) to highlight key information.
    *   Suggest where diagrams, charts, or images should be included.
7.  **Review & Refine:**
    *   Check for clarity, accuracy, and alignment with learning objectives.
    *   Ensure instructions are unambiguous.
    *   Proofread for errors.
    *   (Conceptual) Test the worksheet by trying to complete it as a student would.

## 3. Inputs Required from User/System

*   **Specific Topic or Lesson Content:**
*   **Learning Objective(s) the Resource Should Support:**
*   **Target Audience/Grade Level:**
*   **Type of Resource Desired:** (e.g., "worksheet with fill-in-the-blanks," "summary handout of key terms").
*   **Key Information, Vocabulary, or Skills to Include/Practice:**
*   **Desired Length or Number of Questions/Activities (Optional):**
*   **Any Specific Format or Structure (Optional):**
*   **Source Material (e.g., textbook pages, lecture notes) to Base the Content On (Highly Recommended):**

## 4. Potential Challenges & Considerations

*   **Creating Engaging Activities:** Moving beyond simple recall questions.
*   **Appropriate Scaffolding:** Providing enough support for learners without making it too easy.
*   **Clarity of Instructions:** Ensuring students know exactly what to do.
*   **Visual Appeal & Layout:** Making the resource user-friendly (AI can suggest layout elements).
*   **Time to Complete:** Designing activities that can be completed in a reasonable timeframe.
*   **Differentiation:** Creating a single resource that can cater to varied learning needs can be difficult.

## 5. Metrics for Success (How to Evaluate Output)

*   **Alignment with Learning Objectives:** Does the handout/worksheet effectively reinforce the intended learning?
*   **Clarity & Understandability:** Are instructions and content clear for the target audience?
*   **Accuracy of Content:** Is all information correct?
*   **Engagement Potential:** Are the activities likely to be engaging for students?
*   **Usability:** Is the resource well-formatted and easy for students to use (and for teachers to assess, if applicable)?
*   **Effectiveness as a Learning Tool:** Does it seem likely to aid student understanding or skill development?
*   **Completeness:** Does it adequately cover the specified topic or skill for its intended purpose?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/educational-content-courseware-development/lesson-plan-creation.md
-----------------
# Use Case Definition: Lesson Plan Creation

**Objective:** To develop a structured and detailed plan for a single educational lesson, outlining learning objectives, activities, materials, assessment methods, and timing to effectively teach a specific topic or skill.

## 1. Core Requirements & Quality Indicators

*   **Clear Learning Objectives:**
    *   States what students should know or be able to do by the end of the lesson (e.g., using SMART criteria: Specific, Measurable, Achievable, Relevant, Time-bound).
*   **Alignment with Curriculum/Goals:**
    *   The lesson fits into a broader curriculum or learning pathway and contributes to overall educational goals.
*   **Engaging Activities & Content:**
    *   Includes a variety of activities and content delivery methods to cater to different learning styles and maintain student engagement.
*   **Logical Flow & Structure:**
    *   The lesson progresses logically: introduction/hook, instruction/presentation of new material, guided practice, independent practice, assessment, conclusion/wrap-up.
*   **Appropriate Pacing & Timing:**
    *   Allocates realistic time estimates for each segment of the lesson.
*   **Necessary Materials & Resources:**
    *   Lists all required materials, tools, software, readings, or other resources.
*   **Assessment Methods:**
    *   Includes methods to check for student understanding and measure achievement of learning objectives (e.g., questions, quizzes, activities, discussions).
*   **Differentiation (Optional but good):**
    *   May suggest ways to adapt the lesson for students with different needs or learning levels (e.g., support for struggling learners, extensions for advanced learners).
*   **Clarity for Instructor:**
    *   The plan is clear and detailed enough for an instructor to understand and deliver the lesson effectively.

## 2. Key Stages & Processes Involved

1.  **Define Topic & Learning Objectives:**
    *   What specific topic will be covered?
    *   What should students learn or be able to do by the end?
2.  **Identify Target Audience (Learners):**
    *   Grade level, age group, prior knowledge, learning context (e.g., K-12, higher education, corporate training).
3.  **Outline Lesson Structure:**
    *   **Introduction/Anticipatory Set:** How to grab attention and activate prior knowledge.
    *   **Instruction/Presentation:** How new information or skills will be taught.
    *   **Guided Practice:** Opportunities for students to practice with support.
    *   **Independent Practice:** Activities for students to apply learning on their own.
    *   **Assessment:** How learning will be checked.
    *   **Closure/Wrap-up:** Summarize key points, preview next steps.
4.  **Select Teaching Strategies & Activities:**
    *   Choose appropriate methods for each part of the lesson (e.g., lecture, discussion, group work, demonstration, simulation, case study, Socratic questioning).
5.  **Identify & List Materials/Resources:**
    *   What will be needed to deliver the lesson (e.g., whiteboard, projector, handouts, software, specific texts)?
6.  **Plan Assessment Methods:**
    *   How will student understanding of the objectives be measured? (e.g., Q&A, short quiz, observation of activity, worksheet).
7.  **Allocate Time for Each Segment:**
    *   Estimate how long each part of the lesson will take.
8.  **Consider Differentiation Strategies (Optional):**
    *   How can the lesson be adapted for diverse learners?
9.  **Write the Lesson Plan Document:**
    *   Organize all information into a structured format, often using a template with sections for objectives, materials, procedure (step-by-step activities), assessment, etc.

## 3. Inputs Required from User/System

*   **Topic of the Lesson:**
*   **Target Audience/Learner Profile:** (Age, grade level, prior knowledge).
*   **Specific Learning Objectives (if user has them, or AI can help formulate them):**
*   **Duration of the Lesson:** (e.g., 45 minutes, 1 hour, 3-hour workshop).
*   **Key Concepts or Skills to be Covered:**
*   **Available Materials/Resources (Optional):**
*   **Curriculum Standards or Broader Course Goals (if applicable):**
*   **Preferred Teaching Styles or Activities (Optional):**
*   **Assessment Preferences (Optional):**

## 4. Potential Challenges & Considerations

*   **Engagement:** Designing activities that are genuinely engaging for the target audience.
*   **Realistic Timing:** Accurately estimating how long activities will take.
*   **Flexibility:** Lesson plans need to be adaptable if students grasp concepts faster or slower than expected.
*   **Assessment Validity:** Ensuring assessment methods accurately measure the stated learning objectives.
*   **Resource Availability:** Assuming materials or tech that might not be available to all instructors/students.
*   **Differentiation:** Effectively planning for a diverse range of learners.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Completeness of Objectives:** Are the learning goals clear and measurable?
*   **Logical Flow of Activities:** Do the lesson activities progress in a sensible order?
*   **Engagement Potential of Activities:** Are the proposed activities likely to interest and involve students?
*   **Alignment of Activities & Assessment with Objectives:** Do the activities and assessments directly support and measure the learning objectives?
*   **Practicality for Instructor:** Is the lesson plan detailed and clear enough for an instructor to implement?
*   **Thoroughness of Material/Resource List:**
*   **Appropriateness for Target Audience:** Is the content and complexity suitable for the specified learners?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/educational-content-courseware-development/presentation-script-slide-content-generation.md
-----------------
# Use Case Definition: Presentation Script & Slide Content Generation

**Objective:** To develop the narrative script (speaker notes) and corresponding slide content (key points, visuals suggestions) for an engaging and informative presentation on a given topic.

## 1. Core Requirements & Quality Indicators

*   **Clear Structure & Flow:**
    *   Presentation has a logical organization (e.g., introduction, main body points, conclusion).
    *   Smooth transitions between slides and topics.
*   **Engaging Narrative/Script:**
    *   Speaker notes are conversational, clear, and engaging for the audience.
    *   Effectively explains concepts and tells a story if appropriate.
*   **Concise & Impactful Slide Content:**
    *   Slides highlight key takeaways, using minimal text (bullet points, short phrases).
    *   Avoids dense paragraphs of text on slides.
    *   Focuses on visual communication (AI suggests types of visuals).
*   **Alignment of Script & Slides:**
    *   Speaker notes directly correspond to and expand upon the content presented on each slide.
*   **Audience Appropriateness:**
    *   Content, language, and level of detail are tailored to the target audience.
*   **Clear Key Messages:**
    *   The main takeaways or core messages of the presentation are evident.
*   **Time Management (Conceptual):**
    *   The amount of content and number of slides are appropriate for the allocated presentation time. (AI can be given a target duration).
*   **Visual Appeal (Conceptual for Slide Content):**
    *   Suggestions for slide layouts, graphics, charts, and images enhance understanding and engagement.

## 2. Key Stages & Processes Involved

1.  **Define Presentation Objective & Target Audience:**
    *   What is the main purpose of the presentation? (e.g., to inform, persuade, train, entertain).
    *   Who will be listening? What are their interests and prior knowledge?
2.  **Outline Presentation Structure:**
    *   Develop a high-level outline:
        *   **Opening/Hook:** Grab audience attention, state purpose.
        *   **Main Body:** 2-5 key sections or talking points.
        *   **Conclusion:** Summarize key messages, call to action (if any), Q&A.
3.  **Develop Content for Each Section:**
    *   Brainstorm key information, arguments, examples, and stories for each part of the outline.
4.  **Allocate Content to Slides:**
    *   Decide what information will go on each slide.
    *   Focus on one key idea or a few related points per slide.
5.  **Write Slide Content (Headlines & Key Bullet Points):**
    *   Craft clear, concise headlines for each slide.
    *   Write brief bullet points or short phrases summarizing key information.
6.  **Suggest Visuals for Slides:**
    *   For each slide, suggest appropriate visuals (e.g., "diagram illustrating X," "photo representing Y," "chart showing Z data," "relevant icon").
7.  **Write Speaker Notes (Script) for Each Slide:**
    *   Expand on the slide content with more detailed explanations, examples, anecdotes, and transitions.
    *   Write in a conversational style, as if speaking directly to the audience.
    *   Include cues for when to advance slides or refer to specific visuals.
8.  **Craft Introduction & Conclusion:**
    *   Develop a strong opening to engage the audience and set the stage.
    *   Create a memorable conclusion that reinforces key messages and provides a sense of closure.
9.  **Plan for Q&A (Optional):**
    *   Anticipate potential questions and briefly note key talking points for answers.
10. **Review & Refine:**
    *   Read through the entire presentation (script and slide content).
    *   Check for clarity, logical flow, engagement, and timing.
    *   Ensure consistency in tone and messaging.
    *   Proofread.

## 3. Inputs Required from User/System

*   **Topic of the Presentation:**
*   **Main Objective/Purpose:**
*   **Target Audience Profile:**
*   **Allocated Time for Presentation:**
*   **Key Messages or Information to Convey:**
*   **Desired Structure or Number of Main Points (Optional):**
*   **Any Specific Data, Examples, or Stories to Include:**
*   **Brand/Company Style Guidelines (if applicable):**
*   **Preferred Presentation Software (Optional, might influence visual suggestions):** (e.g., PowerPoint, Google Slides, Keynote, Slidev).

## 4. Potential Challenges & Considerations

*   **Information Overload:** Trying to cram too much information into the presentation or onto individual slides.
*   **"Death by PowerPoint":** Relying too heavily on text-dense slides rather than engaging visuals and spoken narrative.
*   **Pacing & Timing:** Accurately judging how long each section will take to present.
*   **Audience Engagement:** Keeping the audience interested and attentive.
*   **Visual Design (Beyond AI Scope):** AI suggests content for visuals, but actual graphic design is separate.
*   **Delivery Skills (Beyond AI Scope):** The effectiveness of the presentation also depends on the presenter's delivery.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Message:** Is the core purpose and key takeaways of the presentation clear?
*   **Logical Structure:** Does the presentation flow well from one point to the next?
*   **Engagement Potential:** Is the script interesting and the slide content supportive rather than distracting?
*   **Audience Appropriateness:** Is the content and language suitable for the intended audience?
*   **Balance of Script & Slides:** Do the speaker notes effectively complement the concise slide content?
*   **Actionability (for presenter):** Can a presenter confidently deliver this presentation based on the script and slide content?
*   **Completeness:** Does it cover the topic adequately for the given objective and time?
*   **Visual Suggestions:** Are the ideas for visuals relevant and likely to enhance understanding?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/educational-content-courseware-development/quiz-test-exam-question-generation.md
-----------------
# Use Case Definition: Quiz, Test, & Exam Question Generation

**Objective:** To generate a variety of question types (e.g., multiple-choice, true/false, short answer, essay) to assess learner understanding and knowledge of specific topics or learning objectives.

## 1. Core Requirements & Quality Indicators

*   **Alignment with Learning Objectives/Content:**
    *   Questions directly assess the knowledge and skills covered in the specified learning material or objectives.
*   **Clarity & Unambiguity:**
    *   Questions are phrased clearly and are easy to understand, avoiding confusing language or double negatives.
    *   For multiple-choice, distractors are plausible but clearly incorrect.
*   **Variety of Question Types (if requested):**
    *   Can generate different formats to assess various levels of understanding (e.g., recall, application, analysis).
*   **Appropriate Difficulty Level:**
    *   Questions are pitched at a suitable difficulty for the target learners' level.
*   **Accuracy of Correct Answers (if provided by AI):**
    *   If the AI also generates answer keys, the correct answers must be accurate.
*   **Plausibility of Distractors (for multiple-choice):**
    *   Incorrect options should be believable enough to test true understanding, not be obviously wrong.
*   **Avoidance of Trivial or "Trick" Questions:**
    *   Questions should be fair and designed to assess genuine understanding, not to trick students.
*   **Coverage of Key Concepts:**
    *   The set of questions adequately covers the important concepts from the source material.
*   **Originality (Avoids direct copying from source if possible):**
    *   Questions test understanding rather than simple memorization of verbatim text from source materials.

## 2. Key Stages & Processes Involved

1.  **Identify Key Concepts & Learning Objectives to Assess:**
    *   Review the source material (textbook chapter, lecture notes, lesson plan) or learning objectives.
    *   Pinpoint the most important information, skills, or concepts that need to be tested.
2.  **Determine Question Types & Number of Questions:**
    *   Based on user requirements or assessment goals, decide on the types of questions (multiple-choice, true/false, short answer, essay, fill-in-the-blank) and how many of each.
3.  **Generate Questions for Each Concept/Objective:**
    *   **Multiple-Choice:**
        *   Write a clear stem (the question or incomplete statement).
        *   Develop one correct answer.
        *   Create plausible but incorrect distractors (typically 2-4).
    *   **True/False:**
        *   Formulate a clear declarative statement that is definitively true or false based on the source material.
    *   **Short Answer:**
        *   Pose a question that requires a brief written response (a few words to a few sentences).
        *   Consider what would constitute a correct answer.
    *   **Essay:**
        *   Develop a prompt that requires a longer, more analytical or evaluative written response.
        *   May require synthesis of multiple concepts.
    *   **Fill-in-the-Blank:**
        *   Create a sentence with a key term or concept omitted.
4.  **Develop Answer Key (if required):**
    *   Provide the correct answers for objective questions (multiple-choice, true/false, fill-in-the-blank).
    *   For short answer/essay, outline key points or criteria for a correct/strong response.
5.  **Review & Refine Questions:**
    *   Check for clarity, accuracy, and appropriateness of difficulty.
    *   Ensure questions align with learning objectives.
    *   Verify that multiple-choice distractors are plausible.
    *   Eliminate any ambiguity or potential for misinterpretation.
    *   Proofread.

## 3. Inputs Required from User/System

*   **Source Material/Topic Area:** (e.g., specific textbook chapter, lecture content, list of learning objectives).
*   **Target Learner Level:** (e.g., elementary, high school, undergraduate, professional).
*   **Desired Question Types:** (e.g., "10 multiple-choice and 2 essay questions").
*   **Number of Questions:**
*   **Specific Concepts or Skills to Focus On (Optional):**
*   **Desired Difficulty Level (Optional):** (e.g., "easy recall," "application-based," "challenging").
*   **Bloom's Taxonomy Level (Optional):** If questions should target specific cognitive skills (knowledge, comprehension, application, analysis, synthesis, evaluation).
*   **Format for Output (Optional):** (e.g., numbered list, specific format for import into a learning management system).

## 4. Potential Challenges & Considerations

*   **Writing Good Distractors (Multiple-Choice):** Creating incorrect options that are plausible but not confusing or arguably correct.
*   **Assessing Higher-Order Thinking:** Moving beyond simple recall to create questions that test analysis, synthesis, and evaluation.
*   **Avoiding Bias:** Ensuring questions are fair and don't inadvertently favor certain groups of students.
*   **Clarity of Phrasing:** Ambiguous questions lead to unreliable assessment.
*   **Source Material Dependency:** Quality of questions often depends on the clarity and comprehensiveness of the provided source material.
*   **Preventing "Testwiseness":** Designing questions where students can't guess the answer based on cues in the question itself.

## 5. Metrics for Success (How to Evaluate Output)

*   **Alignment with Objectives/Content:** Do the questions accurately test the specified material?
*   **Clarity & Unambiguity:** Are the questions easy to understand?
*   **Appropriateness of Difficulty:** Is the challenge level suitable for the target learners?
*   **Quality of Distractors (for MCQs):** Are they plausible yet incorrect?
*   **Variety (if requested):** Is there a good mix of question types?
*   **Accuracy of Answer Key (if provided):**
*   **Potential for Fair Assessment:** Do the questions seem like a fair way to evaluate understanding?
*   **Coverage:** Do the questions adequately sample the key concepts from the source material?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/educational-content-courseware-development/curriculum-design-syllabus-generation.md
-----------------
# Use Case Definition: Curriculum Design & Syllabus Generation

**Objective:** To design a comprehensive curriculum for a course or learning program, and generate a syllabus that outlines the course structure, learning objectives, topics, schedule, materials, and assessment methods.

## 1. Core Requirements & Quality Indicators

*   **For Curriculum Design:**
    *   **Logical Sequencing of Topics:** Content is organized in a progressive manner, building from foundational concepts to more advanced ones.
    *   **Comprehensive Coverage:** Includes all essential topics and skills required to meet the overall learning goals.
    *   **Alignment with Learning Outcomes:** The curriculum is designed to achieve specific, measurable learning outcomes for the entire course/program.
    *   **Integration of Learning Activities & Assessments:** Suggests appropriate types of activities and assessments for different topics.
    *   **Modularity (Often):** May be broken into modules or units with their own objectives.
*   **For Syllabus Generation:**
    *   **Completeness of Information:** Includes all standard syllabus components (course description, objectives, topics, schedule, readings/materials, grading policy, instructor info, policies).
    *   **Clarity & Organization:** Information is presented clearly and is easy for students to navigate and understand.
    *   **Accuracy:** All dates, policies, and material lists are correct.
    *   **Alignment with Curriculum:** The syllabus accurately reflects the designed curriculum.
    *   **Sets Clear Expectations:** Clearly communicates course requirements, expectations, and evaluation criteria to students.

## 2. Key Stages & Processes Involved

1.  **Define Overall Course/Program Goals & Target Audience:**
    *   What should learners know or be able to do upon completion of the entire course/program?
    *   Who are the learners (background, prior knowledge, needs)?
2.  **Identify Core Competencies & Knowledge Areas:**
    *   Break down the overall goals into major skill or knowledge domains.
3.  **Sequence Topics & Modules (Curriculum Design):**
    *   Arrange topics and modules in a logical learning progression.
    *   Consider dependencies between topics.
4.  **Define Learning Objectives for Each Module/Unit:**
    *   Specify what learners will achieve in each section of the curriculum.
5.  **Select Content, Learning Activities, and Assessment Strategies for Each Module:**
    *   What information will be covered? How will it be taught (lectures, readings, projects, discussions)? How will learning be assessed?
6.  **Draft Syllabus Content:**
    *   **Course Information:** Title, number, instructor, contact, office hours.
    *   **Course Description:** Overview, purpose, and relevance.
    *   **Learning Objectives/Outcomes (Overall Course):**
    *   **Required & Recommended Materials/Readings:** Textbooks, software, articles.
    *   **Topical Outline/Schedule:** Week-by-week or module-by-module breakdown of topics, readings, assignments, and due dates.
    *   **Grading Policy & Assessment Breakdown:** How grades are calculated, types of assessments (exams, papers, projects, participation).
    *   **Course Policies:** Attendance, late work, academic integrity, disability accommodations, etc.
7.  **Structure and Format Syllabus Document:**
    *   Organize sections logically with clear headings.
8.  **Review Curriculum & Syllabus:**
    *   Check for alignment, completeness, clarity, accuracy, and logical flow.
    *   Ensure it meets institutional or program requirements if applicable.

## 3. Inputs Required from User/System

*   **Subject Matter/Field of Study:**
*   **Overall Course/Program Title & Goals:**
*   **Target Learner Profile:** (e.g., undergraduate students, adult learners, professionals).
*   **Duration of Course/Program & Class Meeting Schedule (for syllabus):**
*   **Key Topics or Skills to be Covered (Essential):**
*   **Preferred Teaching Methods or Learning Philosophies (Optional):**
*   **Assessment Preferences (Optional):** (e.g., project-based, exam-heavy).
*   **List of Required/Recommended Textbooks or Resources (if known):**
*   **Institutional Syllabus Template or Requirements (if any):**
*   **Accreditation or Programmatic Standards to Adhere To (if any):**

## 4. Potential Challenges & Considerations

*   **Scope Definition:** Determining what can realistically be covered in the allotted time.
*   **Balancing Breadth vs. Depth:** Covering enough topics versus going deep into a few.
*   **Sequencing Complexity:** Ordering topics for optimal learning can be challenging.
*   **Assessment Alignment:** Ensuring assessments truly measure the stated learning objectives.
*   **Keeping Content Current:** Curricula and syllabi need regular updates, especially in rapidly changing fields.
*   **Flexibility:** Designing a curriculum that can adapt to student needs or unexpected events.

## 5. Metrics for Success (How to Evaluate Output)

*   **Curriculum Design:**
    *   **Logical Progression:** Do topics build on each other effectively?
    *   **Comprehensive Coverage:** Are all essential areas included for the stated goals?
    *   **Alignment with Outcomes:** Is the curriculum likely to achieve the overall learning outcomes?
*   **Syllabus Generation:**
    *   **Clarity & Completeness:** Is all necessary information present and easy for a student to understand?
    *   **Actionability:** Does it provide a clear roadmap for the course?
    *   **Accuracy of Schedule & Policies:**
    *   **Alignment with Curriculum:** Does it accurately represent the planned course of study?
    *   **Professionalism:** Is it well-formatted and error-free?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/educational-content-courseware-development/explainer-video-scriptwriting.md
-----------------
# Use Case Definition: Explainer Video Scriptwriting

**Objective:** To write a concise, engaging, and easy-to-understand script for a short explainer video (typically 1-3 minutes) that clearly communicates a concept, product, service, or process.

## 1. Core Requirements & Quality Indicators

*   **Clarity & Simplicity:**
    *   Explains complex topics in simple, accessible language.
    *   Avoids jargon or explains it clearly.
*   **Conciseness:**
    *   Delivers the core message efficiently within a short timeframe.
    *   Every word and scene contributes to the explanation.
*   **Engaging Narrative:**
    *   Grabs viewer attention quickly and maintains it throughout.
    *   May use storytelling, analogies, or relatable scenarios.
*   **Logical Flow:**
    *   Information is presented in a clear, logical sequence (e.g., Problem -> Solution -> Benefits -> Call to Action).
*   **Visual Storytelling Cues:**
    *   Script includes suggestions for visuals (animations, graphics, on-screen text, live-action scenes) that complement and enhance the narration.
*   **Clear Call to Action (if applicable):**
    *   If the video has a specific goal (e.g., visit website, sign up), it includes a clear CTA.
*   **Appropriate Tone & Pace:**
    *   Tone is suitable for the brand and target audience (e.g., friendly, professional, enthusiastic).
    *   Pacing of narration allows for visuals to sync and for viewers to absorb information.
*   **Memorability:**
    *   Key messages are easy to remember.

## 2. Key Stages & Processes Involved

1.  **Define Objective, Target Audience, and Key Message:**
    *   What is the primary goal of the video? (e.g., explain a product, simplify a concept).
    *   Who is the video for?
    *   What is the single most important takeaway for the viewer?
2.  **Determine Video Length & Style:**
    *   Estimate target duration (e.g., 60 seconds, 90 seconds, 2 minutes).
    *   Consider the visual style (e.g., animation, live-action, screen recording with voiceover).
3.  **Outline the Script (Storyboarding Conceptually):**
    *   **Hook (0-10 seconds):** Grab attention immediately, state the problem or core question.
    *   **Problem/Context (10-30 seconds):** Elaborate on the pain point or introduce the concept.
    *   **Solution/Explanation (30-70 seconds):** Introduce the product/service/concept as the solution or explain it clearly. Highlight key benefits/features.
    *   **Call to Action (Optional, 70-90 seconds):** Tell viewers what to do next.
    *   **Branding/Outro:** Reinforce brand, provide contact info.
4.  **Write the Narration Script:**
    *   Use conversational, clear, and concise language.
    *   Read aloud to check timing (approx. 150 words per minute for average narration pace).
    *   Break narration into short segments corresponding to potential scenes or visual changes.
5.  **Develop Visual Cues/Scene Descriptions:**
    *   For each segment of narration, describe the accompanying visuals.
    *   Think about how visuals can illustrate or reinforce the spoken words.
    *   (e.g., "Narrator: Our product simplifies X. Visual: Animation showing a complex process becoming simple").
6.  **Integrate On-Screen Text (if any):**
    *   Suggest key phrases or data points that could appear as text overlays.
7.  **Refine for Clarity, Engagement, and Timing:**
    *   Ensure the message is crystal clear.
    *   Cut any unnecessary words or complex sentences.
    *   Check that the script flows well and maintains interest.
    *   Adjust script length to fit the target duration.
8.  **Format as a Two-Column Script (Common):**
    *   Left column for Visuals/On-Screen Text.
    *   Right column for Audio/Narration/Sound Effects.

## 3. Inputs Required from User/System

*   **Topic/Product/Service/Concept to be Explained:**
*   **Primary Goal of the Video:**
*   **Target Audience:**
*   **Key Message(s) to Convey:**
*   **Desired Video Length (Approximate):**
*   **Brand Voice & Tone:**
*   **Call to Action (if any):**
*   **Any Specific Visual Ideas or Constraints (Optional):**
*   **Core Benefits/Features to Highlight:**
*   **Examples of Explainer Videos Liked by User (Optional):**

## 4. Potential Challenges & Considerations

*   **Brevity:** Condensing complex information into a very short script.
*   **Engagement:** Keeping viewers watching for the entire duration.
*   **Visual Thinking:** Scripting not just words but also guiding the visual narrative.
*   **Simplification without Oversimplification:** Explaining accurately but simply.
*   **Pacing:** Matching narration speed with visual complexity and viewer comprehension.
*   **Production (Beyond AI Scope):** AI writes the script; actual video production (animation, filming, editing, voiceover) is a separate, complex process.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Explanation:** Does the script make the topic easy to understand?
*   **Engagement Factor:** Is the script interesting and likely to hold viewer attention?
*   **Conciseness:** Does it deliver the message effectively within the typical short timeframe of an explainer video?
*   **Actionability of Visual Cues:** Are the suggestions for visuals clear and helpful for a video producer/animator?
*   **Logical Flow:** Does the script progress in a clear and understandable manner?
*   **Effectiveness of CTA (if present):** Is the call to action clear and compelling?
*   **Tone Appropriateness:** Does the script's tone match the brand and target audience?
*   **Completeness (for the core message):** Does it cover the essential points needed to achieve the video's objective?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/content-editing-and-refinement/readability-improvement-simplification.md
-----------------
# Use Case Definition: Readability Improvement & Simplification

**Objective:** To revise existing text content to make it easier to read, understand, and digest, often by simplifying complex language, shortening sentences, and improving overall structure and flow, without losing essential meaning.

## 1. Core Requirements & Quality Indicators

*   **Enhanced Clarity:**
    *   The revised text is significantly easier to understand than the original.
    *   Ambiguities and complex constructions are resolved.
*   **Simplified Language:**
    *   Jargon, technical terms, and overly academic vocabulary are replaced with simpler alternatives, or clearly explained if essential.
    *   Uses common, everyday words where possible.
*   **Improved Sentence Structure:**
    *   Long, convoluted sentences are broken down into shorter, more digestible units.
    *   Active voice is preferred over passive voice where it improves clarity.
    *   Sentence structures are varied but generally straightforward.
*   **Better Organization & Flow:**
    *   Information is presented in a more logical sequence.
    *   Improved use of transitions to connect ideas.
    *   Paragraphs are focused and well-structured.
*   **Preservation of Core Meaning:**
    *   The essential information and intent of the original text are accurately maintained. Simplification should not lead to oversimplification that distorts meaning.
*   **Audience Appropriateness:**
    *   The level of simplification is appropriate for the intended target audience (e.g., general public, students, non-native speakers).
*   **Conciseness (Often a Byproduct):**
    *   Simplification often leads to more concise text by removing unnecessary complexity and wordiness.

## 2. Key Stages & Processes Involved

1.  **Analyze Original Text for Complexity:**
    *   Identify areas with complex vocabulary, long sentences, passive voice, dense paragraphs, jargon, and abstract concepts.
    *   Understand the core message and supporting details.
2.  **Define Target Audience & Desired Level of Simplicity:**
    *   Who is the simplified text for? What is their likely reading level or background knowledge?
3.  **Simplify Vocabulary:**
    *   Replace complex or technical words with simpler, more common synonyms.
    *   Explain essential jargon if it cannot be avoided.
4.  **Restructure Sentences:**
    *   Break down long, multi-clause sentences into shorter ones.
    *   Convert passive voice to active voice where appropriate.
    *   Ensure clear subject-verb-object structures.
5.  **Clarify Concepts:**
    *   Rephrase abstract or complex ideas in more concrete terms.
    *   Use analogies or simple examples if helpful.
6.  **Improve Organization & Flow:**
    *   Reorder information for better logical progression if needed.
    *   Add or improve transition words and phrases.
    *   Ensure each paragraph has a clear topic sentence and focus.
    *   Use bullet points or numbered lists for series of items or steps if it enhances clarity.
7.  **Remove Redundancy & Wordiness:**
    *   Eliminate unnecessary words, phrases, or repetitions.
8.  **Review & Compare:**
    *   Check the simplified version against the original to ensure meaning is preserved.
    *   Assess if the readability has genuinely improved for the target audience.
    *   Proofread for any errors.

## 3. Inputs Required from User/System

*   **Original Text Content:** The text to be simplified.
*   **Target Audience (Important):** Who is this simplified version for? (e.g., "explain this to a 5th grader," "make this understandable for a general audience").
*   **Specific Areas of Confusion (Optional):** If the user can point out parts of the original they find difficult.
*   **Desired Level of Simplification (Optional):** (e.g., "slightly simpler," "much simpler," "plain language").
*   **Purpose of the Simplified Text (Optional):** Why is simplification needed?

## 4. Potential Challenges & Considerations

*   **Oversimplification:** Losing critical nuance or technical accuracy in an attempt to be too simple.
*   **Patronizing Tone:** Simplified text can sometimes sound condescending if not handled carefully.
*   **Maintaining Authoritative Voice (if needed):** Simplifying without losing the sense of expertise if the original was authoritative.
*   **Highly Technical Content:** Some concepts are inherently complex and can only be simplified to a certain extent without losing meaning.
*   **Subjectivity of "Simple":** What is simple for one person may still be complex for another.

## 5. Metrics for Success (How to Evaluate Output)

*   **Improved Readability Scores (Conceptual):** If tools were used, readability metrics (e.g., Flesch-Kincaid, Gunning Fog) would ideally show improvement.
*   **Clarity for Target Audience:** Is the revised text demonstrably easier for the intended audience to understand?
*   **Meaning Preservation:** Has the core message been accurately retained?
*   **Absence of Jargon (or clear explanation):** Is specialized language handled appropriately?
*   **Sentence Simplicity:** Are sentences generally shorter and less complex?
*   **Logical Flow:** Is the information presented in an easy-to-follow manner?
*   **User Feedback:** Does the user find the simplified version effective?

## 6. Example Output Structure/Format
**Scenario:** User provides a complex sentence and asks for simplification for a general audience.
*   **User Input:**
    *   Original Text: "The epistemological underpinnings of post-structuralist discourse necessitate a deconstruction of logocentric paradigms to unveil the inherent multiplicity of meaning."
    *   Target Audience: General public.

*   **Cline Generated Simplified Text:**

    "Post-structuralist thinking challenges the idea that words have single, fixed meanings. It suggests we need to look closely at how language is used to find the many different meanings that can exist."

    *Alternative (even simpler):*
    "Some modern thinkers believe that words can mean many different things. They say we should question the idea that there's only one 'true' meaning for something."

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Readability Improvement & Simplification"
path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/readability-improvement-simplification.md"
type: "use_case_guide"
description: "Revises text to make it easier to read and understand by simplifying language, shortening sentences, and improving structure."
triggers: ["improve readability", "simplify text", "make content clearer", "plain language editing", "explain simply"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/content-editing-and-refinement/translation-localization-content.md
-----------------
# Use Case Definition: Translation and Localization of Content

**Objective:** To translate text content from a source language to one or more target languages, and to adapt (localize) it to suit the cultural, linguistic, and contextual nuances of the target audience/market.

## 1. Core Requirements & Quality Indicators

*   **Accuracy of Translation:**
    *   The meaning, intent, and nuances of the source text are accurately conveyed in the target language(s).
    *   Avoids literal translations that sound unnatural or incorrect.
*   **Linguistic Fluency & Naturalness:**
    *   The translated text reads fluently and naturally in the target language, as if originally written in that language.
    *   Correct grammar, syntax, spelling, and punctuation in the target language.
*   **Cultural Appropriateness (Localization):**
    *   Content is adapted to be culturally sensitive and appropriate for the target audience. This includes:
        *   Adjusting idioms, metaphors, and humor.
        *   Considering local customs, values, and sensitivities.
        *   Adapting units of measurement, date formats, currency, addresses, etc.
*   **Contextual Relevance (Localization):**
    *   Examples, references, and imagery (if AI is suggesting based on text) are relevant to the target market.
*   **Consistency of Terminology:**
    *   Key terms and brand-specific language are translated consistently throughout the content and across related materials (may require a glossary).
*   **Preservation of Tone & Style:**
    *   The original tone and style (e.g., formal, informal, persuasive) are maintained in the translation, unless a specific adaptation is requested.
*   **Completeness:**
    *   All relevant parts of the source text are translated.

## 2. Key Stages & Processes Involved

1.  **Source Text Analysis:**
    *   Thoroughly understand the source text, including its meaning, purpose, tone, style, and target audience.
    *   Identify any culturally specific elements, idioms, or nuances that may require careful adaptation.
2.  **Define Target Language(s) & Locale(s):**
    *   Specify the exact target language and regional variation (e.g., French for France vs. French for Canada).
3.  **Glossary & Style Guide Development/Consultation (if available):**
    *   If a glossary of approved translations for key terms or a localization style guide exists, consult it. Otherwise, establish consistent translations for recurring terms.
4.  **Initial Translation:**
    *   Translate the text from the source language to the target language, focusing on conveying meaning accurately and naturally.
5.  **Localization & Cultural Adaptation:**
    *   Review the translated text for cultural relevance and appropriateness.
    *   Adapt idioms, humor, examples, units of measurement, date/time formats, currency, etc.
    *   Ensure names, places, and references are suitable for the target locale.
    *   Consider legal or regulatory differences if applicable.
6.  **Review & Editing by a Fluent Speaker (Ideally Native):**
    *   A fluent (preferably native) speaker of the target language reviews the translation for accuracy, fluency, naturalness, and cultural appropriateness. (AI simulates this step by self-correction and applying linguistic knowledge).
7.  **Proofreading:**
    *   Check for any grammatical, spelling, or punctuation errors in the target language.
8.  **Contextual Review (if possible):**
    *   Review the translated and localized content in its intended final context (e.g., on a webpage, in an app) to ensure it fits and functions correctly.

## 3. Inputs Required from User/System

*   **Source Text Content:** The text to be translated and localized.
*   **Source Language:**
*   **Target Language(s) and Specific Locale(s):** (e.g., "Spanish for Spain," "Brazilian Portuguese").
*   **Target Audience Profile for Each Locale:**
*   **Purpose of the Translated/Localized Content:**
*   **Brand Voice/Style Guidelines (if applicable, and how they adapt to different locales):**
*   **Glossary of Key Terms/Brand Names (if available, with existing translations):**
*   **Context of Use:** Where will this translated content appear?
*   **Any Specific Elements to Pay Close Attention To:** (e.g., product names that should not be translated, sensitive topics).
*   **Examples of Previously Localized Content (Optional):**

## 4. Potential Challenges & Considerations

*   **Cultural Nuances & Untranslatable Concepts:** Some ideas, humor, or idioms don't translate directly and require creative adaptation.
*   **Maintaining Consistency:** Ensuring consistent terminology and style across large volumes of content or multiple languages.
*   **Technical Terminology:** Accurately translating specialized or technical terms.
*   **Text Expansion/Contraction:** Translated text can be significantly longer or shorter than the source, impacting layout.
*   **Right-to-Left (RTL) Languages:** If translating to/from languages like Arabic or Hebrew, layout considerations are significant (though AI primarily handles text).
*   **Quality Control:** Ensuring high-quality translation and localization, especially without human native speaker review, is a major challenge for AI.
*   **Legal & Regulatory Differences:** Content may need adaptation to comply with local laws.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy of Meaning:** Is the core message of the source text faithfully conveyed?
*   **Linguistic Correctness:** Is the target language grammar, spelling, and punctuation flawless?
*   **Naturalness & Fluency:** Does it read like it was originally written in the target language?
*   **Cultural Appropriateness:** Is it well-adapted to the target culture, avoiding offense or misinterpretation?
*   **Consistency:** Is terminology used consistently?
*   **Completeness:** Has all relevant source content been translated and localized?
*   **Tone Preservation/Adaptation:** Is the intended tone effectively rendered in the target language?
*   **User/Target Audience Acceptance (Indirect):** Would a native speaker from the target locale find the content clear, natural, and appropriate?

## 6. Example Output Structure/Format
**Scenario:** User wants to translate a simple English marketing slogan into Spanish for Spain, with localization.
*   **User Input:**
    *   Source Text: "Our new app: Your daily dose of sunshine!"
    *   Source Language: English (US)
    *   Target Language & Locale: Spanish (Spain)
    *   Purpose: App store description snippet.
    *   Brand Voice: Playful, friendly.

*   **Cline Generated Translated & Localized Text:**

    **Original (English US):** "Our new app: Your daily dose of sunshine!"

    **Translation & Localization (Spanish - Spain):**
    "Nuestra nueva app: ¡Tu rayito de sol diario!"

    *   **Localization Notes/Rationale:**
        *   "Rayito de sol" (little ray of sunshine) maintains the playful and positive imagery of "dose of sunshine" while being a natural and endearing expression in Spanish.
        *   Using "¡...!" for exclamations is standard.
        *   "Diario" correctly translates to "daily."
        *   The overall tone remains friendly and inviting.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Translation and Localization of Content"
path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/translation-localization-content.md"
type: "use_case_guide"
description: "Translates text and adapts (localizes) it for cultural and linguistic nuances of a target audience/market."
triggers: ["translate content", "localize text", "multilingual adaptation", "translate to spanish", "localize for japan"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/content-editing-and-refinement/paraphrasing-rewriting-content.md
-----------------
# Use Case Definition: Paraphrasing and Rewriting Content

**Objective:** To rephrase existing text content in different words while retaining the original meaning, often to avoid plagiarism, simplify complex language, adapt for a new audience, or refresh existing content.

## 1. Core Requirements & Quality Indicators

*   **Meaning Preservation (Paramount):**
    *   The rewritten text must accurately convey the same core information and intent as the original.
    *   No critical information should be lost, added, or distorted.
*   **Originality of Phrasing:**
    *   Uses significantly different vocabulary and sentence structure from the source text.
    *   Avoids simply rearranging words or changing a few synonyms (which can still be plagiarism).
*   **Clarity & Readability:**
    *   The rewritten text is clear, coherent, and easy to understand.
    *   Grammatically correct and well-structured.
*   **Contextual Appropriateness:**
    *   If rewriting for a new audience or purpose, the style, tone, and complexity are adjusted accordingly.
*   **Natural Language:**
    *   The rewritten text flows naturally and does not sound artificial or machine-generated.
*   **Completeness:**
    *   All key aspects of the original text are addressed in the paraphrase or rewrite.

## 2. Key Stages & Processes Involved

1.  **Deep Comprehension of Original Text:**
    *   Thoroughly read and understand the source material to grasp its meaning, nuances, and key arguments.
2.  **Identify Core Ideas & Information:**
    *   Extract the essential concepts, facts, and messages from the original text.
3.  **Rephrase in Own Words (Conceptual for AI):**
    *   Mentally (or by generating intermediate notes) re-explain the concepts using different vocabulary and sentence structures.
    *   Focus on conveying the *meaning*, not just replacing words.
4.  **Draft the Rewritten Content:**
    *   Write the new version, ensuring it flows logically and cohesively.
    *   Vary sentence beginnings and structures.
    *   Use synonyms appropriately and consider the connotations of word choices.
5.  **Compare with Original:**
    *   Carefully check the rewritten version against the source text to ensure:
        *   Meaning is accurately preserved.
        *   No important information is omitted.
        *   The phrasing is sufficiently different to be considered original.
6.  **Refine for Clarity, Flow, and Style:**
    *   Improve readability and ensure the tone is appropriate.
    *   Check for any awkward phrasing or grammatical errors.
7.  **Plagiarism Check (Conceptual/External):**
    *   Ideally, the rewritten content would pass a plagiarism checker when compared to the original. (AI aims for this, but external verification is best).

## 3. Inputs Required from User/System

*   **Original Text Content:** The passage, sentences, or document to be paraphrased or rewritten.
*   **Purpose of Rewriting (Important):**
    *   To simplify complex text?
    *   To avoid plagiarism?
    *   To adapt for a different audience (e.g., children, experts)?
    *   To change the tone or style?
    *   To refresh old content?
*   **Target Audience (if different from original):**
*   **Desired Style/Tone (if different from original):**
*   **Specific Keywords to Include/Avoid (Optional):**
*   **Desired Length (Optional, if different from original, though paraphrasing usually aims for similar length):**

## 4. Potential Challenges & Considerations

*   **Maintaining Meaning Accurately:** The biggest challenge is rephrasing without subtly changing the original intent or information.
*   **Avoiding "Patchwriting":** Simply replacing a few words in each sentence is not true paraphrasing and can lead to plagiarism.
*   **Handling Technical or Specialized Terminology:** Deciding whether to keep specific terms or find simpler alternatives, depending on the purpose.
*   **Preserving Authorial Voice (if needed):** Sometimes the goal is to rephrase while still sounding like the original author; other times, a complete voice shift is desired.
*   **Complexity of Original Text:** Very dense or poorly written source material is harder to paraphrase effectively.
*   **Ethical Use:** Paraphrasing must be done ethically, giving credit to the original source if the ideas are not common knowledge.

## 5. Metrics for Success (How to Evaluate Output)

*   **Semantic Equivalence:** Does the rewritten text mean the same thing as the original?
*   **Lexical & Structural Difference:** Is the vocabulary and sentence structure sufficiently different from the original?
*   **Clarity & Readability:** Is the new version easy to understand?
*   **Naturalness:** Does it sound like fluent, natural language?
*   **Purpose Fulfillment:** If rewritten for a specific purpose (e.g., simplification), does it achieve that goal?
*   **Grammatical Correctness:** Is the rewritten text free of errors?
*   **Originality (Plagiarism Avoidance):** Would it be considered an original expression of the source ideas?

## 6. Example Output Structure/Format
**Scenario:** User wants to paraphrase a sentence to avoid plagiarism and simplify it.
*   **User Input:**
    *   Original Text: "The intricate and multifaceted nature of quantum entanglement posits a significant conundrum for physicists endeavoring to reconcile it with classical mechanics."
    *   Purpose: Simplify and rephrase for a general audience.

*   **Cline Generated Paraphrased Text:**
    "Quantum entanglement, with its complex and many-sided characteristics, presents a major puzzle for physicists who are trying to make it compatible with traditional physics concepts."

    *Alternative (more simplified):*
    "Physicists find quantum entanglement very puzzling because its complex nature is hard to fit with older ideas about how physics works."

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Paraphrasing & Rewriting Content"
path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/paraphrasing-rewriting-content.md"
type: "use_case_guide"
description: "Rephrases existing text in different words while retaining original meaning, for various purposes like simplification or plagiarism avoidance."
triggers: ["paraphrase text", "rewrite content", "rephrase sentence", "simplify language", "reword document"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/content-editing-and-refinement/content-summarization.md
-----------------
# Use Case Definition: Content Summarization

**Objective:** To condense a longer piece of text content into a shorter version that captures the main points, key information, and core message, tailored to a specified length or level of detail.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Faithfulness:**
    *   The summary accurately reflects the main ideas and essential information of the original text.
    *   Does not misrepresent or distort the source material.
*   **Comprehensiveness (within limits):**
    *   Includes all critical information and key takeaways from the original.
    *   The level of detail matches the user's requirement (e.g., abstract, executive summary, brief overview).
*   **Conciseness & Brevity:**
    *   Significantly shorter than the original text.
    *   Eliminates redundant information, minor details, and fluff while retaining core substance.
*   **Clarity & Readability:**
    *   The summary is well-written, clear, and easy to understand on its own.
    *   Uses coherent language and logical flow.
*   **Objectivity (Usually):**
    *   Typically, summaries should be objective and reflect the content of the source, not inject new opinions or interpretations, unless an "analytical summary" is specifically requested.
*   **Independence:**
    *   A good summary can often be understood without having read the original document.
*   **Adherence to Length Constraints:**
    *   Meets any specified length requirements (e.g., word count, number of sentences, percentage of original).

## 2. Key Stages & Processes Involved

1.  **Full Comprehension of Source Text:**
    *   Thoroughly read and understand the original document to identify its purpose, main arguments, supporting points, and conclusion.
2.  **Identify Key Information & Main Ideas:**
    *   Pinpoint the most important concepts, arguments, findings, and conclusions in the source text.
    *   Distinguish between essential information and supporting details or examples.
3.  **Determine Scope & Length of Summary:**
    *   Clarify the desired length and level of detail for the summary based on user requirements.
4.  **Draft the Summary:**
    *   Begin by stating the main topic or thesis of the original text.
    *   Present the key points and supporting information in a logical order.
    *   Use your own words as much as possible, avoiding direct copying of long passages (unless quoting for a specific reason).
    *   Focus on conveying the essence of the original content.
5.  **Refine & Edit for Conciseness:**
    *   Eliminate redundant words, phrases, and sentences.
    *   Combine related ideas where possible.
    *   Ensure every sentence contributes to the summary's purpose.
6.  **Check for Accuracy & Completeness:**
    *   Compare the summary against the original text to ensure it accurately reflects the source and hasn't omitted critical information.
7.  **Proofread:**
    *   Check for grammar, spelling, and punctuation errors.

## 3. Inputs Required from User/System

*   **Original Text Content:** The document, article, report, or passage to be summarized.
*   **Desired Length/Level of Detail:** (e.g., "a one-paragraph summary," "a 300-word abstract," "key bullet points," "a 5-sentence summary").
*   **Purpose of the Summary (Optional):** (e.g., "for a quick overview," "to include in a presentation," "to decide if I should read the full document").
*   **Specific Aspects to Focus On (Optional):** If the user wants the summary to highlight particular themes or sections.
*   **Format for the Summary (Optional):** (e.g., paragraph, bullet points).

## 4. Potential Challenges & Considerations

*   **Identifying True Main Points:** Distinguishing essential information from less critical details, especially in complex or poorly structured texts.
*   **Maintaining Nuance:** Summaries, by nature, lose some of the detail and nuance of the original.
*   **Avoiding Personal Interpretation/Bias:** Sticking to what the original text actually says.
*   **Balancing Conciseness with Informativeness:** Making it short enough but still useful.
*   **Handling Highly Technical or Specialized Content:** Requires understanding the jargon to summarize accurately.
*   **Source Text Quality:** Summarizing a poorly written or disorganized document is more challenging.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy:** Does the summary correctly represent the key information and arguments of the original text?
*   **Completeness:** Does it include all the essential points relevant to the requested level of detail?
*   **Conciseness:** Is it significantly shorter than the original while retaining core meaning? Does it meet length requirements?
*   **Clarity:** Is the summary easy to understand?
*   **Coherence:** Do the summarized points flow logically?
*   **Objectivity:** Does it avoid introducing outside opinions or misrepresenting the source?
*   **Usefulness:** Would someone reading the summary get a good understanding of the original content's essence?

## 6. Example Output Structure/Format
**Scenario:** User provides a short news article and requests a one-sentence summary and a three-bullet-point summary.
*   **User Input:**
    *   Original Text: "The City Council today approved a new initiative aimed at increasing green spaces within the urban core. The plan involves converting several underutilized parking lots into small public parks over the next two years. Funding for the project will come from a combination of municipal bonds and private donations. Councilmember Jane Doe, who championed the initiative, stated that this project will not only beautify the city but also improve air quality and provide residents with more recreational opportunities. The first phase is expected to begin this fall."
    *   Desired Lengths: One sentence; three bullet points.

*   **Cline Generated Summaries:**

    **One-Sentence Summary:**
    The City Council has approved a two-year initiative to convert underutilized parking lots into public parks, funded by municipal bonds and private donations, to beautify the city, improve air quality, and offer more recreational spaces, with the first phase starting this fall.

    **Three-Bullet-Point Summary:**
    *   The City Council approved a plan to create new public parks from underutilized parking lots over two years.
    *   The project, funded by municipal bonds and private donations, aims to enhance urban green spaces, improve air quality, and provide recreational areas.
    *   Championed by Councilmember Jane Doe, the first phase is set to begin in the fall.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Content Summarization"
path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/content-summarization.md"
type: "use_case_guide"
description: "Condenses longer text into a shorter version, capturing main points and key information, tailored to a specified length or detail level."
triggers: ["summarize text", "content summary", "abstract generation", "executive summary", "key takeaways from document"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/content-editing-and-refinement/fact-checking-assistance.md
-----------------
# Use Case Definition: Fact-Checking Assistance

**Objective:** To assist a user in verifying the factual accuracy of claims made within a piece of text content by identifying verifiable statements, suggesting credible sources for verification, and (if capable and tooled) cross-referencing claims against known information.

## 1. Core Requirements & Quality Indicators

*   **Identification of Verifiable Claims:**
    *   Accurately identifies statements within the text that are presented as facts and are, in principle, verifiable.
    *   Distinguishes factual claims from opinions, subjective statements, or purely creative content.
*   **Suggestion of Credible Sources:**
    *   Proposes relevant and reputable sources (e.g., established news organizations, academic journals, official government/organizational websites, encyclopedias) where the identified claims can be checked.
*   **Accuracy of Verification (if AI performs it):**
    *   If the AI attempts to verify a claim using its knowledge base or tools, the verification (confirming or refuting) must be accurate and based on reliable information.
    *   Clearly states confidence levels if verification is uncertain.
*   **Neutrality & Objectivity:**
    *   Approaches fact-checking neutrally, without bias towards confirming or refuting claims.
*   **Clarity of Output:**
    *   Clearly presents the claims identified for checking.
    *   Clearly presents suggested sources or the results of any AI-led verification.
*   **Focus on Factual Assertions:**
    *   Primarily concerned with objective facts rather than interpretations or opinions, unless the task is specifically to check the source of an opinion.

## 2. Key Stages & Processes Involved

1.  **Text Analysis & Claim Identification:**
    *   Read the input text thoroughly.
    *   Identify specific statements that assert factual information (e.g., statistics, dates, events, scientific statements, attributions of quotes).
2.  **Source Identification Strategy:**
    *   For each identified claim, determine the types of sources that would be most appropriate for verification.
3.  **Suggesting Verification Sources/Methods:**
    *   Provide the user with a list of identified claims and suggest credible sources or search queries they can use to verify each claim.
4.  **(Optional/Advanced) AI-Assisted Verification (if tooled/capable):**
    *   Use available tools (e.g., web search, knowledge base query) to attempt to verify identified claims.
    *   Compare the claim with information found in reliable sources.
    *   Report findings: confirmed, refuted, partially true, or unable to verify (with reasons).
5.  **Reporting Results:**
    *   Present the list of claims.
    *   For each claim, provide either:
        *   Suggested sources/methods for user verification.
        *   The AI's verification findings, along with the sources used by the AI.

## 3. Inputs Required from User/System

*   **Text Content to be Fact-Checked:**
*   **Specific Claims to Verify (Optional):** If the user wants to focus on particular statements.
*   **Context of the Content (Optional):** Knowing the source or purpose of the text can sometimes help in identifying appropriate verification sources.
*   **Known Reliable Sources (Optional):** If the user has preferred sources to check against.

## 4. Potential Challenges & Considerations

*   **Defining a "Fact":** Distinguishing between objective facts, widely accepted theories, opinions, and interpretations can be complex.
*   **Nuance and Context:** Factual claims can be true in one context but misleading in another.
*   **Outdated Information:** Facts can change over time (e.g., "the tallest building in the world").
*   **Misinformation & Disinformation:** Identifying and verifying claims in an environment with deliberate falsehoods.
*   **Source Reliability:** Assessing the credibility of various sources is crucial and can be challenging.
*   **AI Knowledge Cutoff:** AI's internal knowledge is not always up-to-date, making external verification tools essential for current events or recent data.
*   **Confirmation Bias:** Guarding against the tendency to seek out information that confirms pre-existing beliefs.
*   **Complexity of Claims:** Some claims require deep subject matter expertise to verify.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy of Claim Identification:** Are the identified statements genuinely verifiable factual claims?
*   **Quality of Source Suggestions:** Are the recommended sources credible and relevant for verifying the claims?
*   **Accuracy of AI Verification (if performed):** If the AI attempts verification, are its conclusions correct and well-supported?
*   **Clarity & Actionability:** Is the output clear, and does it provide a good basis for the user to proceed with fact-checking?
*   **Neutrality:** Is the process and reporting unbiased?
*   **Coverage:** For a given text, does it identify a reasonable set of important claims to check (without being overly pedantic about every minor detail)?

## 6. Example Output Structure/Format
**Scenario:** User provides a short paragraph with a few factual claims.
*   **User Input:**
    *   Text: "The Eiffel Tower, located in Paris, was completed in 1889 and is taller than the Chrysler Building. It receives over 10 million visitors annually. The primary material used in its construction was steel."

*   **Cline Generated Fact-Checking Assistance Output:**

    **Identified Claims for Verification:**

    1.  **Claim:** The Eiffel Tower was completed in 1889.
        *   **Suggested Verification:** Search "Eiffel Tower completion date" on a reputable encyclopedia (e.g., Britannica, Wikipedia) or historical website.
        *   **(AI Verification Attempt - if enabled):** Confirmed. Multiple sources state completion in March 1889.

    2.  **Claim:** The Eiffel Tower is taller than the Chrysler Building.
        *   **Suggested Verification:** Search "Eiffel Tower height vs Chrysler Building height" using a search engine, looking for official structure heights.
        *   **(AI Verification Attempt - if enabled):** Confirmed. Eiffel Tower (current tip height ~330m) is taller than Chrysler Building (~319m).

    3.  **Claim:** The Eiffel Tower receives over 10 million visitors annually.
        *   **Suggested Verification:** Check the official Eiffel Tower website or recent tourism reports for Paris for visitor statistics. Note that visitor numbers can fluctuate yearly.
        *   **(AI Verification Attempt - if enabled):** Partially Confirmed/Context Needed. Pre-pandemic figures were around 6-7 million. "Over 10 million" might be an overstatement or refer to a specific peak period. Recent numbers should be checked.

    4.  **Claim:** The primary material used in its construction was steel.
        *   **Suggested Verification:** Search "Eiffel Tower construction material" on architectural or historical websites.
        *   **(AI Verification Attempt - if enabled):** Correction. The primary material was wrought iron, not steel.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Fact-Checking Assistance"
path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/fact-checking-assistance.md"
type: "use_case_guide"
description: "Assists in verifying factual accuracy of claims in text by identifying claims and suggesting credible sources or attempting verification."
triggers: ["fact check text", "verify claims", "check accuracy of statements", "validate information in document"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/content-editing-and-refinement/automated-proofreading-grammar-correction.md
-----------------
# Use Case Definition: Automated Proofreading and Grammar Correction

**Objective:** To automatically review text content, identify, and correct errors in grammar, spelling, punctuation, and syntax, improving the overall quality and professionalism of the writing.

## 1. Core Requirements & Quality Indicators

*   **Accuracy of Corrections:**
    *   Correctly identifies and fixes genuine errors.
    *   Avoids introducing new errors or misinterpreting the author's intent.
*   **Comprehensive Error Detection:**
    *   Catches a wide range of errors:
        *   **Spelling mistakes:** Typos, commonly confused words.
        *   **Grammar errors:** Subject-verb agreement, tense consistency, pronoun usage, correct sentence structure, etc.
        *   **Punctuation errors:** Misuse or omission of commas, periods, apostrophes, quotation marks, etc.
        *   **Syntax issues:** Awkward phrasing or incorrect word order.
*   **Contextual Understanding:**
    *   Considers the context of sentences and paragraphs to make appropriate corrections (e.g., distinguishing between "their," "there," and "they're").
*   **Preservation of Meaning & Voice:**
    *   Corrections should not alter the original meaning or intended voice of the author, unless specifically requested (e.g., for style adjustments).
*   **Clarity of Suggestions (if not fully automated):**
    *   If providing suggestions rather than direct edits, the suggestions should be clear and easy to understand.
*   **Efficiency:**
    *   Processes text and provides corrections or suggestions relatively quickly.

## 2. Key Stages & Processes Involved

1.  **Text Input:**
    *   Receive the text content to be proofread.
2.  **Lexical Analysis (Tokenization & Spelling Check):**
    *   Break down text into words/tokens.
    *   Check spelling of each word against a dictionary.
    *   Identify potential typos or misspelled words.
3.  **Grammatical Analysis (Parsing & Rule Application):**
    *   Analyze sentence structure to identify grammatical errors (e.g., subject-verb agreement, tense issues, incorrect pronoun usage).
    *   Apply grammatical rules of the specified language.
4.  **Punctuation Check:**
    *   Verify correct usage of commas, periods, semicolons, colons, apostrophes, quotation marks, etc.
5.  **Syntax & Style Check (Basic):**
    *   Identify awkward phrasing or common stylistic issues (though deep style editing is a separate use case).
6.  **Error Identification & Correction/Suggestion:**
    *   Pinpoint specific errors.
    *   Generate corrected text or provide suggestions for improvement.
7.  **Output Generation:**
    *   Present the corrected text or a list of identified errors with suggested corrections.

## 3. Inputs Required from User/System

*   **Text Content:** The document, paragraph, or sentences to be proofread.
*   **Language (if not obvious or default):** Specify the language of the text (e.g., English US, English UK).
*   **Level of Strictness/Style Guide (Optional):** (e.g., "formal academic," "casual blog post" - this can influence the types of "errors" flagged, especially stylistic ones).

## 4. Potential Challenges & Considerations

*   **Nuance & Authorial Intent:** Automated tools can sometimes misinterpret nuanced language or stylistic choices, flagging them as errors.
*   **Contextual Ambiguity:** Some grammatical "rules" are flexible depending on context or desired emphasis.
*   **False Positives:** Incorrectly identifying correct usage as an error.
*   **False Negatives:** Missing actual errors.
*   **Complex Sentence Structures:** Highly complex or unconventional sentences can be challenging for automated parsers.
*   **Idioms & Figurative Language:** May be misinterpreted by literal rule-based systems.
*   **Over-Correction:** Making text sound unnatural or stilted by rigidly applying all rules.

## 5. Metrics for Success (How to Evaluate Output)

*   **Error Reduction Rate:** What percentage of actual errors in the original text were corrected?
*   **Accuracy of Corrections:** What percentage of the applied corrections were genuinely correct and improved the text?
*   **Preservation of Meaning:** Was the original intent of the author maintained?
*   **Readability Improvement:** Is the corrected text easier to read and understand?
*   **False Positive Rate:** How many "errors" were flagged that were not actually errors?
*   **User Satisfaction:** Does the user find the proofreading helpful and accurate?

## 6. Example Output Structure/Format
**Scenario:** User provides a sentence with a few errors.
*   **User Input:**
    *   Text: "Their going to the park, its a beautifull day too."
    *   Language: English US

*   **Cline Generated Output (Corrected Text):**
    "They're going to the park; it's a beautiful day, too."

*   **Cline Generated Output (List of Suggestions, if preferred):**
    1.  **"Their" -> "They're"**: "Their" is possessive (e.g., their car). "They're" is a contraction for "they are."
        *   *Original:* Their going to the park...
        *   *Suggestion:* They're going to the park...
    2.  **"its" -> "it's"**: "its" is possessive (e.g., the dog wagged its tail). "it's" is a contraction for "it is" or "it has."
        *   *Original:* ...park, its a beautifull...
        *   *Suggestion:* ...park, it's a beautiful...
    3.  **"beautifull" -> "beautiful"**: Spelling correction.
        *   *Original:* ...its a beautifull day...
        *   *Suggestion:* ...it's a beautiful day...
    4.  **Punctuation Suggestion (Comma to Semicolon/Period):** The original uses a comma splice.
        *   *Original:* ...to the park, its a beautifull day too.
        *   *Suggestion (Option 1 - Semicolon):* ...to the park; it's a beautiful day, too.
        *   *Suggestion (Option 2 - Period):* ...to the park. It's a beautiful day, too.
    5.  **"too" -> "too." (Missing end punctuation if part of a larger text where this is the end of a sentence):**
        *   *Original:* ...day too
        *   *Suggestion:* ...day, too. (Assuming it's the end of the sentence and a comma is desired before "too" for emphasis/flow).

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Automated Proofreading & Grammar Correction"
path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/automated-proofreading-grammar-correction.md"
type: "use_case_guide"
description: "Automatically reviews text to identify and correct errors in grammar, spelling, punctuation, and syntax."
triggers: ["proofread text", "grammar check", "spell check document", "correct grammar", "edit for errors"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/content-editing-and-refinement/seo-content-analysis-optimization.md
-----------------
# Use Case Definition: SEO Content Analysis and Optimization

**Objective:** To analyze existing text content for its search engine optimization (SEO) effectiveness and suggest or implement revisions to improve its visibility and ranking in search engine results pages (SERPs) for target keywords.

## 1. Core Requirements & Quality Indicators

*   **Keyword Relevance & Integration:**
    *   Identifies and incorporates relevant primary and secondary (LSI - Latent Semantic Indexing) keywords naturally into the content.
    *   Ensures appropriate keyword density without "keyword stuffing."
*   **On-Page SEO Elements:**
    *   Optimizes title tags, meta descriptions, header tags (H1-H6), and image alt text (if applicable and part of the text content provided for analysis).
*   **Content Quality & Value for SEO:**
    *   Ensures content is high-quality, informative, and provides value to the user, as this is a key ranking factor.
    *   May suggest improvements to depth, comprehensiveness, or uniqueness if lacking.
*   **Readability & User Experience:**
    *   Maintains or improves readability while optimizing for SEO. Search engines favor content that users find engaging and easy to read.
*   **Internal & External Linking (Conceptual Suggestions):**
    *   May suggest opportunities for relevant internal linking to other content on the same site.
    *   May suggest where external links to authoritative sources could add credibility (though AI doesn't create the links themselves).
*   **Technical SEO Aspects (Mention, if text implies issues):**
    *   While AI primarily works with text, it might identify textual cues suggesting underlying technical SEO issues (e.g., mentions of slow load times if described in content, or poor mobile formatting if text structure is problematic).
*   **Understanding of Search Intent:**
    *   Optimizations should align with the likely intent of users searching for the target keywords (e.g., informational, navigational, transactional).

## 2. Key Stages & Processes Involved

1.  **Keyword Research & Analysis (or use provided keywords):**
    *   Identify primary and secondary keywords relevant to the content's topic and target audience.
    *   Analyze keyword search volume, competition, and relevance (can be conceptual if AI doesn't have live SEO tools).
2.  **Content Analysis (Current State):**
    *   Review the existing text for current keyword usage, on-page SEO elements, readability, and overall quality from an SEO perspective.
3.  **Identify Optimization Opportunities:**
    *   Pinpoint areas where keywords can be better integrated (titles, headings, body text, meta descriptions).
    *   Identify missing or poorly optimized on-page elements.
    *   Assess if content structure, depth, or clarity could be improved for SEO.
4.  **Implement/Suggest Revisions:**
    *   **Keyword Integration:** Naturally weave keywords into the text.
    *   **Title Tag Optimization:** Craft a compelling, keyword-rich title tag (typically under 60 characters).
    *   **Meta Description Optimization:** Write a persuasive meta description (typically under 160 characters) that includes keywords and encourages clicks.
    *   **Header Tag Optimization:** Ensure H1 is used for the main title and other headers (H2-H6) are used hierarchically and incorporate keywords where appropriate.
    *   **Body Content Refinement:** Adjust phrasing, add relevant information, or restructure sentences to improve SEO and readability.
    *   **Image Alt Text (if image descriptions provided):** Suggest keyword-rich and descriptive alt text.
    *   **Linking Suggestions:** Propose relevant internal and external linking opportunities.
5.  **Review Optimized Content:**
    *   Ensure optimizations enhance rather than detract from readability and user experience.
    *   Check for natural keyword integration and avoid stuffing.
    *   Verify that the core message and accuracy of the content are preserved.

## 3. Inputs Required from User/System

*   **Existing Text Content:** The content to be analyzed and optimized.
*   **Target Keywords/Keyphrases:** The primary search terms the content should rank for.
*   **Target Audience:**
*   **Website/Platform Context (Optional):** Knowing where the content will live can inform linking strategies or technical considerations.
*   **Competitor Content (Optional):** URLs of high-ranking competitor pages for similar keywords can provide insights.
*   **Specific SEO Goals (Optional):** (e.g., "improve ranking for X keyword," "increase organic traffic").

## 4. Potential Challenges & Considerations

*   **Algorithm Changes:** SEO best practices evolve as search engine algorithms change.
*   **Balancing SEO with User Experience:** Optimizations should not make the content unreadable or spammy. User experience is paramount.
*   **Keyword Stuffing:** Overuse of keywords can be penalized by search engines.
*   **Technical SEO Limitations:** AI primarily addresses on-page textual content; technical SEO (site speed, mobile-friendliness, crawlability) requires other tools and expertise.
*   **Measuring Impact (Beyond AI Scope):** SEO effectiveness is measured by ranking changes, traffic, and conversions over time.
*   **Lack of Live SEO Data:** AI typically doesn't have real-time access to keyword search volumes or competitor rankings without specific tool integrations.

## 5. Metrics for Success (How to Evaluate Output)

*   **Effective Keyword Integration:** Are target keywords used naturally and appropriately in key areas (titles, headings, body)?
*   **Optimized On-Page Elements:** Are title tags, meta descriptions, and headers well-crafted for SEO?
*   **Improved Readability (Potentially):** Does the optimized content remain clear and engaging?
*   **Actionable Suggestions:** Are the recommendations clear and easy to implement?
*   **Holistic Approach:** Does the optimization consider both keywords and content quality/user value?
*   **Avoidance of Negative Practices:** Does it avoid keyword stuffing or other black-hat techniques?

## 6. Example Output Structure/Format
**Scenario:** User provides a blog post about "healthy breakfast ideas" and wants SEO suggestions.
*   **User Input:**
    *   Text Content: (A blog post about various breakfast recipes)
    *   Target Keywords: "healthy breakfast ideas", "quick morning meals", "nutritious breakfast"
    *   Target Audience: Health-conscious individuals, busy professionals.

*   **Cline Generated SEO Suggestions (Excerpt):**

    **SEO Analysis & Optimization Suggestions for "Healthy Breakfast Ideas"**

    1.  **Title Tag:**
        *   *Current (Assumed):* "My Favorite Breakfasts"
        *   *Suggestion:* "Top 10 Healthy Breakfast Ideas for Quick Morning Meals"
        *   *Rationale:* Incorporates primary ("healthy breakfast ideas") and secondary ("quick morning meals") keywords. More descriptive and compelling for SERPs.

    2.  **Meta Description:**
        *   *Current (Assumed):* (Missing or generic)
        *   *Suggestion:* "Discover 10 delicious and nutritious breakfast ideas perfect for busy mornings. Fuel your day with these quick, healthy recipes!"
        *   *Rationale:* Includes "nutritious breakfast ideas" and "quick healthy recipes." Action-oriented and highlights benefits.

    3.  **Header Tags (H1-H6):**
        *   *H1 Suggestion:* Ensure the main blog post title is wrapped in an H1 tag and includes "Healthy Breakfast Ideas."
        *   *H2 Suggestions:* Use H2 tags for main sections like "Quick Oatmeal Variations," "Smoothie Power-Ups," "Egg-cellent Choices." Incorporate keywords like "quick morning meals" or "nutritious breakfast" naturally within these if possible.

    4.  **Keyword Integration in Body:**
        *   *Observation:* The term "nutritious breakfast" appears only once. "Quick morning meals" is not present.
        *   *Suggestion:*
            *   In the introduction, mention "Finding nutritious breakfast ideas that are also quick morning meals can be a challenge..."
            *   When describing recipes, use phrases like "This is a great nutritious breakfast option..." or "For those needing quick morning meals, try..."
        *   *Caution:* Integrate naturally; do not force keywords.

    5.  **Content Depth & Value:**
        *   *Suggestion:* Consider adding a small section on the "Benefits of a Healthy Breakfast" or "Tips for Meal-Prepping Breakfasts" to add more value and naturally incorporate related terms.

    6.  **Internal Linking:**
        *   *Suggestion:* If you have other articles on "healthy snacks" or "meal prep guides," link to them from this post where relevant.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "SEO Content Analysis & Optimization"
path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/seo-content-analysis-optimization.md"
type: "use_case_guide"
description: "Analyzes text content for SEO effectiveness and suggests revisions to improve search engine visibility for target keywords."
triggers: ["seo content analysis", "optimize for seo", "keyword optimization", "improve search ranking", "on-page seo suggestions"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/content-editing-and-refinement/style-tone-adjustment.md
-----------------
# Use Case Definition: Style and Tone Adjustment

**Objective:** To revise existing text content to match a specified style (e.g., formal, informal, academic, journalistic) or tone (e.g., humorous, serious, empathetic, persuasive, neutral), while preserving the core meaning and information.

## 1. Core Requirements & Quality Indicators

*   **Accurate Style/Tone Emulation:**
    *   The revised text successfully adopts the target style and tone.
    *   Changes in vocabulary, sentence structure, and phrasing reflect the desired style/tone.
*   **Preservation of Core Meaning:**
    *   The fundamental information and intent of the original text are maintained.
    *   Adjustments are stylistic, not substantive alterations of facts or core arguments.
*   **Consistency:**
    *   The target style and tone are applied consistently throughout the revised text.
*   **Naturalness:**
    *   The revised text reads naturally in the new style/tone and doesn't sound forced or artificial.
*   **Audience Appropriateness:**
    *   The adjusted style/tone is suitable for the intended audience and purpose of the content.
*   **Grammatical Correctness:**
    *   The revised text remains grammatically correct and well-written.

## 2. Key Stages & Processes Involved

1.  **Analyze Original Text:**
    *   Understand the content, meaning, and current style/tone of the input text.
2.  **Understand Target Style/Tone:**
    *   Clearly define the desired output style (e.g., "more formal," "like a blog post," "technical report") and/or tone (e.g., "more optimistic," "less assertive," "more urgent").
    *   Identify characteristics of the target style/tone (e.g., vocabulary choices, sentence length, use of contractions, level of formality, emotional language).
3.  **Identify Areas for Adjustment:**
    *   Pinpoint specific words, phrases, sentences, or structural elements in the original text that need modification to achieve the target style/tone.
4.  **Implement Revisions:**
    *   **Vocabulary Changes:** Replace words with synonyms that better fit the target style/tone (e.g., "utilize" instead of "use" for formal; "awesome" instead of "excellent" for informal).
    *   **Sentence Structure Modification:** Adjust sentence length and complexity (e.g., shorter, simpler sentences for informal; more complex, varied sentences for formal).
    *   **Phrasing Adjustments:** Rephrase sentences to convey the desired tone (e.g., softening direct statements for a more empathetic tone; using stronger verbs for a persuasive tone).
    *   **Contractions & Formality:** Add or remove contractions based on formality.
    *   **Figurative Language/Idioms:** Introduce or remove based on style.
    *   **Emotional Language:** Modulate the use of emotive words to match the target tone.
5.  **Review & Compare:**
    *   Compare the revised text with the original to ensure core meaning is preserved.
    *   Evaluate if the target style/tone has been successfully and consistently applied.
    *   Check for naturalness and readability.
    *   Proofread for any new errors introduced during revision.

## 3. Inputs Required from User/System

*   **Original Text Content:** The text that needs style/tone adjustment.
*   **Target Style:** (e.g., formal, informal, academic, conversational, technical, journalistic).
*   **Target Tone:** (e.g., persuasive, empathetic, humorous, neutral, urgent, optimistic, critical).
*   **Target Audience (Optional):** Helps refine the appropriateness of the style/tone.
*   **Purpose of the Content (Optional):** Why is this content being written/adjusted?
*   **Examples of Desired Style/Tone (Optional but very helpful):** If the user can provide samples.

## 4. Potential Challenges & Considerations

*   **Subjectivity:** Style and tone can be subjective; what one person considers "formal," another might see differently.
*   **Over-Adjustment:** Making changes so drastic that the text becomes unrecognizable or loses its original voice entirely (if some authorial voice needs to be preserved).
*   **Maintaining Nuance:** Ensuring subtle meanings in the original text are not lost during stylistic changes.
*   **Inconsistency:** Applying the new style/tone unevenly across the text.
*   **Forcing a Style:** If the original content is fundamentally unsuited to the target style (e.g., trying to make highly technical data sound extremely casual without losing precision).

## 5. Metrics for Success (How to Evaluate Output)

*   **Successful Style/Tone Shift:** Does the revised text clearly exhibit the target style and tone?
*   **Meaning Preservation:** Is the core message of the original text intact?
*   **Consistency of New Style/Tone:** Is it applied uniformly?
*   **Naturalness:** Does the revised text read well and sound authentic in the new style/tone?
*   **Improvement (if applicable):** If the goal was to improve an inappropriate style/tone, is the new version better suited to the context?
*   **Adherence to User Specifications:** Are all instructions regarding style and tone met?

## 6. Example Output Structure/Format
**Scenario:** User provides a formal sentence and wants to make it more informal and friendly.
*   **User Input:**
    *   Original Text: "It is imperative that all personnel adhere strictly to the established protocols to ensure optimal operational efficiency."
    *   Target Style: Informal, friendly.
    *   Target Tone: Encouraging.

*   **Cline Generated Adjusted Text:**
    "Hey team! Just a friendly reminder to please stick to our usual ways of doing things – it really helps everything run smoothly for everyone. Thanks!"

    *Alternative (slightly more direct but still informal):*
    "Let's all make sure we're following the team guidelines. It makes a big difference in keeping things efficient! Appreciate it."

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Style and Tone Adjustment"
path: "prompts/use_cases/content-creation-and-management/content-editing-and-refinement/style-tone-adjustment.md"
type: "use_case_guide"
description: "Revises text to match a specified style (e.g., formal, informal) or tone (e.g., humorous, persuasive) while preserving core meaning."
triggers: ["change text style", "adjust tone of writing", "make text more formal", "make content informal", "rewrite with different tone"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/technical-manual-user-guide-authoring.md
-----------------
# Use Case Definition: Technical Manual/User Guide Authoring

**Objective:** To generate clear, accurate, and comprehensive technical manuals or user guides that help users understand and effectively use a product, software, or system.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Completeness:**
    *   All information must be technically accurate and up-to-date with the product/system version.
    *   Covers all relevant features, functionalities, and procedures.
    *   Includes necessary warnings, prerequisites, and troubleshooting information.
*   **Clarity & Understandability:**
    *   Written in clear, concise language, avoiding unnecessary jargon.
    *   Technical terms are explained if the audience may not be familiar with them.
    *   Instructions are easy to follow and unambiguous.
*   **Task-Oriented Structure:**
    *   Organized around user tasks and goals (e.g., "How to install X," "Configuring Y," "Troubleshooting Z").
    *   Logical flow that guides the user through procedures step-by-step.
*   **Accessibility:**
    *   Information is easy to find through a clear table of contents, index (conceptual for AI), and good use of headings.
    *   Content is structured to be scannable.
*   **Consistency:**
    *   Consistent terminology, formatting, and style throughout the document.
*   **Visual Aids (Conceptual for AI):**
    *   While AI generates text, it should identify where diagrams, screenshots, or illustrations would be beneficial and potentially describe them or indicate placeholders.
*   **Audience Appropriateness:**
    *   Tailored to the technical proficiency and needs of the target audience (e.g., novice users, experienced administrators).

## 2. Key Stages & Processes Involved

1.  **Product/System Understanding:**
    *   Thoroughly understand the product, software, or system to be documented. This may involve reviewing specifications, using the product, or consulting with subject matter experts.
2.  **Audience Analysis:**
    *   Define the target audience and their level of technical expertise.
3.  **Information Architecture & Outlining:**
    *   Develop a logical structure for the manual/guide (e.g., introduction, installation, configuration, usage, troubleshooting, FAQ, glossary).
    *   Create a detailed table of contents or outline of all sections and sub-sections.
4.  **Content Generation - Procedural Steps:**
    *   Write clear, step-by-step instructions for all procedures.
    *   Use action verbs and maintain a consistent imperative mood for instructions.
5.  **Content Generation - Explanatory Text:**
    *   Provide necessary background information, conceptual explanations, and definitions.
    *   Explain the purpose and function of different features or components.
6.  **Content Generation - Reference Material:**
    *   Include glossaries, API references, command lists, or configuration parameter descriptions as needed.
7.  **Troubleshooting & FAQ Sections:**
    *   Identify common problems users might encounter and provide solutions.
    *   Compile a list of frequently asked questions and their answers.
8.  **Review & Technical Validation:**
    *   Ensure all instructions are accurate and lead to the correct outcome.
    *   Have subject matter experts review the content for technical correctness.
9.  **Editing & Proofreading:**
    *   Review for clarity, consistency, grammar, spelling, and punctuation.
    *   Ensure adherence to any style guides.

## 3. Inputs Required from User/System

*   **Product/Software/System to be Documented:** Clear identification and access to information about it (e.g., specifications, existing partial docs, access to the system itself).
*   **Target Audience Profile:** Description of the intended users.
*   **Scope of the Manual/Guide:** What features/functionalities should be covered?
*   **Specific Sections/Topics to Include:** Any mandatory content areas.
*   **Existing Documentation or Resources (if any):** To be used as a base or reference.
*   **Style Guide (if any):** Formatting or terminological preferences.
*   **Key Tasks Users Need to Perform:** A list of common user goals.
*   **Known Issues or Common User Questions (Optional):** For troubleshooting/FAQ sections.

## 4. Potential Challenges & Considerations

*   **Keeping Documentation Up-to-Date:** Technical manuals can quickly become outdated as products evolve. (AI can help with updates if provided with change logs).
*   **Complexity of the Subject:** Explaining highly technical concepts in a simple way.
*   **Ensuring Accuracy:** Mistakes in technical documentation can lead to significant user frustration or errors.
*   **Visuals:** Text-only AI generation means visual elements (screenshots, diagrams) must be planned and added separately. The AI can suggest where they are needed.
*   **Testing Procedures:** Verifying that all documented steps work as described.
*   **Varying User Skill Levels:** Writing for a diverse audience with different levels of technical understanding.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy:** Are all technical details and procedures correct?
*   **Clarity:** Are instructions and explanations easy to understand for the target audience?
*   **Completeness:** Does the manual cover all necessary aspects of the product/system within the defined scope?
*   **Usability:** Can a user successfully perform tasks by following the guide?
*   **Findability:** Can users easily locate the information they need?
*   **Consistency:** Is terminology and formatting consistent throughout?
*   **Task Success Rate (Indirect):** If users can successfully use the product based on the manual, it's a good indicator.

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/case-study-composition.md
-----------------
# Use Case Definition: Case Study Composition

**Objective:** To create a compelling case study that showcases a customer's success story, demonstrating how a product, service, or methodology helped them overcome a challenge and achieve significant results.

## 1. Core Requirements & Quality Indicators

*   **Problem-Solution-Result Structure:**
    *   Clearly articulates the customer's initial problem or challenge.
    *   Details the solution provided (product, service, approach).
    *   Quantifies the positive results and benefits achieved by the customer.
*   **Authenticity & Credibility:**
    *   Based on a real customer experience.
    *   Includes direct quotes from the customer (if possible/provided).
    *   Presents verifiable facts and data.
*   **Storytelling & Engagement:**
    *   Tells a compelling narrative that resonates with potential customers facing similar challenges.
    *   Highlights the customer's journey and transformation.
    *   Written in an engaging and relatable style.
*   **Focus on Customer Benefits:**
    *   Emphasizes the value and benefits delivered to the customer, rather than just focusing on product features.
    *   Translates features into tangible outcomes.
*   **Clarity & Conciseness:**
    *   Easy to understand, even for readers not deeply familiar with the specific industry or product.
    *   Avoids jargon or explains it clearly.
    *   Presents information efficiently.
*   **Professional Tone:**
    *   Maintains a professional and credible tone, even while telling a story.
*   **Measurable Results:**
    *   Whenever possible, includes quantifiable metrics that demonstrate the impact of the solution (e.g., "20% increase in sales," "50% reduction in processing time").

## 2. Key Stages & Processes Involved

1.  **Subject Identification & Qualification:**
    *   Identify a suitable customer success story that aligns with marketing goals.
    *   Obtain permission from the customer to feature them.
2.  **Information Gathering & Interviewing (Conceptual for AI):**
    *   (If AI is assisting in drafting interview questions) Generate questions to elicit details about the customer's challenge, the solution implementation, and the results.
    *   Collect all relevant information: customer background, specific problem, decision-making process, solution details, implementation experience, and measurable outcomes.
3.  **Structuring the Narrative:**
    *   Outline the case study, typically following a structure like:
        *   **Title:** Compelling and benefit-oriented.
        *   **Customer Profile:** Brief overview of the customer/company.
        *   **The Challenge:** Detailed description of the problem they faced.
        *   **The Solution:** How the product/service was implemented and used.
        *   **The Results:** Specific, measurable benefits and outcomes.
        *   **Conclusion/Looking Ahead (Optional):** Summary and future implications.
        *   **Call to Action (Optional):** Encouraging readers to learn more.
4.  **Drafting the Content:**
    *   Write each section, focusing on telling a clear and engaging story.
    *   Incorporate customer quotes effectively to add authenticity.
    *   Translate technical details into understandable benefits.
    *   Use strong storytelling techniques (e.g., setting the scene, building tension around the problem, revealing the solution's impact).
5.  **Highlighting Key Metrics & Quotes:**
    *   Identify the most impactful results and customer testimonials to feature prominently (e.g., in call-out boxes or summaries – AI can suggest these).
6.  **Review & Revision:**
    *   Ensure accuracy of all facts, figures, and quotes.
    *   Verify that the narrative is compelling and flows well.
    *   Check for clarity, conciseness, and professional tone.
    *   Proofread for any errors.
7.  **Customer Approval (External Step):**
    *   The final draft is typically sent to the customer for approval before publication.

## 3. Inputs Required from User/System

*   **Customer Information:** Name of the customer/company.
*   **Industry/Background of Customer:** Context about the customer.
*   **The Specific Challenge/Problem:** What issue did the customer face?
*   **The Solution Provided:** Which product/service/methodology was used?
*   **Implementation Details (Briefly):** How was the solution put into practice?
*   **Key Results & Benefits Achieved:** Quantifiable outcomes and qualitative improvements.
*   **Customer Quotes (Highly Recommended):** Direct testimonials.
*   **Target Audience for the Case Study:** Who should this story resonate with?
*   **Key Message/Takeaway:** What is the main point to convey?
*   **Any Specific Metrics to Highlight:**
*   **Desired Length/Format (Optional):**

## 4. Potential Challenges & Considerations

*   **Obtaining Measurable Results:** Customers may not always track or be able to share specific metrics.
*   **Getting Compelling Quotes:** Eliciting strong, benefit-oriented testimonials.
*   **Balancing Detail with Brevity:** Providing enough information without overwhelming the reader.
*   **Making it Relatable:** Ensuring the story resonates with other potential customers.
*   **Avoiding Sales Hype:** Maintaining a credible, customer-focused narrative rather than an overt sales pitch.
*   **Confidentiality:** Ensuring sensitive customer information is handled appropriately and approved for publication.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Problem-Solution-Result:** Is this core structure evident and easy to follow?
*   **Impact of Results:** Are the benefits clearly articulated and, ideally, quantified?
*   **Authenticity:** Does it feel like a genuine customer story? Are quotes used effectively?
*   **Persuasiveness:** Is it likely to convince a prospect of the solution's value?
*   **Engagement:** Is the story interesting to read?
*   **Professionalism:** Is the tone and language appropriate?
*   **Adherence to Provided Information:** Does it accurately reflect the input details about the customer and solution?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/grant-proposal-writing-assistance.md
-----------------
# Use Case Definition: Grant Proposal Writing Assistance

**Objective:** To assist users in drafting compelling and well-structured grant proposals by helping to articulate the project's significance, objectives, methodology, budget, and expected outcomes, tailored to specific funder requirements.

## 1. Core Requirements & Quality Indicators

*   **Alignment with Funder Priorities:**
    *   Content should clearly align with the mission, goals, and specific requirements of the targeted funding organization.
    *   Addresses all criteria outlined in the grant application guidelines.
*   **Clear Problem Statement & Needs Assessment:**
    *   Articulates a significant problem or need that the proposed project will address.
    *   Provides evidence or data to support the existence and importance of this need.
*   **Well-Defined Project Goals & Objectives:**
    *   Clearly states specific, measurable, achievable, relevant, and time-bound (SMART) goals and objectives for the project.
*   **Sound Methodology & Activities Plan:**
    *   Describes a credible and feasible plan of activities to achieve the project objectives.
    *   Methodology is appropriate for the stated goals and problem.
*   **Realistic Budget & Resource Allocation:**
    *   (If assisting with budget justification) Helps articulate the rationale for budget items, ensuring they are reasonable and directly support project activities. AI does not create the budget itself.
*   **Measurable Outcomes & Evaluation Plan:**
    *   Defines clear, measurable outcomes and impact.
    *   Outlines a plan for evaluating the project's success.
*   **Organizational Capacity & Sustainability (if applicable):**
    *   Helps showcase the applicant organization's ability to successfully execute the project.
    *   Addresses long-term sustainability if relevant to the grant.
*   **Persuasive & Professional Language:**
    *   Written in a clear, concise, and persuasive professional tone.
    *   Free of jargon or explains it adequately.
    *   Grammatically correct and well-proofread.
*   **Compliance with Guidelines:**
    *   Adheres to all formatting, length, and submission requirements of the funder.

## 2. Key Stages & Processes Involved (AI Assistance Points)

1.  **Understanding Funder Requirements:**
    *   Analyze the grant guidelines (Request for Proposals - RFP) to understand priorities, eligibility, required sections, formatting, and deadlines.
2.  **Project Conceptualization & Planning (User-led, AI-assisted articulation):**
    *   Help user articulate the core project idea, problem statement, goals, and objectives.
    *   Assist in brainstorming project activities and expected outcomes.
3.  **Drafting Key Proposal Sections:**
    *   **Executive Summary/Abstract:** Assist in writing a concise overview of the entire proposal.
    *   **Problem Statement/Needs Assessment:** Help articulate the problem and support it with data/evidence.
    *   **Project Goals & Objectives:** Assist in formulating SMART objectives.
    *   **Methodology/Project Activities:** Help describe the plan of action.
    *   **Organizational Information:** Assist in drafting descriptions of the applicant organization's mission, history, and capacity.
    *   **Evaluation Plan:** Help outline how project success will be measured.
    *   **Budget Narrative/Justification:** Assist in explaining and justifying budget line items (based on user-provided budget figures).
    *   **Sustainability Plan (if required):** Help articulate plans for continuing the project beyond the grant period.
4.  **Literature Review/Background Research (if applicable):**
    *   Summarize relevant research or background information to support the problem statement or proposed methodology.
5.  **Tailoring to Funder:**
    *   Ensure language and emphasis align with the specific funder's mission and interests.
6.  **Review & Refinement:**
    *   Help review drafts for clarity, coherence, completeness, and persuasiveness.
    *   Check for consistency and adherence to grant guidelines.
    *   Assist with proofreading.

## 3. Inputs Required from User/System

*   **Grant Funder & Specific Grant Program/RFP:** Essential for tailoring the proposal.
*   **Core Project Idea/Concept:** The user's proposed project.
*   **Problem to be Addressed:**
*   **Target Population/Beneficiaries:**
*   **Proposed Project Activities & Timeline:**
*   **Expected Outcomes & Impact:**
*   **Budget Figures (for budget narrative assistance):**
*   **Information about the Applicant Organization:** Mission, track record, capacity.
*   **Relevant Data, Statistics, or Prior Research:** To support claims.
*   **Specific Questions or Sections from the Grant Application:**

## 4. Potential Challenges & Considerations

*   **Understanding Nuances of Funder Priorities:** Each funder is different.
*   **Crafting a Compelling Narrative:** Making the project stand out.
*   **Demonstrating Impact:** Clearly showing how the project will make a difference.
*   **Budgeting Realism:** Ensuring the budget aligns with activities (AI assists justification, not creation).
*   **Strict Adherence to Guidelines:** Missing a requirement can lead to disqualification.
*   **Competition:** Grant writing is often highly competitive.
*   **AI's Role:** AI assists in drafting and structuring; the core project idea, research, and strategic decisions come from the user.

## 5. Metrics for Success (How to Evaluate Output)

*   **Responsiveness to Funder Guidelines:** Does the drafted content address all required sections and criteria from the RFP?
*   **Clarity & Persuasiveness of Argument:** Is the case for funding clear, logical, and compelling?
*   **Completeness of Information (based on user input):** Are all user-provided details incorporated effectively?
*   **Professionalism of Tone & Language:** Is the writing suitable for a formal grant proposal?
*   **Strength of Problem Statement & Solution:** Are these clearly and convincingly articulated?
*   **Feasibility of Proposed Plan (as described):** Does the methodology seem sound and achievable?
*   **Clarity of Outcomes & Evaluation:** Are the expected results and measurement plan clear?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/research-paper-assistance.md
-----------------
# Use Case Definition: Research Paper Assistance

**Objective:** To assist a user in the process of writing a research paper by performing tasks such as summarizing literature, outlining methodologies, interpreting results, and drafting sections, while adhering to academic standards.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Rigor:**
    *   Information provided (summaries, interpretations) must be accurate and faithful to the source material.
    *   Methodological suggestions should be sound and appropriate for the research question.
    *   Assistance in drafting should maintain academic integrity.
*   **Understanding of Academic Conventions:**
    *   Familiarity with typical research paper structure (e.g., Abstract, Introduction, Literature Review, Methodology, Results, Discussion, Conclusion).
    *   Appropriate academic tone and language.
    *   Correct handling of citations and references (conceptual, AI can format based on provided data).
*   **Critical Analysis & Synthesis:**
    *   Ability to synthesize information from multiple sources for a literature review.
    *   Capacity to help interpret data or results provided by the user.
    *   Ability to identify gaps in research or potential areas for discussion.
*   **Clarity & Coherence:**
    *   Drafted sections should be clear, well-organized, and logically structured.
    *   Summaries should be concise and capture essential information.
*   **Supportive, Not Substitutive:**
    *   The AI's role is to assist and augment the user's research and writing process, not to conduct original research or be the primary author. Ethical considerations are paramount.

## 2. Key Stages & Processes Involved (AI Assistance Points)

1.  **Topic Refinement & Research Question Formulation:**
    *   Help user narrow down a broad topic or formulate a specific research question.
    *   Suggest keywords for literature searches.
2.  **Literature Review Assistance:**
    *   Summarize provided research articles or sources.
    *   Identify key themes, findings, and methodologies from a set of papers.
    *   Help organize literature into a coherent review structure.
    *   Identify gaps in existing literature.
3.  **Methodology Outlining:**
    *   Based on the research question, help outline potential research methodologies.
    *   Discuss pros and cons of different approaches (if provided with options by the user).
    *   Help structure the methodology section.
4.  **Results Interpretation Assistance (Based on User-Provided Data/Results):**
    *   Help describe and summarize quantitative or qualitative results provided by the user.
    *   Assist in identifying patterns, trends, or significant findings in the data.
    *   (Caution: AI should not perform statistical analysis itself unless specifically tooled and validated for it; focus is on articulating user-provided analysis).
5.  **Drafting Specific Sections:**
    *   Assist in drafting sections like the Introduction (background, problem statement, research question), Discussion (interpreting results in context of literature, limitations, future work), or Conclusion.
    *   Help articulate arguments or findings clearly.
6.  **Abstract Generation:**
    *   Based on a completed or near-complete paper, assist in drafting a concise and informative abstract.
7.  **Reference Formatting (Conceptual):**
    *   If provided with citation data and a style (e.g., APA, MLA), assist in formatting references.
8.  **Review & Feedback (On User's Drafts):**
    *   Provide feedback on clarity, structure, argumentation, and academic tone of user-written drafts.
    *   Identify areas for improvement or further development.

## 3. Inputs Required from User/System

*   **Research Topic/Question:** The central focus of the paper.
*   **Specific Task:** (e.g., "Summarize these articles," "Help outline the methodology for X," "Draft an introduction for Y").
*   **Relevant Source Materials:** Articles, data, notes provided by the user.
*   **Target Journal/Audience (Optional):** To tailor style and emphasis.
*   **Specific Formatting/Style Guidelines (Optional):** (e.g., APA, MLA).
*   **User's Own Drafts/Notes:** For review or incorporation.

## 4. Potential Challenges & Considerations

*   **Maintaining Academic Integrity:** Ensuring AI assistance does not cross into plagiarism or unethical research practices. The AI is a tool, not a co-author of original thought.
*   **Complexity of Research:** Deep, nuanced understanding of highly specialized fields may be beyond AI's current capabilities without significant user guidance and input.
*   **Original Contribution:** The core intellectual contribution must come from the user. AI assists in articulation and organization.
*   **Bias in Summarization/Interpretation:** AI summaries might inadvertently introduce bias or miss nuances. User review is critical.
*   **Over-Reliance:** Users must critically evaluate AI-generated content and not accept it unthinkingly.
*   **Data Security:** Handling potentially sensitive or unpublished research data.

## 5. Metrics for Success (How to Evaluate Output)

*   **Relevance to Request:** Does the AI's output directly address the specific assistance requested?
*   **Accuracy of Summaries/Interpretations:** Are source materials represented faithfully?
*   **Clarity & Coherence of Drafted Text:** Is the generated text well-written and easy to understand?
*   **Helpfulness of Suggestions:** Do outlines, feedback, or structural suggestions aid the user's process?
*   **Adherence to Academic Norms:** Is the tone, language, and (conceptual) structure appropriate for a research paper?
*   **Ethical Use:** Does the assistance support the user's work without compromising academic integrity?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/e-book-writing.md
-----------------
# Use Case Definition: E-book Writing

**Objective:** To generate the content for an e-book on a given subject, including chapter outlining, content generation for each chapter, and potentially suggestions for formatting or structure suitable for digital publication.

## 1. Core Requirements & Quality Indicators

*   **Comprehensive Coverage:**
    *   Thoroughly covers the defined subject matter of the e-book.
    *   Addresses key aspects, concepts, and information relevant to the topic and target audience.
*   **Logical Structure & Flow:**
    *   Well-organized into chapters that flow logically from one to the next.
    *   Each chapter has a clear focus and contributes to the overall narrative or argument of the e-book.
    *   Clear introductions and conclusions for the e-book and individual chapters.
*   **Engaging & Accessible Content:**
    *   Written in a style and tone appropriate for the intended readers.
    *   Content is engaging, informative, and easy to understand.
    *   May include examples, case studies, anecdotes, or practical exercises where appropriate.
*   **Accuracy & Credibility:**
    *   Information presented is factually accurate and well-researched.
    *   Sources are cited if necessary, especially for non-fiction e-books.
*   **Value to the Reader:**
    *   Provides tangible value, whether it's knowledge, skills, entertainment, or solutions to problems.
    *   Fulfills the promise made by the e-book's title and description.
*   **Consistency:**
    *   Consistent tone, style, and terminology throughout the e-book.
    *   Consistent formatting for headings, subheadings, lists, etc. (in the raw content).
*   **Originality (where applicable):**
    *   Offers a fresh perspective or unique compilation of information, rather than simply duplicating existing content.

## 2. Key Stages & Processes Involved

1.  **Topic Finalization & Scope Definition:**
    *   Clearly define the e-book's central topic, target audience, and primary objectives.
    *   Determine the overall scope and desired length.
2.  **Research & Information Gathering (if applicable):**
    *   Conduct research to gather necessary information, data, examples, and supporting material.
3.  **E-book Outline Creation (Table of Contents):**
    *   Develop a detailed chapter-by-chapter outline.
    *   For each chapter, list key subtopics or sections to be covered.
4.  **Chapter Content Generation:**
    *   Write the content for each chapter based on the outline.
    *   Develop introductions, main body content with supporting details, and conclusions for each chapter.
    *   Incorporate examples, stories, data, or exercises as planned.
5.  **Introduction & Conclusion for E-book:**
    *   Draft a compelling introduction for the entire e-book that sets the stage and outlines its value.
    *   Write a strong conclusion that summarizes key takeaways and provides final thoughts or a call to action.
6.  **Ancillary Content (Optional):**
    *   Generate content for sections like "About the Author," acknowledgments, dedication, or a glossary if needed.
7.  **Review & Revision:**
    *   Review the entire manuscript for coherence, accuracy, completeness, and flow.
    *   Check for consistency in tone, style, and information.
    *   Proofread for grammar, spelling, and punctuation errors.
8.  **Formatting Considerations (for AI-generated text):**
    *   Ensure the raw text is structured with clear Markdown for headings, lists, blockquotes, etc., to facilitate later e-book formatting (e.g., for EPUB, MOBI, PDF).

## 3. Inputs Required from User/System

*   **E-book Subject/Topic:** The core theme of the e-book.
*   **Target Audience:** Who the e-book is written for.
*   **Primary Goal/Purpose of the E-book:** (e.g., to teach a skill, to share expertise, to market a service).
*   **Desired Length/Approximate Word Count (Optional):**
*   **Key Themes/Messages to Convey (Optional):**
*   **Chapter Ideas or Existing Outline (Optional):**
*   **Specific Content to Include (Optional):** (e.g., case studies, data points, personal anecdotes).
*   **Desired Tone/Style:** (e.g., instructional, narrative, conversational, academic).
*   **Competitor E-books or Examples (Optional):** For style or content reference.

## 4. Potential Challenges & Considerations

*   **Maintaining Engagement:** Keeping the reader engaged over the length of an entire e-book.
*   **Structuring a Coherent Narrative:** Ensuring all chapters contribute to a unified whole.
*   **Depth vs. Breadth:** Balancing comprehensive coverage with manageable detail.
*   **Originality:** Creating unique and valuable content in a potentially crowded field.
*   **Pacing:** Ensuring the information is presented at a pace suitable for the reader.
*   **Visuals (Beyond AI Scope):** E-books often benefit from images, charts, and professional formatting, which are typically handled post-content generation. The AI should provide text that is ready for such additions.

## 5. Metrics for Success (How to Evaluate Output)

*   **Completeness of Outline:** Does the chapter outline logically cover the topic?
*   **Content Quality per Chapter:** Is each chapter well-written, informative, and engaging?
*   **Overall Coherence:** Does the e-book read as a unified work with a clear purpose?
*   **Value Proposition:** Does the e-book deliver on its promise to the reader?
*   **Accuracy:** Is the information presented correct and reliable?
*   **Readability:** Is the language clear and accessible to the target audience?
*   **Adherence to User Specifications:** Does it meet all requirements regarding topic, length, style, and key content?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/white-paper-development.md
-----------------
# Use Case Definition: White Paper Development

**Objective:** To generate an authoritative, well-researched, and persuasive white paper that educates readers on a complex issue, presents a specific methodology, or advocates for a particular solution or point of view.

## 1. Core Requirements & Quality Indicators

*   **Authoritativeness & Credibility:**
    *   Content must be deeply researched, accurate, and supported by robust evidence, data, and credible sources.
    *   Demonstrates expertise and a comprehensive understanding of the subject matter.
    *   Often includes citations and references.
*   **Problem/Solution Focus:**
    *   Clearly articulates a significant problem, challenge, or opportunity.
    *   Presents a well-reasoned solution, methodology, or perspective.
*   **Logical Structure & Argumentation:**
    *   Formal and logical structure (e.g., executive summary, introduction, problem statement, proposed solution/analysis, benefits, conclusion, references).
    *   Arguments are clear, well-supported, and build persuasively.
    *   Addresses potential counter-arguments or alternative perspectives if appropriate.
*   **Professional Tone & Language:**
    *   Written in a formal, objective, and professional tone.
    *   Precise language, avoiding ambiguity and unsubstantiated claims.
    *   May include industry-specific terminology, explained as needed for the target audience.
*   **Data-Driven & Evidentiary Support:**
    *   Relies on data, statistics, case studies, research findings, or expert opinions to support claims.
    *   May include charts, graphs, or tables to present data effectively.
*   **Value & Insight:**
    *   Provides significant value to the target audience by offering new insights, in-depth analysis, or a compelling solution.
    *   Aims to inform decision-making or shape understanding.
*   **Professional Presentation:**
    *   While the AI generates content, the final white paper often requires professional design and layout for optimal impact. The generated content should be structured to facilitate this.

## 2. Key Stages & Processes Involved

1.  **Topic & Objective Definition:**
    *   Clearly define the core topic, the problem to be addressed, or the thesis to be argued.
    *   Establish the primary objective of the white paper (e.g., to educate, to persuade, to position as a thought leader).
    *   Identify the target audience (e.g., technical professionals, C-level executives, policymakers).
2.  **In-Depth Research & Data Collection:**
    *   Conduct extensive research using credible sources (academic journals, industry reports, government data, expert interviews, primary research if available).
    *   Gather supporting data, statistics, case studies, and examples.
3.  **Outline & Structure Development:**
    *   Create a detailed outline, typically including:
        *   Title
        *   Abstract/Executive Summary
        *   Introduction (setting the context and problem)
        *   Problem Description/Analysis (detailing the issue)
        *   Proposed Solution/Methodology/Perspective (the core of the white paper)
        *   Benefits/Advantages/Implications
        *   Addressing Potential Objections/Alternatives (optional)
        *   Conclusion (summarizing key points and reinforcing the main message)
        *   References/Bibliography
4.  **Drafting Content:**
    *   Write each section based on the outline, adhering to a formal and objective tone.
    *   Integrate research findings and data smoothly into the narrative.
    *   Build arguments logically and support all claims with evidence.
    *   Ensure clarity, precision, and depth in explanations.
5.  **Data Visualization (Conceptualization):**
    *   Identify opportunities to present data visually (charts, graphs, tables).
    *   Describe the data to be visualized and the type of visualization that would be most effective (AI may generate textual descriptions or simple table structures).
6.  **Review & Revision:**
    *   Critically review for accuracy, logical consistency, clarity, and persuasiveness.
    *   Verify all data points and citations.
    *   Proofread meticulously for grammar, spelling, and punctuation.
    *   Ensure the white paper effectively achieves its stated objective for the target audience.
7.  **Formatting for Professional Layout:**
    *   Structure the content with clear headings, subheadings, and call-outs to facilitate professional design.

## 3. Inputs Required from User/System

*   **Core Topic/Problem Statement:** The central theme or issue the white paper will address.
*   **Objective/Purpose:** What the white paper aims to achieve.
*   **Target Audience:** Specific group(s) the white paper is intended for.
*   **Key Arguments/Thesis (if predefined):** Main points or perspectives to be emphasized.
*   **Specific Data/Sources to Include (Optional):** Any mandatory research or data points.
*   **Desired Length/Scope (Optional):** Guidance on the expected depth and breadth.
*   **Company/Brand Voice (if applicable):** Guidelines for tone and style.

## 4. Potential Challenges & Considerations

*   **Complexity of Subject Matter:** Distilling complex topics into understandable yet comprehensive content.
*   **Maintaining Credibility:** Ensuring all information is accurate and sources are reliable.
*   **Balancing Persuasion with Objectivity:** Presenting a strong case without appearing overly biased.
*   **Audience Adaptation:** Writing in a way that resonates with the specific knowledge level and interests of the target audience.
*   **Data Interpretation & Presentation:** Effectively communicating insights from data.
*   **Length and Detail:** Managing the scope to be thorough but not excessively long.

## 5. Metrics for Success (How to Evaluate Output)

*   **Authoritativeness:** Does the content convey expertise and command respect?
*   **Clarity of Argument:** Is the central thesis or solution clearly presented and well-defended?
*   **Strength of Evidence:** Are claims well-supported by credible data and research?
*   **Persuasiveness:** Is the white paper likely to convince the target audience of its main points?
*   **Professionalism:** Is the language, tone, and structure appropriate for a formal white paper?
*   **Value Provided:** Does it offer significant insights or solutions to the reader?
*   **Completeness & Accuracy:** Does it cover the topic adequately and without factual errors?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/comprehensive-blog-post-article-creation.md
-----------------
# Use Case Definition: Comprehensive Blog Post/Article Creation

**Objective:** To generate a high-quality, well-researched, and engaging blog post or article on a given topic, suitable for publication. This includes all stages from initial research and outlining to drafting, and optionally, SEO optimization.

## 1. Core Requirements & Quality Indicators

*   **Accuracy & Depth of Research:**
    *   Content must be factually accurate and supported by credible sources (if applicable).
    *   Demonstrates a thorough understanding of the topic.
    *   Goes beyond surface-level information, offering insights or unique perspectives.
*   **Structure & Organization:**
    *   Clear and logical flow with a compelling introduction, well-defined main body sections, and a strong conclusion.
    *   Effective use of headings, subheadings, and potentially bullet points or numbered lists where appropriate to break up text and improve readability.
    *   Coherent paragraph structure, with each paragraph focusing on a single idea.
*   **Engagement & Readability:**
    *   Written in a tone appropriate for the target audience and publication platform.
    *   Engaging language that holds the reader's interest.
    *   Clear, concise sentences and varied sentence structure.
    *   Avoidance of jargon unless explained or appropriate for the audience.
*   **Originality & Value:**
    *   Offers unique value to the reader, not just a rehash of existing information.
    *   (If applicable) Incorporates original thought, analysis, or synthesis of information.
*   **Completeness:**
    *   Addresses the core aspects of the given topic comprehensively.
    *   Fulfills any specified length requirements (e.g., word count).
*   **SEO Optimization (Optional but often desired):**
    *   Natural integration of relevant keywords (primary and LSI).
    *   SEO-friendly title and meta description (if requested).
    *   Well-structured headings for SEO.
    *   Appropriate internal and external linking (if context allows).

## 2. Key Stages & Processes Involved

1.  **Topic Understanding & Deconstruction:**
    *   Clearly define the scope and angle of the topic.
    *   Identify the target audience and their prior knowledge/interests.
    *   Determine the primary goal of the post/article (e.g., inform, persuade, entertain).
2.  **Research & Information Gathering:**
    *   Identify and consult credible sources (academic papers, industry reports, reputable websites, expert interviews, etc.).
    *   Extract key facts, data, quotes, and supporting evidence.
    *   Synthesize information from multiple sources.
3.  **Outlining & Structuring:**
    *   Develop a logical outline that maps out the introduction, main sections (with key points for each), and conclusion.
    *   Ensure a smooth transition between sections.
4.  **Drafting - Introduction:**
    *   Hook the reader and clearly state the topic and purpose of the article.
    *   Provide a brief roadmap of what the article will cover.
5.  **Drafting - Main Body:**
    *   Develop each section from the outline, elaborating on key points with supporting details, examples, and evidence.
    *   Maintain a consistent tone and style.
    *   Ensure logical connections between paragraphs and sections.
6.  **Drafting - Conclusion:**
    *   Summarize the main points.
    *   Restate the core message or thesis.
    *   Offer final thoughts, a call to action, or suggest areas for further exploration.
7.  **Review & Revision:**
    *   Check for accuracy, clarity, coherence, and completeness.
    *   Proofread for grammar, spelling, and punctuation errors.
    *   Refine sentence structure and word choice for better flow and impact.
    *   Ensure the article meets all initial requirements and goals.
8.  **SEO Optimization (If applicable):**
    *   Review keyword usage and density.
    *   Optimize headings and subheadings.
    *   Add relevant links.
    *   Craft or refine title and meta description.

## 3. Inputs Required from User/System

*   **Primary Topic/Subject:** The core subject matter of the article.
*   **Target Audience (Optional):** Who is this article for? (e.g., beginners, experts, general public).
*   **Desired Tone/Style (Optional):** (e.g., formal, informal, academic, journalistic, humorous).
*   **Key Points/Angles to Cover (Optional):** Specific aspects or arguments the user wants to be included.
*   **Keywords for SEO (Optional):** If SEO is a goal.
*   **Word Count/Length Expectation (Optional):** Approximate desired length.
*   **Sources to Consult/Avoid (Optional):** Specific references or types of sources.
*   **Call to Action (Optional):** What should the reader do after reading?

## 4. Potential Challenges & Considerations

*   **Information Overload:** Sifting through and synthesizing large amounts of research material.
*   **Maintaining Objectivity:** Avoiding bias, especially on controversial topics.
*   **Ensuring Originality:** Creating fresh content while drawing on existing information.
*   **Balancing Depth and Brevity:** Providing sufficient detail without overwhelming the reader.
*   **Adapting to Different Audiences:** Tailoring language and complexity appropriately.
*   **Fact-Checking:** Ensuring all claims and data points are accurate.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Coherence:** Is the article easy to understand? Does it flow logically?
*   **Accuracy:** Is the information presented factually correct?
*   **Completeness:** Does it adequately cover the topic as defined by the requirements?
*   **Engagement:** Is the article interesting and likely to hold a reader's attention?
*   **Value:** Does it provide useful information, insights, or perspectives?
*   **Adherence to Instructions:** Does it meet all specified requirements (topic, length, tone, keywords, etc.)?
*   **Grammar & Mechanics:** Is it free of spelling, grammar, and punctuation errors?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/speechwriting.md
-----------------
# Use Case Definition: Speechwriting

**Objective:** To draft a clear, engaging, and impactful speech tailored to a specific occasion, audience, speaker, and purpose.

## 1. Core Requirements & Quality Indicators

*   **Clear Purpose & Message:**
    *   The speech has a well-defined central message or objective.
    *   All content supports and reinforces this core message.
*   **Audience Appropriateness:**
    *   Language, tone, examples, and level of detail are suitable for the intended audience.
    *   Considers the audience's background, interests, and expectations.
*   **Speaker's Voice & Style:**
    *   Reflects the natural speaking style and persona of the person delivering the speech (if specified).
*   **Engaging Content:**
    *   Captures and holds the audience's attention.
    *   May use storytelling, humor (appropriately), rhetorical questions, or vivid imagery.
*   **Logical Structure & Flow:**
    *   Well-organized with a clear introduction, body, and conclusion.
    *   Ideas flow logically and are easy to follow.
    *   Effective transitions between points.
*   **Impact & Memorability:**
    *   Delivers a memorable message or call to action.
    *   Leaves a lasting impression on the audience.
*   **Clarity & Conciseness:**
    *   Easy to understand when spoken.
    *   Avoids overly complex sentences or jargon unless appropriate for the audience.
    *   Delivers the message efficiently within the allotted time.
*   **Appropriate for the Occasion:**
    *   Tone and content are suitable for the specific event or context (e.g., keynote, wedding toast, eulogy, technical presentation).

## 2. Key Stages & Processes Involved

1.  **Define Purpose, Audience, Occasion, and Speaker (PAOS):**
    *   **Purpose:** What should the speech achieve? (e.g., inform, persuade, inspire, entertain, commemorate).
    *   **Audience:** Who will be listening? What are their characteristics?
    *   **Occasion:** What is the event? What is its significance?
    *   **Speaker:** Who is delivering the speech? What is their style/persona? (If not the user themselves).
2.  **Brainstorm Core Message & Key Points:**
    *   Identify the central theme or takeaway message.
    *   List the main supporting points or arguments.
3.  **Research & Gather Supporting Material (if needed):**
    *   Collect relevant facts, statistics, anecdotes, quotes, or stories to support key points.
4.  **Outline the Speech:**
    *   **Introduction:** Grab attention, introduce the topic/purpose, and preview main points.
    *   **Body:** Develop each key point with supporting details, examples, and transitions. Organize points logically (e.g., chronologically, thematically, problem-solution).
    *   **Conclusion:** Summarize main points, restate the core message, and end with a strong closing statement or call to action.
5.  **Draft the Speech Content:**
    *   Write for the ear, using language that is natural and easy to follow when spoken.
    *   Incorporate rhetorical devices if appropriate (e.g., repetition, parallelism, metaphors).
    *   Consider pacing and rhythm.
6.  **Refine and Edit:**
    *   Read the draft aloud to check for flow and timing.
    *   Simplify complex sentences and clarify any ambiguities.
    *   Strengthen transitions and ensure a cohesive narrative.
    *   Proofread for errors.
7.  **Add Delivery Cues (Optional, Conceptual for AI):**
    *   Indicate where pauses, emphasis, or changes in tone might be effective (e.g., `[Pause for effect]`, `[Emphasize next point]`).

## 3. Inputs Required from User/System

*   **Purpose of the Speech:** Why is it being given?
*   **Target Audience:** Who are the listeners?
*   **Occasion/Event:** Where and when will the speech be delivered?
*   **Speaker's Name/Role (if not the user):**
*   **Core Message or Key Themes to Convey:**
*   **Desired Length or Time Limit:**
*   **Specific Points or Information to Include/Exclude:**
*   **Desired Tone/Style:** (e.g., formal, informal, humorous, serious, inspirational).
*   **Any Background Material or Research Provided by the User:**

## 4. Potential Challenges & Considerations

*   **Capturing the Speaker's Authentic Voice:** Especially if the AI is drafting for someone else.
*   **Balancing Information with Engagement:** Providing substance without being dry.
*   **Timing:** Ensuring the speech fits within the allotted time when delivered.
*   **Cultural Sensitivity:** Being mindful of the audience's cultural background.
*   **Emotional Connection:** Crafting content that resonates emotionally when appropriate.
*   **Delivery is Key:** A well-written speech still relies on effective delivery by the speaker.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Message:** Is the core purpose and message easily understood?
*   **Audience Relevance:** Is the content tailored effectively to the specified audience?
*   **Engagement Potential:** Is the speech likely to keep the audience interested?
*   **Structural Soundness:** Is it well-organized with a clear beginning, middle, and end?
*   **Appropriateness of Tone:** Does the tone match the occasion, speaker, and purpose?
*   **Impactfulness:** Does it have a strong opening and closing? Is the call to action (if any) clear?
*   **Adherence to User Specifications:** Does it meet all requirements for length, content, and style?
*   **Readability/Deliverability:** Is it written in a way that is easy to speak and listen to?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/long-form-written-content-generation-and-augmentation/press-release-drafting.md
-----------------
# Use Case Definition: Press Release Drafting

**Objective:** To draft a concise, newsworthy, and professionally formatted press release announcing a specific event, product launch, achievement, or piece of company news.

## 1. Core Requirements & Quality Indicators

*   **Newsworthiness:**
    *   The core information must be genuinely newsworthy and of interest to the target media and public.
    *   Clearly answers "who, what, when, where, why, and how."
*   **Standard Press Release Format:**
    *   Adheres to the conventional structure:
        *   FOR IMMEDIATE RELEASE (or embargo date)
        *   Headline: Compelling and summarizes the news.
        *   Dateline: CITY, State – Date –
        *   Introduction (Lead Paragraph): Summarizes the key news in one or two sentences.
        *   Body Paragraphs: Provide further details, supporting information, quotes, and context.
        *   Boilerplate: Standard "About Us" section for the organization.
        *   Contact Information: Media contact details.
        *   ### (End marker).
*   **Clarity & Conciseness:**
    *   Written in clear, straightforward language.
    *   Gets to the point quickly; avoids fluff and overly promotional language.
    *   Typically one to two pages in length.
*   **Accuracy:**
    *   All facts, figures, names, and dates must be accurate.
*   **Objectivity (within limits):**
    *   While promotional in nature, it should present information factually.
    *   Quotes can add personality and opinion, but the main body should be objective.
*   **Compelling Headline & Lead:**
    *   The headline must grab attention and convey the essence of the news.
    *   The lead paragraph must provide the most critical information upfront.
*   **Professional Tone:**
    *   Maintains a formal and professional tone suitable for media consumption.

## 2. Key Stages & Processes Involved

1.  **Identify the Core News:**
    *   Determine the single most important piece of information to announce.
2.  **Define Target Audience & Media Outlets (Conceptual):**
    *   Understand who this press release is intended for (e.g., specific industry journalists, local news, national outlets).
3.  **Gather Key Information (The 5 Ws and H):**
    *   **Who:** Who is involved? (Company, individuals)
    *   **What:** What is the announcement? (New product, event, achievement)
    *   **When:** When is this happening or when did it happen?
    *   **Where:** Where is this taking place or relevant?
    *   **Why:** Why is this significant or newsworthy?
    *   **How:** How did this come about or how will it unfold?
4.  **Draft the Headline:**
    *   Create a concise, attention-grabbing headline that summarizes the news.
5.  **Write the Dateline & Lead Paragraph:**
    *   Dateline: CITY, State – Month Day, Year –
    *   Lead: Summarize the most crucial information (who, what, when, where, why) in the first paragraph.
6.  **Develop Body Paragraphs:**
    *   Provide additional details, context, and supporting information.
    *   Incorporate quotes from key spokespeople.
    *   Organize information in descending order of importance (inverted pyramid style).
7.  **Write the Boilerplate Paragraph:**
    *   Include a standard, brief description of the organization.
8.  **Add Contact Information:**
    *   Provide the name, title, email, and phone number of the media contact.
9.  **Include End Marker:**
    *   Use "###" centered on a new line to signify the end of the press release.
10. **Review and Edit:**
    *   Check for accuracy, clarity, conciseness, and adherence to format.
    *   Proofread for any errors in grammar, spelling, or punctuation.

## 3. Inputs Required from User/System

*   **Core Announcement/News:** The specific information to be released.
*   **Key Details (5 Ws and H):** Who, what, when, where, why, how.
*   **Quotes (Optional but Recommended):** Statements from key individuals.
*   **Boilerplate Text for the Organization:** Standard "About Us" information.
*   **Media Contact Information:** Name, title, email, phone.
*   **Embargo Date/Time (if any):** If the release is not for immediate publication.
*   **Target Media/Audience (Optional):** Helps tailor the angle.
*   **Supporting Facts/Data (Optional):** To add credibility.

## 4. Potential Challenges & Considerations

*   **Making it Newsworthy:** Not all company news qualifies as a press release.
*   **Avoiding Jargon & Hype:** Keeping the language clear and credible.
*   **Crafting a Strong Headline:** This is crucial for attracting media attention.
*   **Brevity:** Conveying all necessary information concisely.
*   **Distribution (Beyond AI Scope):** AI drafts the release; distribution to media outlets is a separate process.

## 5. Metrics for Success (How to Evaluate Output)

*   **Adherence to Format:** Does it follow the standard press release structure?
*   **Clarity of News:** Is the core announcement immediately understandable?
*   **Completeness of Information:** Are the 5 Ws and H adequately covered?
*   **Headline Effectiveness:** Is the headline compelling and informative?
*   **Professionalism:** Is the tone and language appropriate?
*   **Accuracy:** Are all details correct?
*   **Conciseness:** Is the information presented without unnecessary fluff?
*   **Actionability (for media):** Does it provide clear contact information and all necessary details for a journalist to follow up?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/personal-productivity-organization/note-taking-information-organization.md
-----------------
# Use Case Definition: Note-Taking & Information Organization

**Objective:** To assist users in capturing, structuring, and organizing notes and information from various sources (e.g., meetings, lectures, readings, brainstorming sessions) into a coherent and easily retrievable format.

## 1. Core Requirements & Quality Indicators

*   **Accurate Capture of Information:**
    *   Key points, facts, decisions, and action items from the source are accurately recorded.
*   **Logical Structure & Organization:**
    *   Notes are organized logically (e.g., by topic, date, meeting agenda item, hierarchical outline).
    *   Uses headings, bullet points, and indentation effectively for clarity.
*   **Summarization & Condensation (if requested):**
    *   Can condense lengthy input into concise notes while retaining essential information.
*   **Identification of Key Themes/Topics:**
    *   Can identify and tag or categorize notes by main themes.
*   **Extraction of Action Items/Decisions:**
    *   Clearly highlights any action items, deadlines, or key decisions made.
*   **Format Flexibility:**
    *   Can produce notes in various text-based formats (e.g., plain text, Markdown).
    *   May follow specific note-taking methodologies if prompted (e.g., Cornell Notes outline).
*   **Clarity & Readability:**
    *   Notes are easy to read and understand.

## 2. Key Stages & Processes Involved

1.  **Understand Source Material & Note-Taking Goal:**
    *   What is the source of information (e.g., meeting transcript, article, user's verbal input)?
    *   What is the purpose of the notes (e.g., personal record, sharing with team, study aid)?
2.  **Identify & Extract Key Information:**
    *   Listen for/read for main ideas, supporting details, examples, questions, action items, decisions, important names/dates/figures.
3.  **Structure the Notes:**
    *   Choose an organizational structure (e.g., chronological, thematic, by speaker, Q&A).
    *   Use headings, subheadings, bullet points, and indentation.
4.  **Summarize & Paraphrase:**
    *   Rephrase information concisely in the note-taker's (or AI's) own words, while preserving accuracy.
    *   Avoid verbatim transcription unless specifically requested for quotes.
5.  **Highlight Action Items & Decisions:**
    *   Use a clear marker (e.g., "ACTION:", "DECISION:") or a separate section for these.
6.  **Add Metadata (Optional):**
    *   Include date, topic, attendees (for meetings), source, etc.
7.  **Review & Refine:**
    *   Check notes for accuracy, completeness (for the intended scope), clarity, and consistency.

## 3. Inputs Required from User/System

*   **Source Material:** (e.g., text to summarize, transcript of a meeting/lecture, user's spoken thoughts for dictation).
*   **Purpose of the Notes:**
*   **Desired Format or Structure (Optional):** (e.g., "meeting minutes format," "outline style," "Cornell notes").
*   **Key Topics or Information to Focus On (Optional):**
*   **Length or Level of Detail for Notes (Optional):**

## 4. Potential Challenges & Considerations

*   **Information Overload from Source:** Sifting through large amounts of information to find key points.
*   **Ambiguity or Unclear Source Material:**
*   **Speed of Input (for live note-taking):** Keeping up with a fast-paced meeting or lecture.
*   **Subjectivity in Determining "Key" Information:**
*   **Maintaining Context:** Ensuring notes make sense when reviewed later without the full original context.
*   **Distinguishing Fact from Opinion (if in source):**

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy & Completeness:** Do the notes accurately reflect the key information from the source?
*   **Clarity & Conciseness:** Are the notes easy to understand and to the point?
*   **Organization:** Is the information structured logically and easy to navigate?
*   **Identification of Action Items/Decisions:** Are these clearly highlighted?
*   **Usefulness:** Do the notes serve their intended purpose (e.g., as a reliable record, study aid, basis for action)?
*   **Adherence to Requested Format:**

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/personal-productivity-organization/calendar-scheduling-assistance-text-based.md
-----------------
# Use Case Definition: Calendar & Scheduling Assistance (Text-Based)

**Objective:** To help users organize their schedule by interpreting natural language requests to create, modify, or query calendar events, and presenting this information in a clear, text-based format (e.g., a list of events, a textual representation of a weekly schedule). AI does not directly interact with calendar applications.

## 1. Core Requirements & Quality Indicators

*   **Accurate Interpretation of Date/Time:**
    *   Correctly understands natural language references to dates, times, durations, and recurring patterns (e.g., "next Tuesday at 3 PM," "every Monday for 4 weeks," "a 1-hour meeting").
*   **Extraction of Event Details:**
    *   Identifies key event information: title/description, date, start time, end time/duration, location (if any), attendees (if any).
*   **Logical Scheduling:**
    *   Avoids obvious scheduling conflicts if existing schedule information is provided.
    *   Handles time zone conversions conceptually if different time zones are mentioned (AI itself doesn't perform live conversions but can note the need).
*   **Clear Textual Representation of Schedule:**
    *   Presents calendar information (e.g., a day's events, a week's overview) in an easy-to-read text format.
*   **Confirmation of Actions:**
    *   Clearly states what event has been (conceptually) created, modified, or deleted based on user request.
*   **Query Handling:**
    *   Can answer questions about the schedule based on provided information (e.g., "What do I have on Wednesday afternoon?", "Am I free next Monday morning?").

## 2. Key Stages & Processes Involved

1.  **Understand User Request:**
    *   Determine if the user wants to:
        *   Create a new event.
        *   Modify an existing event (e.g., reschedule, change duration, add attendees).
        *   Delete an event.
        *   Query their schedule.
2.  **Parse Event Details from Natural Language:**
    *   Extract event title, date(s), start/end times or duration, location, attendees.
    *   Resolve relative dates/times (e.g., "tomorrow," "next week").
3.  **Handle Event Creation/Modification/Deletion (Conceptual):**
    *   If creating: Formulate the event details.
    *   If modifying: Identify the target event (user needs to specify clearly) and the changes.
    *   If deleting: Identify the target event.
    *   (AI generates text describing these actions, not performing them in a real calendar).
4.  **Check for Conflicts (if existing schedule data is provided):**
    *   If the user provides their current schedule, check if a new or rescheduled event conflicts with existing ones. Notify user of conflicts.
5.  **Format Schedule Information for Output:**
    *   Present event details or a schedule overview in a clear text format (e.g., list, simple table).
    *   Example for a single event: "Meeting: Project Sync - Date: 2024-07-16 - Time: 10:00 AM - 11:00 AM - Location: Conference Room B."
    *   Example for daily schedule:
        ```
        Tuesday, July 16, 2024:
        - 09:00 AM - 09:30 AM: Team Standup
        - 11:00 AM - 12:00 PM: Client Call - Project Alpha
        - 02:00 PM - 03:30 PM: Design Review
        ```
6.  **Respond to Queries:**
    *   Based on the (provided) schedule data, answer user questions about availability or specific events.

## 3. Inputs Required from User/System

*   **User's Request in Natural Language:** (e.g., "Schedule a meeting with John for next Monday at 2 PM for 1 hour about the budget," "What's on my calendar for tomorrow?").
*   **Existing Schedule Information (if querying or checking conflicts):** User would need to provide this, perhaps as text or a list of current events. AI does not have access to live calendar data.
*   **Default Time Zone (Important for clarity):** User should specify or AI should assume a default and state it.
*   **Preferred Date/Time Format for Output (Optional):**

## 4. Potential Challenges & Considerations

*   **Ambiguity in Natural Language:** "Next Friday" can be ambiguous. AI may need to ask for clarification or state its assumption.
*   **Time Zone Complexity:** Handling events across different time zones accurately.
*   **Recurring Events:** Interpreting and representing complex recurrence patterns (e.g., "every third Thursday").
*   **Lack of Real Calendar Integration:** AI can only manage schedule information textually based on what the user provides. It cannot send invites, set actual reminders, or sync with calendar apps.
*   **Conflict Resolution:** AI can identify conflicts if given data, but resolving them requires user decisions.
*   **Privacy:** Users should be mindful of sharing detailed personal schedule information.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy of Date/Time Interpretation:** Are dates, times, and durations understood correctly?
*   **Correct Extraction of Event Details:**
*   **Clarity of Textual Schedule Representation:** Is the output easy to read and understand?
*   **Logical Conflict Detection (if schedule provided):**
*   **Helpfulness of Query Responses:** Are questions about the schedule answered accurately based on provided data?
*   **Effectiveness in Assisting Organization:** Does the AI's output help the user manage their schedule conceptually?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/personal-productivity-organization/email-drafting-management-assistance.md
-----------------
# Use Case Definition: Email Drafting & Management Assistance

**Objective:** To assist users in drafting professional and effective emails for various purposes (e.g., inquiries, follow-ups, requests, thank-yous), and to help manage email-related tasks like summarizing threads or suggesting replies.

## 1. Core Requirements & Quality Indicators

*   **For Email Drafting:**
    *   **Clear Purpose & Subject Line:** The email has a clear objective, reflected in a concise and informative subject line.
    *   **Appropriate Tone & Formality:** Language and tone are suitable for the recipient and context.
    *   **Professional Structure:** Follows standard email format (Salutation, Body, Closing, Signature).
    *   **Clarity & Conciseness:** Message is easy to understand and to the point.
    *   **Grammar & Spelling:** Free of errors.
    *   **Action-Oriented (if applicable):** Clearly states any requested action or desired outcome.
    *   **Politeness & Professionalism:** Maintains a courteous tone.
*   **For Email Management Assistance (e.g., Summarization, Reply Suggestion):**
    *   **Accurate Summarization:** Captures the key points and context of an email thread.
    *   **Relevant Reply Suggestions:** Proposed replies are appropriate for the context and help achieve the user's communication goal.
    *   **Efficiency:** Helps user process or respond to emails more quickly.

## 2. Key Stages & Processes Involved

*   **For Email Drafting:**
    1.  **Understand Purpose, Audience, and Key Message:**
        *   Why is this email being sent? Who is it for? What is the main information to convey or request?
    2.  **Craft Subject Line:** Make it clear, concise, and informative.
    3.  **Write Salutation:** (e.g., "Dear Mr./Ms. Lastname:", "Hi [First Name],", "To Whom It May Concern:").
    4.  **Draft Email Body:**
        *   **Opening:** State the purpose of the email directly or provide brief context.
        *   **Main Content:** Provide necessary details, ask questions, or make requests. Organize into clear paragraphs.
        *   **Call to Action (if any):** Clearly state what you want the recipient to do.
    5.  **Write Closing:** (e.g., "Sincerely," "Best regards," "Thanks,").
    6.  **Add Signature:** (Name, Title, Contact Info).
    7.  **Review for Clarity, Tone, Grammar, and Spelling:**
*   **For Email Summarization:**
    1.  **Process Email Thread/Content:** Read through the provided email(s).
    2.  **Identify Key Information:** Main topics, questions asked, decisions made, action items.
    3.  **Synthesize Summary:** Condense the information into a brief overview.
*   **For Reply Suggestion:**
    1.  **Analyze Incoming Email & Context:** Understand the sender's message, questions, or requests.
    2.  **Determine User's Goal for Replying:** (e.g., answer a question, provide information, schedule a meeting).
    3.  **Brainstorm Potential Responses:**
    4.  **Draft Suggested Reply Options:** Provide one or more well-phrased reply options that the user can adapt.

## 3. Inputs Required from User/System

*   **For Email Drafting:**
    *   **Purpose of the Email:** (e.g., "request information about X," "follow up on our meeting," "thank a client").
    *   **Recipient(s):** (Name, title, company - helps determine formality).
    *   **Key Points or Information to Include:**
    *   **Desired Action from Recipient (if any):**
    *   **Required Tone:** (e.g., formal, informal, persuasive, apologetic).
    *   **Any Attachments to Mention (Conceptual):**
*   **For Email Summarization/Reply Suggestion:**
    *   **Email Content/Thread to be Processed:**
    *   **User's Goal (for reply suggestions):** What does the user want to achieve with their reply?

## 4. Potential Challenges & Considerations

*   **Tone Misinterpretation:** Conveying the correct tone in text can be tricky.
*   **Recipient Context:** AI may not have full context about the relationship with the recipient or previous interactions.
*   **Confidentiality:** Emails can contain sensitive information; users should be cautious about pasting full emails into prompts if privacy is a concern.
*   **Generic Replies:** Suggested replies might be too generic if not enough context is provided.
*   **Complex Negotiations/Discussions:** AI is best for straightforward communications, less so for nuanced negotiations.

## 5. Metrics for Success (How to Evaluate Output)

*   **For Email Drafting:**
    *   **Clarity & Professionalism:** Is the drafted email clear, concise, and professional?
    *   **Appropriateness of Tone:**
    *   **Completeness:** Does it include all necessary components (subject, salutation, body, closing)?
    *   **Effectiveness:** Is it likely to achieve the user's intended purpose?
    *   **Grammar & Spelling:**
*   **For Email Management Assistance:**
    *   **Accuracy of Summary:** Does the summary capture the essence of the email/thread?
    *   **Relevance & Appropriateness of Reply Suggestions:** Are the suggested replies suitable for the situation?
    *   **Helpfulness:** Does the assistance save the user time or effort?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/personal-productivity-organization/todo-list-task-management-assistance.md
-----------------
# Use Case Definition: To-Do List & Task Management Assistance

**Objective:** To help users create, organize, prioritize, and manage their to-do lists and tasks, often by breaking down larger goals into actionable steps or suggesting prioritization strategies.

## 1. Core Requirements & Quality Indicators

*   **Clear Task Capture:**
    *   Accurately records tasks as described by the user.
*   **Task Decomposition:**
    *   Can break down larger, complex tasks or goals into smaller, more manageable sub-tasks.
*   **Prioritization Assistance (Conceptual):**
    *   Can suggest ways to prioritize tasks based on user-defined criteria (e.g., urgency, importance, effort, deadlines).
    *   May use common prioritization frameworks if prompted (e.g., Eisenhower Matrix - Urgent/Important).
*   **Organization & Categorization:**
    *   Can group tasks by project, context, due date, or other user-defined categories.
    *   Presents lists in a clear, organized format.
*   **Actionable Items:**
    *   Ensures tasks are phrased as clear, actionable items, typically starting with a verb.
*   **Reminder/Deadline Setting (Conceptual):**
    *   Can associate due dates or reminder times with tasks (actual reminder functionality depends on external tools).
*   **Status Tracking (Conceptual):**
    *   Can help user update task statuses (e.g., to-do, in-progress, completed), though AI itself doesn't maintain live state.

## 2. Key Stages & Processes Involved

1.  **Gather Tasks & Goals:**
    *   Collect all tasks, projects, or goals from the user. This could be a brain dump or a more structured list.
2.  **Clarify & Decompose Tasks:**
    *   For larger or vague tasks, ask clarifying questions or suggest breaking them into smaller, specific sub-tasks.
    *   Ensure each task is actionable.
3.  **Assign Attributes (Optional):**
    *   For each task, add relevant attributes if provided by user or inferred:
        *   Due Date
        *   Priority Level (e.g., High, Medium, Low)
        *   Project/Category
        *   Estimated Effort/Time
        *   Assigned to (if collaborative)
4.  **Suggest Prioritization (if requested):**
    *   Based on attributes like due date and priority, suggest an order for tackling tasks.
    *   May introduce simple prioritization techniques (e.g., "Eat the Frog," "MoSCoW").
5.  **Organize & Present List:**
    *   Format the to-do list clearly, perhaps grouped by priority, project, or due date.
    *   Use checkboxes (Markdown: `- [ ]` for incomplete, `- [x]` for complete) for easy tracking.
6.  **Facilitate Updates (User-Driven):**
    *   User informs AI of completed tasks or changes, and AI can regenerate the updated list.

## 3. Inputs Required from User/System

*   **List of Tasks, Goals, or Projects:**
*   **Deadlines or Timeframes (if any):**
*   **Priorities (if user has them, or criteria for prioritization):**
*   **Context for Tasks (Optional):** (e.g., "work tasks," "personal errands," "project X tasks").
*   **Preferred Organizational Structure (Optional):** (e.g., "group by project," "show most urgent first").

## 4. Potential Challenges & Considerations

*   **Overwhelm:** A very long, unprioritized list can be demotivating.
*   **Procrastination (Human Factor):** AI can help organize, but execution is up to the user.
*   **Changing Priorities:** Task lists are often dynamic; AI needs to be able to help re-prioritize.
*   **Estimation Difficulty:** Accurately estimating time/effort for tasks can be hard.
*   **Integration with Tools (Beyond AI Scope):** AI generates text-based lists; integration with dedicated to-do apps requires separate mechanisms.
*   **Maintaining Motivation (Human Factor):**

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Actionability of Tasks:** Are all items clear and phrased as actions?
*   **Completeness of Capture:** Have all user-mentioned tasks been included?
*   **Logical Organization:** Is the list structured in a helpful way?
*   **Effectiveness of Prioritization Suggestions (if applicable):**
*   **Usefulness for Planning:** Does the list help the user see what needs to be done and in what order?
*   **Ease of Updating (Conceptual):** Is the format such that a user could easily mark items complete or add new ones (even if just by re-prompting AI with updates)?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/video-game-quest-mission-scripting.md
-----------------
# Use Case Definition: Video Game Quest/Mission Scripting

**Objective:** To design and write the narrative script for a video game quest or mission, including objectives, key events, character dialogue, player choices (if applicable), and potential outcomes.

## 1. Core Requirements & Quality Indicators

*   **Clear Objectives & Goals:**
    *   The quest/mission has clear, understandable objectives for the player.
*   **Engaging Narrative & Premise:**
    *   The quest has an interesting setup or story hook that motivates the player.
*   **Logical Progression of Events:**
    *   Steps and events within the quest flow logically and contribute to achieving the objectives.
*   **Character Integration & Dialogue:**
    *   Relevant Non-Player Characters (NPCs) are involved with believable motivations and dialogue.
    *   Player character dialogue choices (if any) are meaningful.
*   **Player Agency (if applicable):**
    *   If the quest involves player choices, these choices have tangible consequences or lead to different paths/outcomes.
*   **Gameplay Integration (Conceptual):**
    *   The narrative script supports and integrates with expected gameplay mechanics (e.g., combat, exploration, puzzle-solving). AI describes narrative elements that imply gameplay.
*   **Pacing & Tension:**
    *   The quest is paced well, building tension or excitement as appropriate.
*   **Rewards & Resolution:**
    *   The quest offers a satisfying resolution and appropriate rewards (narrative or conceptual gameplay rewards).
*   **Clarity for Implementation:**
    *   The script is written in a way that is clear for game designers and developers to implement (e.g., clear triggers for events, dialogue conditions).
*   **World Consistency:**
    *   The quest and its elements are consistent with the established lore, setting, and tone of the game world.

## 2. Key Stages & Processes Involved

1.  **Understand Quest Context & Game World:**
    *   Review overall game narrative, setting, key characters, and existing lore.
    *   Determine how this quest fits into the larger game progression or story.
2.  **Define Quest Premise & Objectives:**
    *   What is the core idea or problem of the quest?
    *   What must the player achieve to complete it?
3.  **Outline Key Quest Steps/Beats:**
    *   Break the quest down into a sequence of major steps or events from initiation to completion.
4.  **Identify Key NPCs & Their Roles:**
    *   Which NPCs will give the quest, provide information, act as antagonists, or assist the player?
5.  **Draft Dialogue for NPCs & Player (if applicable):**
    *   Write dialogue for key interactions.
    *   If player has dialogue choices, draft those options and potential NPC responses.
6.  **Describe Key Events & Player Actions:**
    *   Write narrative descriptions of what happens at each step, including required player actions or triggers for progression.
7.  **Incorporate Player Choices & Branching Paths (if any):**
    *   If the quest has multiple paths or outcomes based on player decisions, outline these branches.
8.  **Define Quest Rewards & Consequences:**
    *   What does the player gain upon completion?
    *   Are there any lasting consequences in the game world?
9.  **Structure the Quest Script:**
    *   Organize the information clearly, often using a format that includes:
        *   Quest Title & Giver
        *   Prerequisites
        *   Objectives (listed)
        *   Step-by-step breakdown (Location, NPCs, Dialogue, Player Action, Outcome/Next Step)
        *   Completion Conditions
        *   Rewards
10. **Review for Playability, Engagement, and Clarity:**
    *   Read through from a player's perspective. Is it fun? Is it clear what to do?
    *   Check for plot holes or logical inconsistencies.

## 3. Inputs Required from User/System

*   **Game Setting & Lore Overview:**
*   **Main Player Character Archetype/Abilities (General):**
*   **Quest Idea/Premise:** (e.g., "a rescue mission," "a fetch quest with a twist," "a mystery to solve").
*   **Key NPCs to Involve (Optional):**
*   **Desired Location(s) for the Quest (Optional):**
*   **Type of Gameplay Expected (Optional):** (e.g., combat-heavy, puzzle-focused, dialogue-driven).
*   **Desired Quest Length/Complexity (Optional):**
*   **Connection to Main Story or Other Quests (if any):**
*   **Reward Ideas (Optional):**

## 4. Potential Challenges & Considerations

*   **Balancing Narrative with Gameplay:** Ensuring the story enhances gameplay rather than hindering it.
*   **Player Freedom vs. Scripted Events:** Managing player agency within a structured quest.
*   **Creating Meaningful Choices:** If choices are offered, they should feel impactful.
*   **Avoiding Repetitive Quest Structures:** ("Fetch X items," "Kill Y enemies").
*   **Clarity of Objectives:** Players can get frustrated if they don't know what to do.
*   **Technical Implementation (Beyond AI Scope):** AI drafts the narrative; actual coding of quest logic, triggers, and NPC behavior is a development task.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Objectives & Steps:** Can a player (and developer) understand what needs to be done?
*   **Engagement Potential:** Does the quest sound interesting and motivating to play?
*   **Narrative Cohesion:** Does the quest tell a coherent mini-story?
*   **Character Believability (NPCs):** Do NPC motivations and dialogue make sense?
*   **Gameplay Integration (Conceptual):** Does the narrative support plausible gameplay interactions?
*   **World Consistency:** Does it fit the established game world?
*   **Completeness of Script:** Does it provide enough detail for a designer/writer to flesh out?
*   **Originality/Creativity:** Does it offer a fresh or engaging quest idea?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/playwriting-act-scene-structure.md
-----------------
# Use Case Definition: Playwriting Act/Scene Structure

**Objective:** To outline the act and scene structure for a stage play, detailing the progression of plot, character development, and thematic exploration within the conventional formatting of theatrical scripts.

## 1. Core Requirements & Quality Indicators

*   **Adherence to Play Structure:**
    *   Typically organized into Acts (e.g., One-Act, Two-Act, Three-Act, Five-Act structures).
    *   Each Act is broken down into Scenes.
    *   Clear delineation of where acts and scenes begin and end.
*   **Plot Progression:**
    *   Each scene and act contributes to the overall advancement of the plot.
    *   Includes exposition, rising action, climax, falling action, and resolution, distributed appropriately across the acts.
*   **Character Development:**
    *   Shows how characters evolve, face conflicts, and make decisions within scenes and across acts.
*   **Thematic Exploration:**
    *   The structure allows for the introduction and development of the play's central themes.
*   **Dramatic Tension & Pacing:**
    *   The outline suggests how tension is built and released throughout the play.
    *   Act breaks often occur at moments of high tension or significant turning points.
*   **Stageability (Conceptual):**
    *   While AI generates text, the scene descriptions should imply actions and settings that are conceivable on a stage.
*   **Clarity for Playwright:**
    *   Provides a clear roadmap for writing the full script, including dialogue and detailed stage directions.

## 2. Key Stages & Processes Involved

1.  **Understand Core Premise, Characters, and Conflict:**
    *   Analyze the user's concept for the play: central story, main characters, core conflict, themes.
2.  **Determine Overall Act Structure:**
    *   Decide on the number of acts (e.g., a traditional three-act structure, or a more contemporary two-act or one-act structure).
3.  **Outline Each Act:**
    *   For each Act:
        *   Define its primary function in the narrative (e.g., Act I: Setup & Inciting Incident; Act II: Confrontation & Rising Action; Act III: Climax & Resolution).
        *   Identify key plot points and character developments that must occur within that act.
        *   Determine the emotional arc of the act.
4.  **Break Down Acts into Scenes:**
    *   For each Act, list the sequence of scenes.
    *   For each Scene:
        *   **Setting:** Briefly describe the location and time.
        *   **Characters Present:**
        *   **Scene Objective:** What is the main purpose of this scene? What must be achieved or revealed?
        *   **Key Action/Events:** Summarize what happens in the scene.
        *   **Conflict:** What is the central conflict or tension in this scene?
        *   **Character Development:** How does this scene impact the characters involved?
        *   **Scene Ending:** How does the scene conclude and transition to the next? (Often a mini-cliffhanger or turning point).
5.  **Integrate Subplots & Themes:**
    *   Weave any subplots through the scene structure.
    *   Ensure scenes contribute to exploring the play's themes.
6.  **Consider Pacing and Rhythm:**
    *   Vary scene length and intensity to create a dynamic theatrical experience.
7.  **Review Overall Structure:**
    *   Check for logical flow, consistent character arcs, effective build-up of dramatic tension, and a satisfying overall narrative structure.

## 3. Inputs Required from User/System

*   **Play Concept/Logline:** The core idea of the play.
*   **Main Character(s) & Their Goals/Conflicts:**
*   **Central Theme(s):**
*   **Desired Act Structure (Optional):** (e.g., "a three-act play").
*   **Key Plot Points or Moments to Include:**
*   **Setting Ideas (if any):**
*   **Intended Genre/Style:** (e.g., comedy, drama, tragedy, farce).
*   **Target Audience (Optional):**

## 4. Potential Challenges & Considerations

*   **Stagecraft Limitations:** Playwriting must consider the practicalities of stage production (e.g., number of locations, feasibility of actions). AI outlines should be mindful of this conceptually.
*   **Dialogue as Primary Driver:** Much of a play is conveyed through dialogue; the outline sets the stage for this.
*   **Pacing for a Live Audience:** Maintaining audience engagement in a live theatrical setting.
*   **Unity of Time, Place, Action (Classical Ideals - Optional):** Some play structures adhere to these; others break them.
*   **Subtext:** Effective plays often rely heavily on subtext in dialogue and action, which an outline can only hint at.

## 5. Metrics for Success (How to Evaluate Output)

*   **Structural Soundness:** Is the act and scene breakdown logical and conventional for a play?
*   **Plot Cohesion & Progression:** Does the outline clearly show how the story unfolds and builds?
*   **Character Arc Clarity:** Is character development evident within the structure?
*   **Dramatic Potential:** Does the outline suggest opportunities for compelling conflict and tension?
*   **Thematic Integration:** Are themes woven into the proposed structure?
*   **Actionability for Playwright:** Does it provide a strong foundation for writing the script?
*   **Clarity of Scene Objectives:** Is the purpose of each scene clear?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/novel-book-outline-generation.md
-----------------
# Use Case Definition: Novel/Book Outline Generation

**Objective:** To generate a structured outline for a novel or non-fiction book, including potential chapter breakdowns, key plot points, character arcs, and thematic development, based on user-provided concepts or ideas.

## 1. Core Requirements & Quality Indicators

*   **Logical Structure:**
    *   The outline presents a coherent and logical progression for the book, whether it's plot-driven (fiction) or argument/topic-driven (non-fiction).
    *   Common structures might include three-act structure for fiction, or thematic/chronological organization for non-fiction.
*   **Comprehensive Coverage (of User's Core Idea):**
    *   The outline adequately covers the main elements of the user's provided concept, theme, or story idea.
*   **Chapter/Section Breakdown:**
    *   Divides the book into logical chapters or sections.
    *   Each chapter/section has a clear focus or purpose within the overall narrative/argument.
*   **Plot Development (Fiction):**
    *   Includes key plot points: inciting incident, rising action, climax, falling action, resolution.
    *   May suggest subplots or turning points.
*   **Character Arc Planning (Fiction):**
    *   Outlines the potential development or transformation of key characters throughout the story.
*   **Thematic Development:**
    *   Shows how key themes are introduced, explored, and potentially resolved or commented upon.
*   **Pacing Considerations (Implicit):**
    *   The distribution of events or information across chapters suggests reasonable pacing.
*   **Actionability for Writer:**
    *   Provides a useful roadmap for the author to begin drafting the manuscript.
*   **Flexibility:**
    *   Offers a solid framework but allows room for the author's creativity and further development during the writing process.

## 2. Key Stages & Processes Involved

1.  **Understand Core Concept, Genre, and Intent:**
    *   Analyze the user's idea for the book: Is it fiction or non-fiction? What is the genre? What is the central theme or story? What does the user want to achieve with this book?
2.  **Brainstorm Key Elements:**
    *   **Fiction:** Main characters, core conflict, setting, major plot events, potential themes.
    *   **Non-Fiction:** Main argument/thesis, key topics to cover, supporting evidence or examples, target audience's prior knowledge.
3.  **Select an Overall Structure:**
    *   Choose an appropriate high-level structure (e.g., three-act, hero's journey, problem-solution, chronological, thematic).
4.  **Develop Chapter/Part Breakdown:**
    *   Divide the book into major parts (if applicable) and then into chapters.
    *   Assign a tentative title or focus for each chapter.
5.  **Outline Content for Each Chapter:**
    *   For each chapter, list key scenes, events, information, arguments, or subtopics to be covered.
    *   Indicate how this chapter contributes to the overall plot/argument and character/thematic development.
6.  **Map Plot Points & Character Arcs (Fiction):**
    *   Ensure major plot points are distributed logically across the outline.
    *   Track how main characters change or develop from beginning to end.
7.  **Integrate Themes:**
    *   Consider how and where themes will be introduced and explored.
8.  **Review for Coherence, Completeness, and Flow:**
    *   Read through the entire outline to ensure it forms a cohesive and compelling structure for the book.
    *   Check for plot holes (fiction) or logical gaps (non-fiction).

## 3. Inputs Required from User/System

*   **Book Idea/Core Concept:** The fundamental premise of the book.
*   **Genre (Fiction/Non-Fiction and sub-genre):**
*   **Target Audience (Optional):**
*   **Main Character(s) (Fiction - Optional):** Any initial ideas for protagonists/antagonists.
*   **Central Conflict/Problem (Fiction - Optional):**
*   **Key Themes to Explore (Optional):**
*   **Desired Length/Scope (Optional):** (e.g., "a short novel," "a comprehensive guide").
*   **Any Specific Plot Points, Topics, or Structural Ideas the User Already Has:**
*   **Comparable Titles (Optional):** Books that have a similar structure or cover similar ground.

## 4. Potential Challenges & Considerations

*   **Balancing Structure with Creativity:** Providing a useful framework without being overly prescriptive and stifling the author's creativity.
*   **Complexity of Long-Form Narratives:** Outlining a full novel or comprehensive non-fiction book is a significant task.
*   **Character Arc Nuance (Fiction):** Developing truly compelling character arcs requires deep insight.
*   **Plot Originality (Fiction):** Avoiding predictable or clichéd plot structures.
*   **Depth of Research (Non-Fiction):** An outline can suggest areas for research, but the author must conduct it.
*   **Pacing a Long Work:** Ensuring reader engagement is maintained throughout.

## 5. Metrics for Success (How to Evaluate Output)

*   **Logical Structure:** Does the outline present a clear and sensible progression for the book?
*   **Completeness of Key Elements:** Does it address major plot points, character development (fiction), or core arguments (non-fiction)?
*   **Chapter Cohesion:** Does each proposed chapter have a clear focus and contribute to the whole?
*   **Actionability:** Can an author use this outline as a practical guide to start writing?
*   **Coverage of User's Idea:** Does it effectively structure the user's initial concept?
*   **Potential for Engagement:** Does the outlined story or argument seem like it would be interesting to the target audience?
*   **Flexibility:** Does it provide a good balance of structure and room for creative development?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/screenplay-scene-generation.md
-----------------
# Use Case Definition: Screenplay Scene Generation

**Objective:** To generate a formatted screenplay scene, including scene headings, action lines, character names, and dialogue, based on user-provided plot points, character interactions, or thematic elements.

## 1. Core Requirements & Quality Indicators

*   **Standard Screenplay Format:**
    *   Adheres to industry-standard formatting for screenplays:
        *   **Scene Heading (Slugline):** INT./EXT. LOCATION - DAY/NIGHT (e.g., `INT. COFFEE SHOP - DAY`).
        *   **Action Lines:** Descriptions of setting, character actions, and important visual/auditory details. Written in present tense.
        *   **Character Cues:** Character names in all caps, centered or offset before dialogue.
        *   **Dialogue:** Spoken lines by characters.
        *   **Parentheticals (Wrylies):** Brief notes in parentheses below character cue, before dialogue, indicating tone or brief action (used sparingly).
*   **Visual Storytelling:**
    *   Action lines effectively describe what the audience sees and hears.
    *   "Shows" rather than "tells."
*   **Natural & Purposeful Dialogue:**
    *   Dialogue sounds authentic for the characters and situation.
    *   Serves a purpose: advances plot, reveals character, or explores theme.
    *   Subtext is often present.
*   **Clear Scene Goal/Conflict:**
    *   The scene has a clear purpose within the larger narrative.
    *   Often involves some form of conflict or tension, even if subtle.
*   **Pacing & Flow:**
    *   The scene unfolds at an appropriate pace, with a clear beginning, middle, and end (for the scene itself).
*   **Character Consistency:**
    *   Characters behave and speak in ways consistent with their established personalities and motivations.
*   **Conciseness:**
    *   Action lines and dialogue are typically concise and impactful.

## 2. Key Stages & Processes Involved

1.  **Understand Scene Context & Purpose:**
    *   What is the goal of this scene? What needs to happen?
    *   How does it fit into the overall plot and character arcs?
    *   Which characters are involved? What are their individual goals within the scene?
2.  **Establish Scene Heading:**
    *   Determine if the scene is Interior (INT.) or Exterior (EXT.).
    *   Specify the LOCATION.
    *   Specify the Time of Day (DAY, NIGHT, DUSK, DAWN, etc.).
3.  **Draft Opening Action Lines:**
    *   Set the scene visually and introduce characters present.
4.  **Develop Action & Dialogue:**
    *   Write action lines to describe character movements, expressions, and significant environmental interactions.
    *   Craft dialogue that reveals character, advances the plot, and creates conflict or connection.
    *   Interleave action and dialogue naturally.
5.  **Build Scene to a Turning Point or Conclusion:**
    *   The scene should have a mini-arc, leading to a change, decision, revelation, or transition.
6.  **Format Correctly:**
    *   Ensure all elements (scene headings, action, character cues, dialogue, parentheticals) are formatted according to screenplay standards.
7.  **Review & Refine:**
    *   Read through for pacing, clarity, character consistency, and impact.
    *   Check for natural-sounding dialogue.
    *   Ensure action lines are visual and concise.
    *   Proofread.

## 3. Inputs Required from User/System

*   **Scene Premise/Goal:** What should happen in this scene?
*   **Characters Involved:** Names and brief descriptions or established traits.
*   **Setting (Location & Time of Day):**
*   **Key Plot Point(s) to be Addressed or Advanced:**
*   **Core Conflict or Interaction for the Scene:**
*   **Desired Mood or Tone for the Scene:**
*   **Specific Lines of Dialogue or Actions to Include (Optional):**
*   **Point in Overall Story (Optional):** (e.g., "This is the scene where X first meets Y").
*   **Approximate Desired Scene Length (Optional, in pages - 1 page ~ 1 minute):**

## 4. Potential Challenges & Considerations

*   **Visual Writing:** Thinking in terms of what can be seen and heard on screen.
*   **Subtext in Dialogue:** Crafting dialogue where characters mean more than they say.
*   **Pacing within a Scene:** Keeping the scene moving and engaging.
*   **Formatting Rigor:** Screenplay format is quite strict.
*   **Balancing Dialogue and Action:** Avoiding scenes that are too talky or have action without purpose.
*   **Originality:** Creating fresh and memorable scenes.

## 5. Metrics for Success (How to Evaluate Output)

*   **Correct Formatting:** Is the scene laid out according to standard screenplay conventions?
*   **Visual Clarity:** Can the reader easily visualize the scene from the action lines?
*   **Dialogue Quality:** Is the dialogue natural, purposeful, and character-appropriate?
*   **Scene Cohesion:** Does the scene have a clear focus and internal logic?
*   **Plot/Character Contribution:** Does the scene effectively advance the story or develop characters?
*   **Engagement:** Is the scene interesting to read?
*   **Adherence to Prompt:** Does it fulfill the user's specific requirements for the scene?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/dialogue-generation-refinement.md
-----------------
# Use Case Definition: Dialogue Generation & Refinement (Fiction)

**Objective:** To generate or refine dialogue between fictional characters that is natural-sounding, reveals character, advances the plot or explores themes, and is appropriate for the scene's context and tone.

## 1. Core Requirements & Quality Indicators

*   **Authentic Character Voice:**
    *   Each character's dialogue reflects their unique personality, background, vocabulary, and speaking patterns.
    *   Dialogue is consistent with the character as established.
*   **Natural Cadence & Flow:**
    *   Dialogue sounds like real people talking (or believable for the characters' nature), avoiding stilted or overly expository language.
    *   Includes natural pauses, interruptions, and varied sentence lengths if appropriate.
*   **Purposeful Dialogue:**
    *   Every line of dialogue serves a purpose:
        *   **Reveals Character:** Shows personality, motivations, emotions, relationships.
        *   **Advances Plot:** Moves the story forward, introduces new information or conflict.
        *   **Explores Theme:** Touches upon the underlying ideas of the story.
        *   **Establishes Mood/Atmosphere:** Contributes to the scene's feeling.
*   **Subtext & Implication:**
    *   Characters often say less (or more) than they mean. Good dialogue frequently includes subtext.
*   **Conflict & Tension (often):**
    *   Dialogue can be a primary way to express conflict, disagreement, or underlying tension between characters.
*   **Contextual Appropriateness:**
    *   Dialogue fits the specific situation, setting, and emotional state of the characters in the scene.
*   **Pacing:**
    *   The rhythm and speed of the dialogue exchanges contribute to the scene's overall pacing.
*   **Formatting (if for script):**
    *   Adheres to standard dialogue formatting for screenplays or stage plays if specified.

## 2. Key Stages & Processes Involved

1.  **Understand Scene Context & Character Dynamics:**
    *   Who are the characters in the scene? What are their relationships to each other?
    *   What are their individual goals or motivations for this conversation?
    *   What is the emotional state of each character at the start of the scene?
    *   What is the overall purpose of this dialogue exchange in the story?
2.  **Define Dialogue Objectives:**
    *   What information needs to be revealed?
    *   What conflict needs to be expressed or escalated?
    *   What character traits or changes need to be shown?
3.  **Drafting the Dialogue Exchange:**
    *   Begin the conversation, focusing on each character's voice and goals.
    *   Use action beats or brief descriptions to intersperse with dialogue, showing character reactions or movements.
    *   Build the conversation turn by turn, ensuring responses are logical (or intentionally illogical, if character-appropriate).
4.  **Incorporating Subtext:**
    *   Consider what characters are *not* saying, or what their words imply beyond the literal meaning.
5.  **Building/Releasing Tension:**
    *   Use dialogue to escalate or de-escalate conflict as needed for the scene's arc.
6.  **Refining for Naturalness & Voice:**
    *   Read the dialogue aloud to check if it sounds natural.
    *   Ensure each character's lines are distinct and true to their voice.
    *   Trim unnecessary words or phrases.
7.  **Checking for Purpose:**
    *   Review each line: Does it serve a purpose in revealing character, advancing plot, or building atmosphere?
8.  **Formatting (if for script):**
    *   Apply correct screenplay/playwriting format for character cues and dialogue.

## 3. Inputs Required from User/System

*   **Characters Involved:** Names, core personality traits, motivations, and their relationship to each other.
*   **Scene Context:** Brief description of the setting, time, and what has just happened before this dialogue.
*   **Objective of the Dialogue:** What should this conversation achieve for the story?
*   **Core Conflict/Topic of Conversation:**
*   **Desired Tone/Mood of the Scene:** (e.g., tense, humorous, romantic, confrontational).
*   **Key Information to be Revealed or Exchanged (Optional):**
*   **Starting Line or Prompt (Optional):**
*   **Desired Outcome of the Dialogue (Optional):** (e.g., "they reach an agreement," "the argument escalates").

## 4. Potential Challenges & Considerations

*   **"On-the-Nose" Dialogue:** Characters saying exactly what they think or feel without subtlety.
*   **Exposition Dumps:** Using dialogue solely to convey information to the reader in an unnatural way.
*   **Indistinguishable Voices:** All characters sounding the same.
*   **Unrealistic/Stilted Phrasing:** Dialogue that doesn't sound like how people (or those specific characters) would actually speak.
*   **Lack of Conflict or Purpose:** Dialogue that doesn't advance the story or reveal anything meaningful.
*   **Overuse of Parentheticals/Adverbs:** Relying on stage directions in dialogue to convey emotion instead of letting the words and subtext do the work.

## 5. Metrics for Success (How to Evaluate Output)

*   **Authenticity of Voice:** Does each character sound distinct and true to their profile?
*   **Naturalness:** Does the dialogue flow like a real (or believably fictional) conversation?
*   **Purposefulness:** Does the dialogue contribute to plot, character, or theme?
*   **Subtext (if appropriate):** Is there an underlying layer of meaning?
*   **Emotional Impact:** Does the dialogue effectively convey the characters' emotions and affect the reader?
*   **Clarity:** Is it clear who is speaking and what they are trying to communicate (even if through subtext)?
*   **Engagement:** Is the dialogue interesting to read?
*   **Adherence to Scene Context:** Does it fit the situation and character motivations?

## 6. Example Output Structure/Format
**Scenario:** User wants dialogue for a tense negotiation scene.
*   **User Input:**
    *   Characters:
        *   MARA (30s, sharp, negotiator, trying to secure a deal)
        *   RENN (50s, powerful corporation head, skeptical, holding all the cards)
    *   Scene Context: Mara is in Renn's opulent office, trying to convince him to fund her risky but potentially revolutionary tech project.
    *   Objective: Mara needs to secure funding; Renn needs to be convinced it's not a waste.
    *   Tone: Tense, high-stakes, professional but with underlying power dynamics.

*   **Cline Generated Dialogue (Excerpt):**

    **INT. RENN'S OFFICE - DAY**

    Sunlight streams into a vast, minimalist office. RENN sits behind a large obsidian desk. MARA stands opposite, composed but with a hint of nervousness.

    <center>RENN</center>
    > Your proposal is... ambitious, Ms. Thorne. Some might say reckless.

    <center>MARA</center>
    > (Meeting his gaze)
    > Revolutionary, Mr. Renn. And the data supports its viability. The potential return isn't just financial; it's transformative.

    <center>RENN</center>
    > Potential. A word that costs investors billions every year. My company deals in certainties. What certainty can you offer me beyond these projections?

    <center>MARA</center>
    > The certainty that without this kind of innovation, 'certainty' becomes stagnation. We're offering you the chance to lead, not just compete. I've also secured provisional patents on the core technology.

    <center>RENN</center>
    > (A flicker of interest in his eyes, quickly masked)
    > Patents can be challenged. And leaders often find themselves with arrows in their backs. What's your bottom line? How much of my 'certainty' are you asking for this 'transformation'?

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Dialogue Generation & Refinement (Fiction)"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/dialogue-generation-refinement.md"
type: "use_case_guide"
description: "Generates or refines dialogue for fictional characters that is natural, reveals character, and advances plot."
triggers: ["write dialogue", "character conversation", "fiction dialogue", "refine dialogue scene", "script dialogue"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/short-story-generation.md
-----------------
# Use Case Definition: Short Story Generation

**Objective:** To generate an original short story based on user-provided parameters such as genre, theme, character archetypes, plot points, or specific constraints.

## 1. Core Requirements & Quality Indicators

*   **Originality & Creativity:**
    *   The story should be a novel creation, not a direct copy or minor variation of existing works.
    *   Demonstrates imaginative plot, characters, and setting.
*   **Coherent Plot & Structure:**
    *   Has a clear beginning, middle, and end (even if non-linear, the structure should be intentional).
    *   Events unfold logically (within the story's world) and contribute to the overall narrative.
    *   May include elements like exposition, rising action, climax, falling action, and resolution.
*   **Engaging Narrative:**
    *   Captures and holds the reader's interest.
    *   Creates suspense, emotion, or intrigue as appropriate for the genre.
*   **Well-Developed Characters (for their role):**
    *   Characters have believable motivations and behaviors within the story's context.
    *   Protagonist (if any) is compelling or serves their narrative purpose.
*   **Consistent Tone & Style:**
    *   Maintains a consistent tone (e.g., humorous, dark, whimsical) and writing style appropriate for the genre and story.
*   **Vivid Descriptions & Setting:**
    *   Uses descriptive language to create a clear sense of setting and atmosphere.
*   **Adherence to Genre Conventions (if specified):**
    *   If a genre is requested (e.g., sci-fi, fantasy, mystery, romance), the story incorporates typical elements and tropes of that genre effectively.
*   **Thematic Resonance (if applicable):**
    *   Explores or conveys a theme or underlying message if intended.
*   **Grammatical Correctness & Good Prose:**
    *   Well-written with correct grammar, spelling, and punctuation.
    *   Uses varied sentence structure and appropriate vocabulary.

## 2. Key Stages & Processes Involved

1.  **Understand User Prompts & Constraints:**
    *   Analyze all user inputs: genre, theme, characters, plot ideas, desired length, specific elements to include/avoid.
2.  **Brainstorm Core Concept & Plot Outline:**
    *   Develop a central idea for the story.
    *   Create a basic plot outline (beginning, rising action, climax, resolution).
3.  **Character Development (Basic):**
    *   Define key characteristics, motivations, and conflicts for main characters.
4.  **Setting the Scene (World-Building Lite):**
    *   Establish the time, place, and atmosphere of the story.
5.  **Drafting the Narrative:**
    *   Write the story section by section, focusing on:
        *   **Introduction:** Hooking the reader, introducing characters and setting.
        *   **Rising Action:** Building conflict and suspense.
        *   **Climax:** The peak of the action or emotional tension.
        *   **Falling Action & Resolution:** Winding down the story and resolving conflicts (or leaving them intentionally unresolved if appropriate).
    *   Incorporate dialogue, description, and action.
6.  **Maintaining Pacing & Flow:**
    *   Ensure the story moves at an appropriate pace.
7.  **Review & Revision:**
    *   Check for plot coherence, character consistency, and engaging narrative.
    *   Refine language, descriptions, and dialogue.
    *   Proofread for errors.

## 3. Inputs Required from User/System

*   **Genre (Highly Recommended):** (e.g., science fiction, fantasy, mystery, romance, horror, contemporary).
*   **Theme or Core Idea (Optional):** (e.g., "a story about betrayal," "exploring the meaning of courage").
*   **Key Character(s) (Optional):** Descriptions, archetypes, or names.
*   **Setting (Optional):** Time period, location, general atmosphere.
*   **Plot Points or Conflict (Optional):** Specific events or challenges to include.
*   **Desired Tone/Mood (Optional):** (e.g., lighthearted, suspenseful, melancholic).
*   **Approximate Length (Optional):** (e.g., "very short," "around 1000 words").
*   **Specific Elements to Include or Avoid (Optional):**
*   **Opening Line or Scene Idea (Optional):**

## 4. Potential Challenges & Considerations

*   **True Originality:** Avoiding clichés or overly familiar plotlines.
*   **Character Depth:** Creating believable and engaging characters in a short format.
*   **Pacing:** Effectively managing the story's progression within a limited word count.
*   **Satisfying Resolution (or intentional lack thereof):** Ending the story in a way that feels complete or appropriately open-ended.
*   **Emotional Impact:** Evoking the desired emotions in the reader.
*   **Show, Don't Tell:** Using actions, dialogue, and descriptions to convey information rather than direct exposition.

## 5. Metrics for Success (How to Evaluate Output)

*   **Engagement:** Is the story interesting and compelling to read?
*   **Coherence:** Does the plot make sense and flow logically?
*   **Character Believability:** Are the characters' actions and motivations understandable within the story's context?
*   **Atmosphere & Setting:** Is the world of the story effectively conveyed?
*   **Genre Adherence (if specified):** Does it fit the requested genre?
*   **Originality:** Does it feel like a fresh take or a unique story?
*   **Emotional Resonance (if intended):** Does it evoke the desired feelings?
*   **Completeness:** Does it feel like a complete narrative (even if open-ended)?
*   **Quality of Prose:** Is it well-written from a language perspective?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/tv-show-episode-outlining-beat-sheet-creation.md
-----------------
# Use Case Definition: TV Show Episode Outlining/Beat Sheet Creation

**Objective:** To generate a structured outline or beat sheet for a television show episode, detailing key plot points, character arcs, act breaks, and scene progression, aligned with the show's format and overarching season narrative.

## 1. Core Requirements & Quality Indicators

*   **Adherence to Episodic Structure:**
    *   Follows typical TV episode structure (e.g., Teaser, Act One, Act Two, Act Three, Act Four, Tag for a one-hour drama; or similar structure for sitcoms/other formats).
    *   Clearly defines act breaks and their cliffhangers or turning points.
*   **Plot Cohesion (A-Plot, B-Plot, C-Plot):**
    *   Outlines a clear main plot (A-plot) for the episode.
    *   May include one or more subplots (B-plot, C-plot) that are thematically or narratively connected.
    *   Ensures plots intertwine or resolve effectively within the episode.
*   **Character Progression:**
    *   Shows how main characters are challenged or develop within the episode.
    *   Character actions and decisions drive the episodic plot.
*   **Contribution to Season Arc (if applicable):**
    *   The episode's events contribute to the larger storylines of the season.
*   **Pacing & Tension:**
    *   The beat sheet or outline suggests appropriate pacing for the episode, building tension towards act breaks and a climax.
*   **Scene Breakdown (for Beat Sheets):**
    *   Lists key scenes in chronological order.
    *   For each scene: a brief description of the action, characters involved, and its purpose.
*   **Thematic Consistency:**
    *   The episode's themes align with the overall themes of the show.
*   **Show-Specific Tone & Style:**
    *   Reflects the established tone, style, and genre of the television series.

## 2. Key Stages & Processes Involved

1.  **Understand Show Bible & Season Arc:**
    *   Review information about the show's premise, main characters, established world, tone, and the current season's overarching plotlines.
2.  **Determine Episode's Core Concept/Goal:**
    *   What is the central story or problem this episode will address?
    *   How does it fit into the season's narrative?
3.  **Develop A-Plot, B-Plot (and C-Plot if applicable):**
    *   Brainstorm the main storyline for the episode.
    *   Develop secondary storylines that complement or contrast with the A-plot.
4.  **Outline Act by Act:**
    *   **Teaser:** Hook the audience, introduce an immediate conflict or mystery.
    *   **Act One:** Establish the episode's main problem/goal, introduce complications. End with a turning point.
    *   **Act Two:** Protagonist attempts to solve problem, faces more obstacles, stakes rise. End with a significant setback or new revelation.
    *   **Act Three:** Protagonist at a low point, new plan or approach, push towards climax. End with a major confrontation looming.
    *   **Act Four (or equivalent):** Climax of the A-plot, resolution of the main episodic conflict.
    *   **Tag/Epilogue:** Brief scene showing aftermath, setting up future episodes, or providing an emotional button.
5.  **Break Down Acts into Scenes (Beat Sheet):**
    *   For each act, list the sequence of scenes.
    *   For each scene (beat):
        *   Scene heading (INT./EXT. LOCATION - TIME)
        *   Characters present
        *   Brief (1-2 sentence) description of what happens and the scene's purpose.
6.  **Integrate Subplots:**
    *   Weave B-plot and C-plot scenes into the acts, ensuring they have their own mini-arcs and connect to the A-plot or themes.
7.  **Track Character Arcs within the Episode:**
    *   Note how characters are challenged and how they react or change.
8.  **Review for Pacing, Cohesion, and Impact:**
    *   Ensure the episode has a good rhythm and builds effectively.
    *   Check that all plotlines are resolved satisfactorily (for the episode) or set up for future continuation.

## 3. Inputs Required from User/System

*   **Show Premise/Logline:**
*   **Main Character Profiles & Arcs (for the season):**
*   **Current Season's Overarching Plotlines/Themes:**
*   **Specific Idea or Conflict for This Episode:**
*   **A-Plot and B-Plot Ideas (if user has them):**
*   **Desired Episode Format/Length:** (e.g., 30-minute sitcom, 60-minute drama, number of acts).
*   **Any Established Show Tropes, Running Gags, or Stylistic Elements to Include:**
*   **Point in the Season (Optional):** (e.g., "mid-season episode," "season finale setup").

## 4. Potential Challenges & Considerations

*   **Balancing Episodic Story with Serialized Arcs:** Ensuring the episode is satisfying on its own while still serving the larger season narrative.
*   **Managing Multiple Plotlines:** Weaving A, B, and C plots together coherently.
*   **Pacing an Entire Episode:** Maintaining audience engagement across multiple acts.
*   **Act Break Cliffhangers:** Creating compelling turning points to end each act.
*   **Originality within Established Show Format:** Finding fresh stories within the show's existing world and rules.
*   **Character Voice Consistency:** Ensuring all characters sound like themselves.

## 5. Metrics for Success (How to Evaluate Output)

*   **Structural Integrity:** Does the outline/beat sheet follow a clear and appropriate episodic structure?
*   **Plot Cohesion:** Are the A-plot and subplots well-defined and interconnected?
*   **Character Engagement:** Do the character actions and developments within the episode feel meaningful?
*   **Pacing & Tension:** Does the outline suggest a well-paced episode with effective build-up of tension?
*   **Contribution to Series:** Does it fit within the larger context of the show and season?
*   **Clarity for Writing:** Would a writer be able to take this outline/beat sheet and draft a full script?
*   **Originality of Episodic Story:** Does it present an interesting premise for an episode?
*   **Adherence to Show's Tone/Genre:** Does it feel like it belongs in the specified TV show?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/character-arc-planning.md
-----------------
# Use Case Definition: Character Arc Planning (Fiction)

**Objective:** To outline the transformation or development of a key character (or characters) over the course of a story, detailing their initial state, inciting incidents, internal and external conflicts, key decisions, moments of change, and final state.

## 1. Core Requirements & Quality Indicators

*   **Clear Transformation:**
    *   The arc clearly shows how a character changes from the beginning to the end of the story (e.g., from timid to brave, selfish to altruistic, ignorant to wise).
    *   Alternatively, it can depict a "flat arc" where the character remains steadfast, influencing change in the world around them, or a "negative arc" where the character degrades.
*   **Motivation & Believability:**
    *   The character's changes are driven by believable motivations and reactions to plot events.
    *   The transformation feels organic and earned, not arbitrary.
*   **Connection to Plot:**
    *   The character arc is intrinsically linked to the main plot. Plot events trigger character change, and character choices drive the plot.
*   **Internal & External Conflict:**
    *   The arc considers both the character's internal struggles (flaws, fears, desires, false beliefs) and how they manifest in or react to external conflicts.
*   **Key Moments of Change:**
    *   Identifies specific scenes or events that are pivotal to the character's development (e.g., a moment of realization, a critical decision, a failure, a triumph).
*   **Thematic Relevance:**
    *   The character's journey often reflects or illuminates the story's central themes.
*   **Consistency:**
    *   The character's actions and development remain consistent with their established personality, even as they change (i.e., change should be a progression, not a personality transplant without cause).
*   **Satisfying Progression:**
    *   The arc provides a sense of growth, learning, or meaningful change (or meaningful lack of change, in some cases) that is satisfying for the reader.

## 2. Key Stages & Processes Involved

1.  **Define Initial Character State:**
    *   **Who is the character at the start?** Their personality, flaws, strengths, core beliefs (especially false beliefs they might hold), desires, and fears.
    *   What is their "normal world" or status quo?
2.  **Identify Inciting Incident / Catalyst for Change:**
    *   What event disrupts their normal world and sets them on their journey or forces them to confront their flaws/beliefs?
3.  **Outline Key Challenges & Conflicts:**
    *   What internal and external obstacles will they face that test them and force them to grow or make difficult choices?
    *   How do these conflicts relate to their core flaw or false belief?
4.  **Map Midpoint/Turning Points:**
    *   Identify significant moments where the character makes a key decision, has a revelation, or experiences an event that shifts their perspective or commitment.
5.  **Plan the Climax of the Arc:**
    *   This is often where the character fully confronts their internal flaw or false belief, makes a definitive choice, and demonstrates their transformation (or failure to transform). It usually aligns with the story's main climax.
6.  **Define Final Character State (Resolution):**
    *   **Who is the character at the end?** How have they changed? What have they learned? How has their false belief been replaced by a truth (for positive arcs)?
    *   How does their final state reflect their journey?
7.  **Connect Arc to Theme:**
    *   How does the character's individual journey illustrate or explore the broader themes of the story?
8.  **Integrate with Main Plot:**
    *   Ensure the character arc milestones are woven into the main plot events.

## 3. Inputs Required from User/System

*   **Character Profile (Essential):** Name, basic personality, core desire, major flaw, initial beliefs (especially any false belief that needs to be overcome).
*   **Overall Story Premise/Plot Outline (Highly Recommended):**
*   **Inciting Incident for the Story (if known):**
*   **Main Conflict of the Story:**
*   **Key Themes of the Story:**
*   **Relationship with Other Key Characters (Optional):** How these might influence the arc.
*   **Type of Arc Desired (Optional):** (e.g., positive change, negative/tragic arc, flat arc).

## 4. Potential Challenges & Considerations

*   **Making Change Believable:** Character development needs to feel earned and gradual, not sudden or unmotivated.
*   **"Passive" Protagonist:** Ensuring the character actively makes choices that drive their arc, rather than just having things happen to them.
*   **Integrating Internal and External Conflict:** Showing how internal struggles are reflected in external actions and vice-versa.
*   **Avoiding "On-the-Nose" Development:** Showing change through action and subtext rather than explicitly stating "Character X learned Y."
*   **Uniqueness:** Creating arcs that feel fresh and not like standard tropes rehashed without new insight.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Transformation:** Is the journey from initial to final state clear and well-defined?
*   **Motivational Soundness:** Are the reasons for the character's changes believable?
*   **Plot Integration:** Does the arc feel naturally woven into the main plot events?
*   **Emotional Resonance:** Is the character's journey likely to be emotionally engaging for a reader?
*   **Thematic Connection:** Does the arc effectively explore or support the story's themes?
*   **Actionability for Writer:** Does the planned arc provide a strong guide for writing the character's scenes?
*   **Completeness of Arc:** Does it cover key stages from setup to resolution?

## 6. Example Output Structure/Format
**Scenario:** User is planning a character arc for "Liam," a cynical detective who learns to trust again.
*   **User Input:**
    *   Character: Liam, a cynical, lone-wolf detective.
    *   Flaw: Deep distrust of others due to past betrayal.
    *   False Belief: "You can only rely on yourself."
    *   Story Premise: Liam must partner with a rookie, idealistic detective, Sarah, to solve a complex case that forces him to confront his past.
    *   Desired Arc: Positive change arc – Liam learns to trust Sarah and open up.

*   **Cline Generated Character Arc Plan (Excerpt):**

    **Character Arc Plan: Detective Liam**

    1.  **Initial State (The Lie He Believes):**
        *   Liam is highly skilled but jaded and isolated. He keeps everyone at arm's length.
        *   His mantra: "Trust no one. Rely only on yourself."
        *   He's effective but his methods alienate colleagues. His personal life is non-existent.

    2.  **Inciting Incident (Plot & Arc):**
        *   A high-profile, difficult case lands on his desk.
        *   He's unwillingly partnered with the enthusiastic rookie, Sarah, whose optimism clashes with his cynicism.

    3.  **Rising Action / Confronting the Flaw:**
        *   **Obstacle 1:** Liam initially dismisses Sarah's ideas, tries to work alone. This leads to a setback in the case.
        *   **Obstacle 2:** Sarah's genuine attempts to connect are met with Liam's suspicion. A clue related to Liam's past betrayal surfaces, intensifying his distrust.
        *   **Turning Point 1 (Midpoint approx.):** Sarah, despite Liam's coldness, saves him from a dangerous situation using a method Liam had dismissed. He's forced to acknowledge her competence and, grudgingly, her loyalty in that moment. He starts to share minimal case details.
        *   **Obstacle 3:** The case requires them to rely on each other's complementary skills. Liam sees Sarah take a risk for the case (and for him), further challenging his "trust no one" belief. He shares a small, guarded piece of his past.

    4.  **Climax of Arc (Often aligns with Plot Climax):**
        *   The main antagonist exploits Liam's known distrust, trying to frame Sarah or turn them against each other.
        *   Liam is faced with a critical choice: revert to his old belief and suspect Sarah, or fully trust her despite appearances and his past trauma.
        *   He chooses to trust Sarah. This trust is key to them solving the case and apprehending the villain.

    5.  **Final State (The Truth He Learns):**
        *   Liam has learned that meaningful connections and trust are possible and valuable. He's still a sharp detective, but no longer a lone wolf.
        *   He forms a genuine professional partnership (and perhaps friendship) with Sarah.
        *   He's started to heal from his past betrayal, understanding it doesn't define all relationships.
        *   His new understanding: "Trust is a risk, but some people are worth it."

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Character Arc Planning (Fiction)"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/character-arc-planning.md"
type: "use_case_guide"
description: "Outlines a character's transformation over a story, detailing initial state, conflicts, key decisions, and final state."
triggers: ["character arc", "plan character development", "story character journey", "fiction character transformation", "narrative arc for character"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/descriptive-scene-setting.md
-----------------
# Use Case Definition: Descriptive Scene Setting (Fiction)

**Objective:** To generate vivid and immersive descriptions of a story's setting, including physical environment, atmosphere, sensory details, and mood, to ground the reader in the scene and enhance the narrative.

## 1. Core Requirements & Quality Indicators

*   **Sensory Richness:**
    *   Appeals to multiple senses (sight, sound, smell, touch, taste) to create a multi-dimensional experience for the reader.
*   **Vivid Imagery:**
    *   Uses precise and evocative language to paint a clear mental picture of the location and its elements.
*   **Atmosphere & Mood Creation:**
    *   Effectively establishes the desired mood or atmosphere of the scene (e.g., ominous, peaceful, chaotic, mysterious).
*   **Relevance to Story & Character:**
    *   The description is not just decorative but contributes to the story by:
        *   Reflecting a character's internal state.
        *   Influencing character actions or decisions.
        *   Foreshadowing events.
        *   Revealing thematic elements.
*   **Conciseness & Impact:**
    *   Provides enough detail to be immersive without becoming overly long or slowing down the narrative pace unnecessarily (unless a slower pace is intended for effect).
*   **Originality (where appropriate):**
    *   Avoids clichéd descriptions and offers fresh perspectives or details.
*   **Consistency with World-Building:**
    *   Aligns with previously established details of the fictional world.

## 2. Key Stages & Processes Involved

1.  **Understand Scene Context & Purpose:**
    *   What is happening in this scene? Who is present?
    *   What is the emotional tone or key event of the scene?
    *   How should the setting contribute to this?
2.  **Identify Key Elements of the Setting:**
    *   **Location Type:** (e.g., forest, city street, spaceship interior, ancient ruin).
    *   **Time of Day/Year:** (e.g., dawn, midnight, mid-summer, late autumn).
    *   **Weather/Environmental Conditions:** (e.g., raining, snowing, foggy, scorching heat).
3.  **Brainstorm Sensory Details:**
    *   **Sight:** Colors, light/shadow, shapes, specific objects, scale.
    *   **Sound:** Ambient noises, specific sounds, silence.
    *   **Smell:** Dominant odors, subtle scents.
    *   **Touch/Texture:** Temperature, humidity, feel of surfaces.
    *   **Taste (less common, but if applicable):**
4.  **Select Details that Enhance Mood & Theme:**
    *   Choose details that reinforce the desired atmosphere or connect to the story's themes.
5.  **Draft Descriptive Passages:**
    *   Use strong verbs, specific nouns, and evocative adjectives/adverbs.
    *   Employ figurative language (metaphors, similes) effectively if appropriate for the style.
    *   Show, don't just tell (e.g., instead of "it was cold," describe "his breath plumed white in the biting air").
6.  **Integrate Description with Action/Character:**
    *   Weave setting details into character actions, observations, or dialogue rather than presenting them as static blocks of text.
    *   Show how characters interact with or are affected by their environment.
7.  **Consider Point of View (POV):**
    *   The description should be filtered through the perceptions of the POV character, reflecting what they would notice and how they would interpret it.
8.  **Review & Refine for Impact and Pacing:**
    *   Ensure the description is immersive but doesn't bog down the narrative.
    *   Check for clarity and vividness.

## 3. Inputs Required from User/System

*   **Basic Scene Location & Time:** (e.g., "a dark forest at midnight," "a bustling futuristic marketplace").
*   **Characters Present (Optional):** Knowing who is in the scene can influence what details are highlighted (based on their POV).
*   **Desired Mood/Atmosphere:** (e.g., "eerie," "festive," "desolate," "claustrophobic").
*   **Key Event or Action Taking Place in the Scene (Optional):**
*   **Specific Sensory Details or Objects to Include (Optional):**
*   **Genre of the Story:** (e.g., horror, romance, sci-fi – influences descriptive style).
*   **Point of View Character (if applicable):**

## 4. Potential Challenges & Considerations

*   **"Purple Prose":** Overly ornate or excessive description that distracts from the story.
*   **Generic Descriptions:** Using clichés or uninspired details.
*   **Infodumping Setting Details:** Presenting world-building as a list rather than integrating it into the scene.
*   **Pacing Disruption:** Long descriptive passages can slow down an action-oriented scene if not handled well.
*   **Irrelevant Details:** Including descriptions that don't contribute to mood, character, or plot.

## 5. Metrics for Success (How to Evaluate Output)

*   **Immersive Quality:** Does the description effectively transport the reader to the setting?
*   **Sensory Engagement:** Does it appeal to multiple senses?
*   **Mood Creation:** Does it successfully establish the intended atmosphere?
*   **Vividness & Specificity:** Are the details concrete and memorable?
*   **Relevance to Scene:** Do the descriptive elements enhance the specific actions or emotions of the scene?
*   **Originality:** Does it avoid clichéd descriptions?
*   **Conciseness (relative to impact):** Is the description efficient in conveying its effect?
*   **Integration with Narrative:** Does it feel like a natural part of the scene rather than a tacked-on block of text?

## 6. Example Output Structure/Format
**Scenario:** User wants a description for a scene in a horror story: an abandoned Victorian mansion at night during a thunderstorm.
*   **User Input:**
    *   Location: Abandoned Victorian mansion, interior, dusty grand foyer.
    *   Time: Midnight, during a fierce thunderstorm.
    *   Mood: Eerie, suspenseful, decaying grandeur.
    *   POV Character: Sarah, a paranormal investigator, is cautiously entering.

*   **Cline Generated Descriptive Scene Setting (Excerpt):**

    "Rain lashed against the tall, grimy windows of Blackwood Manor, each gust of wind rattling the frames like skeletal fingers. Sarah pushed open the heavy oak door, its groan echoing into the cavernous foyer. Dust, thick as a shroud, lay over everything – the grand staircase that spiraled into darkness, the peeling wallpaper that clung to the walls like sunburnt skin, the cobweb-draped chandelier that threatened to fall with every thunderclap.

    The air was cold, heavy with the scent of mildew and something else… something acrid and unsettling. A floorboard creaked upstairs, a sound too deliberate for the storm's random fury. Sarah's flashlight beam cut a nervous swathe through the oppressive gloom, glinting off a shard of a broken mirror, reflecting her own wide eyes back at her for a disorienting moment. The only other light came from the jagged flashes of lightning, briefly illuminating the decaying grandeur before plunging the foyer back into near-total darkness."

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Descriptive Scene Setting (Fiction)"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/descriptive-scene-setting.md"
type: "use_case_guide"
description: "Generates vivid and immersive descriptions of a story's setting, including environment, atmosphere, and sensory details."
triggers: ["describe scene", "set the scene", "fiction setting description", "worldbuilding details", "immersive description"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/world-building.md
-----------------
# Use Case Definition: World-Building (Fiction)

**Objective:** To generate detailed elements of a fictional world or setting, including its history, geography, cultures, societies, laws of physics/magic, flora, fauna, and other relevant details to create a rich, believable, and immersive backdrop for a story.

## 1. Core Requirements & Quality Indicators

*   **Internal Consistency:**
    *   All elements of the world are consistent with each other and follow established internal logic (even if that logic is fantastical).
    *   Avoids contradictions in history, geography, culture, or rules of magic/technology.
*   **Depth & Detail:**
    *   Provides a rich tapestry of information that makes the world feel real and lived-in.
    *   Goes beyond surface-level descriptions.
*   **Originality & Creativity (where desired):**
    *   Offers unique or interesting takes on common tropes or creates entirely new concepts.
*   **Impact on Story & Characters:**
    *   World elements should have a tangible impact on the plot and the characters who inhabit it. The world isn't just wallpaper; it shapes events and motivations.
*   **Believability (within its own rules):**
    *   Even in fantasy or sci-fi settings, the world operates according to its own established rules in a way that readers can understand and accept.
*   **Immersive Quality:**
    *   Details are vivid and engaging, helping the reader to imagine and become immersed in the world.
*   **Thematic Resonance (Optional):**
    *   World-building elements can reflect or explore the story's central themes.
*   **Organization & Accessibility:**
    *   Information is presented in a clear and organized manner, perhaps like a wiki or encyclopedia entry for different aspects of the world.

## 2. Key Stages & Processes Involved

1.  **Understand Core Concept & Genre:**
    *   What is the basic premise of the world? (e.g., high fantasy, cyberpunk future, historical alternate reality).
    *   What is the overall tone and genre of the story it will serve?
2.  **Brainstorm Foundational Elements:**
    *   **Cosmology/Physics:** What are the fundamental laws governing this world? Is there magic? Advanced technology? Unique physical laws?
    *   **Geography & Environment:** Continents, climates, key landscapes, natural resources.
    *   **History:** Major historical events, ancient civilizations, wars, technological/magical advancements that shaped the present.
3.  **Develop Cultures & Societies:**
    *   Different races, species, nations, or cultural groups.
    *   Social structures, governments, laws, economies.
    *   Customs, traditions, religions, belief systems, languages.
    *   Art, music, and other cultural expressions.
    *   Relationships between different groups (alliances, conflicts).
4.  **Create Flora & Fauna (if relevant):**
    *   Unique plants, animals, or creatures, especially those that impact the story or culture.
5.  **Detail Technology/Magic Systems:**
    *   How does technology or magic work? What are its rules, limitations, costs, and societal impact?
6.  **Consider Daily Life:**
    *   What is it like for an ordinary person to live in this world? Food, shelter, work, entertainment.
7.  **Identify Potential Conflicts & Story Hooks:**
    *   How do the elements of the world create inherent conflicts, mysteries, or opportunities for adventure?
8.  **Ensure Interconnectedness:**
    *   How do different aspects of the world-building (e.g., geography, history, culture, magic) influence each other?
9.  **Document & Organize:**
    *   Compile the information into a structured format (e.g., by category).

## 3. Inputs Required from User/System

*   **Basic World Premise/Genre:** (e.g., "a steampunk city powered by a mysterious crystal," "a post-apocalyptic desert world").
*   **Specific Aspects to Focus On:** (e.g., "develop the magic system," "describe the main rival kingdoms," "detail the capital city").
*   **Key Story Elements or Characters it Needs to Support:**
*   **Desired Level of Detail:** (e.g., "a brief overview," "in-depth details for X aspect").
*   **Inspirations or Comparable Worlds (Optional):**
*   **Any "Must-Have" or "Must-Avoid" Elements:**

## 4. Potential Challenges & Considerations

*   **"Infodumping":** The challenge for the writer (using AI-generated material) is to weave world-building details naturally into the narrative, rather than dumping large blocks of exposition.
*   **Over-Complication:** Creating systems (magic, politics) that are too convoluted to be easily understood or relevant to the story.
*   **Consistency at Scale:** Maintaining internal consistency as the world grows more detailed.
*   **Balancing Originality with Familiarity:** Creating a unique world that still has relatable or understandable elements for the reader.
*   **Relevance to Story:** Ensuring that world-building details serve the story and aren't just included for their own sake.

## 5. Metrics for Success (How to Evaluate Output)

*   **Richness & Depth:** Does the generated material provide a detailed and multifaceted world?
*   **Internal Consistency:** Are the elements logically coherent within the established rules of the world?
*   **Imaginativeness:** Does it offer creative and interesting concepts?
*   **Story Potential:** Do the world-building details suggest compelling conflicts, settings, and opportunities for character interaction?
*   **Clarity & Organization:** Is the information presented in an understandable and accessible way?
*   **Impact on Narrative:** How well do these world details serve to enhance a potential story set within it?
*   **Adherence to User Prompt:** Does it focus on the aspects requested by the user?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/flash-fiction-creation.md
-----------------
# Use Case Definition: Flash Fiction Creation

**Objective:** To generate an extremely brief, complete, and impactful piece of fictional narrative, typically under 1,000 words (often much shorter, e.g., 100-500 words), based on user-provided prompts or constraints.

## 1. Core Requirements & Quality Indicators

*   **Extreme Conciseness & Brevity:**
    *   The story is very short and every word contributes to the overall effect.
    *   No wasted words or unnecessary exposition.
*   **Completeness of Narrative (Implied or Explicit):**
    *   Despite its brevity, it should feel like a complete story, often with an implied beginning, middle, and end, or a significant moment captured.
    *   May focus on a single event, character, or idea.
*   **Impact & Resonance:**
    *   Aims to leave a strong impression or evoke a specific emotion or thought in the reader quickly.
    *   Often relies on suggestion, subtext, and a punchy or thought-provoking ending.
*   **Originality & Creativity:**
    *   Presents a fresh idea or a unique take on a common theme within the constraints.
*   **Character (Often Minimalist):**
    *   Characters might be sketched briefly but should serve their purpose within the narrative effectively.
*   **Focused Scope:**
    *   Typically centers on a single conflict, moment, or revelation.
*   **Adherence to Genre/Theme (if specified):**
    *   Effectively captures the essence of a requested genre or theme in a very compact form.
*   **Quality of Prose:**
    *   Well-crafted sentences and precise word choice are crucial due to the length constraint.

## 2. Key Stages & Processes Involved

1.  **Understand Core Prompt/Constraint:**
    *   Analyze user input for the central idea, character, setting, genre, or word limit.
2.  **Identify a Single, Potent Idea/Moment:**
    *   Flash fiction often revolves around one striking image, twist, character insight, or situation.
3.  **Outline (Mental or Brief):**
    *   Even for very short pieces, a sense of progression or a pivotal moment is needed.
4.  **Draft with Economy of Language:**
    *   Write directly and concisely.
    *   Focus on showing rather than telling, using vivid details sparingly but effectively.
    *   Imply background and context rather than explicitly stating it.
5.  **Craft an Impactful Beginning & Ending:**
    *   The opening needs to grab attention immediately.
    *   The ending often carries significant weight, providing a twist, resolution, or lingering thought.
6.  **Intense Revision & Editing for Brevity:**
    *   Cut every unnecessary word, phrase, or sentence.
    *   Ensure each remaining element serves a purpose.
    *   Check for pacing and impact.
    *   Proofread carefully.

## 3. Inputs Required from User/System

*   **Core Prompt/Seed Idea (Optional but helpful):** (e.g., "a story about a broken teacup," "a six-word story prompt: 'For sale: baby shoes, never worn.'").
*   **Genre (Optional):**
*   **Character Archetype/Detail (Optional):**
*   **Setting Element (Optional):**
*   **Specific Word Count Limit (Important for Flash Fiction):** (e.g., "under 300 words," "a drabble - exactly 100 words").
*   **Theme to Explore (Optional):**
*   **Desired Mood/Tone (Optional):**

## 4. Potential Challenges & Considerations

*   **Balancing Brevity with Story:** Telling a meaningful story in so few words is the primary challenge.
*   **Avoiding Abruptness:** Endings should feel impactful, not just sudden.
*   **Implying Depth:** Suggesting a larger world or deeper character motivations without explicit detail.
*   **Word Choice Precision:** Every word must be carefully chosen for maximum impact.
*   **Originality within Constraints:** Finding fresh angles for very short forms.

## 5. Metrics for Success (How to Evaluate Output)

*   **Impact:** Does the story leave a lasting impression despite its length?
*   **Conciseness:** Is it effectively brief and to the point?
*   **Completeness (Sense of):** Does it feel like a whole, albeit small, narrative?
*   **Clarity:** Is the story understandable?
*   **Originality:** Does it offer a creative or unique snippet?
*   **Adherence to Constraints:** Does it meet word count limits and incorporate user prompts?
*   **Craftsmanship:** Is the language precise and well-chosen?

## 6. Example Output Structure/Format
**Scenario:** User requests a flash fiction story under 100 words about a lonely lighthouse keeper who receives an unexpected message.
*   **User Input:**
    *   Theme: Loneliness and unexpected connection.
    *   Character: Old lighthouse keeper.
    *   Setting: Isolated lighthouse.
    *   Key Event: Receives a message in a bottle.
    *   Word Limit: Under 100 words.
    *   Mood: Melancholy, then hopeful.

*   **Cline Generated Flash Fiction:**

    The beam cut its lonely arc through the endless night. Seventy years, Thomas had watched it turn, a solitary sentinel. The sea only ever offered gulls' cries and the crash of waves. Tonight, though, it offered something more. A glint at the tide line. A bottle. Inside, a single, water-stained word on a scrap of parchment: "Hello." Thomas smiled, the first time in what felt like another seventy years. The beam suddenly seemed a little less lonely. (78 words)

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Flash Fiction Creation"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/flash-fiction-creation.md"
type: "use_case_guide"
description: "Generates extremely brief, complete, and impactful fictional narratives, typically under 1,000 words."
triggers: ["flash fiction", "short short story", "micro-fiction", "drabble", "write a very short story"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/plot-twist-generation-foreshadowing-ideas.md
-----------------
# Use Case Definition: Plot Twist Generation & Foreshadowing Ideas (Fiction)

**Objective:** To brainstorm and generate ideas for surprising plot twists and subtle foreshadowing techniques that can enhance a fictional narrative, adding depth, intrigue, and a satisfying sense of inevitability or surprise.

## 1. Core Requirements & Quality Indicators

*   **For Plot Twists:**
    *   **Surprising Yet Believable:** The twist should be unexpected but feel logical in retrospect, not arbitrary or a "deus ex machina."
    *   **Impactful:** Significantly alters the reader's understanding of past events, characters, or the direction of the story.
    *   **Well-Setup (Requires Foreshadowing):** The best twists are subtly hinted at earlier in the story.
    *   **Genre-Appropriate:** Fits the tone and conventions of the story's genre.
*   **For Foreshadowing:**
    *   **Subtlety:** Hints are woven naturally into the narrative, not overly obvious or heavy-handed.
    *   **Relevance:** Foreshadowed elements genuinely connect to later plot developments or revelations.
    *   **Multiple Interpretations (Often):** Early hints might be open to misinterpretation by the reader, making the later reveal more impactful.
    *   **Enhances Re-Readability:** Readers can appreciate the cleverness of the foreshadowing on a second read.
*   **Integration:**
    *   Ideas for twists and foreshadowing should be integrable into the existing plot and character arcs.

## 2. Key Stages & Processes Involved

1.  **Understand Existing Plot, Characters, and Themes:**
    *   Analyze the current story elements: What has happened? Who are the key characters? What are the central conflicts and themes?
2.  **Brainstorm Potential Plot Twists:**
    *   Consider common twist categories:
        *   **Identity Reveal:** A character is not who they seem.
        *   **Betrayal:** A trusted character turns against the protagonist.
        *   **Misdirection:** The reader/protagonist has been led to believe something false.
        *   **Hidden Motivation:** A character's true goals are revealed.
        *   **Unexpected Consequence:** An earlier action has unforeseen and significant results.
        *   **The "It Was All a Dream/Simulation" (Use with extreme caution - often disliked).**
    *   Think about what assumptions the reader (or protagonist) is making that could be overturned.
    *   How can a twist re-contextualize previous events?
3.  **Develop Foreshadowing for Proposed Twists:**
    *   For each potential twist, brainstorm subtle clues, hints, or seemingly minor details that could be planted earlier in the story.
    *   These clues should make sense on their own but take on new meaning after the twist is revealed.
    *   Consider using:
        *   Symbolism
        *   Offhand remarks or seemingly insignificant dialogue
        *   Unusual character behaviors
        *   Objects or settings with hidden significance
        *   Prophecies or omens (in relevant genres)
4.  **Brainstorm General Foreshadowing Opportunities (not tied to specific twists):**
    *   Think about key future events or character developments in the plot.
    *   How can these be subtly hinted at earlier to create a sense of anticipation or inevitability?
5.  **Consider Impact on Plot and Character Arcs:**
    *   How would each twist affect the story's direction and the development of the characters?
6.  **Present Ideas:**
    *   Offer a list of potential plot twists with brief explanations.
    *   For each twist, or for general plot points, suggest specific foreshadowing techniques or examples.

## 3. Inputs Required from User/System

*   **Current Plot Outline/Synopsis:**
*   **Key Character Profiles:** Motivations, secrets, relationships.
*   **Themes of the Story:**
*   **Genre:**
*   **Specific Point in the Story Where a Twist is Desired (Optional):** (e.g., "midpoint twist," "ending reveal").
*   **Elements the User Wants to Foreshadow (Optional):**
*   **Any Twists or Foreshadowing Ideas Already Considered/Rejected:**

## 4. Potential Challenges & Considerations

*   **Obvious Twists:** Generating twists that readers can see coming from miles away.
*   **Contrived Twists:** Twists that feel forced or don't make sense with the established story.
*   **Heavy-Handed Foreshadowing:** Clues that are too obvious and spoil the surprise.
*   **Irrelevant Foreshadowing (Red Herrings):** While red herrings can be used, too much misleading foreshadowing can frustrate readers if not handled skillfully.
*   **Retconning vs. True Twists:** A good twist reinterprets existing information, rather than contradicting it without explanation.
*   **Impact on Reader Trust:** Twists that feel like cheating the reader can be detrimental.

## 5. Metrics for Success (How to Evaluate Output)

*   **Plausibility of Twists:** Could the suggested twist logically fit into the story?
*   **Impact of Twists:** Would the twist significantly reframe the narrative or reader understanding?
*   **Subtlety of Foreshadowing:** Are the foreshadowing ideas clever and not overly direct?
*   **Relevance of Foreshadowing:** Do the hints genuinely connect to the proposed twists or future events?
*   **Creativity:** Are the ideas fresh and engaging?
*   **Usefulness for Writer:** Do the suggestions provide concrete, inspiring ideas for the author to develop?
*   **Thematic Connection:** Do the twists or foreshadowed elements enhance the story's themes?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/plot-development-subplot-brainstorming.md
-----------------
# Use Case Definition: Plot Development & Subplot Brainstorming (Fiction)

**Objective:** To assist in developing the main plot and potential subplots for a fictional narrative, generating ideas for conflicts, turning points, rising and falling action, and resolutions that are thematically resonant and character-driven.

## 1. Core Requirements & Quality Indicators

*   **Plot Coherence & Logic:**
    *   Proposed plot points connect logically and contribute to a cohesive overall narrative.
    *   Cause and effect relationships within the plot are believable (within the story's world).
*   **Engagement & Pacing:**
    *   Plot developments are designed to maintain reader interest, build suspense or tension, and vary pacing effectively.
*   **Conflict & Stakes:**
    *   Clearly defines internal and external conflicts for characters.
    *   Establishes meaningful stakes that drive the narrative.
*   **Character-Driven Plotting:**
    *   Plot events arise organically from character motivations, decisions, and flaws, rather than feeling forced or arbitrary.
*   **Thematic Resonance:**
    *   Plot developments and subplot ideas connect to and explore the story's central themes.
*   **Originality & Creativity (for ideas):**
    *   Suggests fresh or interesting plot twists, complications, or resolutions.
*   **Subplot Relevance & Integration:**
    *   Subplots are thematically or narratively connected to the main plot.
    *   Subplots enhance the main story without overshadowing or distracting from it.
    *   Subplots offer opportunities for character development or thematic exploration.
*   **Satisfying Climax & Resolution (Brainstorming):**
    *   Ideas for the climax effectively bring conflicts to a head.
    *   Suggestions for resolution feel earned and provide a sense of closure (or intentional ambiguity).

## 2. Key Stages & Processes Involved

1.  **Understand Core Story Premise & Characters:**
    *   Analyze the user's existing story concept, main characters (their goals, motivations, flaws), setting, and any established plot points or themes.
2.  **Brainstorm Core Conflict Escalation (Rising Action):**
    *   Generate ideas for obstacles, complications, and escalating challenges that the protagonist(s) will face.
    *   Consider how initial conflicts can lead to bigger ones.
3.  **Develop Key Turning Points/Plot Twists:**
    *   Suggest unexpected events or revelations that can alter the course of the story or a character's understanding.
4.  **Conceptualize the Climax:**
    *   Brainstorm scenarios for the story's main confrontation or peak moment of tension where the central conflict comes to a head.
5.  **Outline Potential Resolutions (Falling Action & Denouement):**
    *   Suggest ways the conflicts could be resolved and the aftermath of the climax.
    *   Consider different types of endings (happy, tragic, bittersweet, open-ended).
6.  **Brainstorm Subplot Ideas:**
    *   Identify opportunities for secondary storylines that can:
        *   Develop supporting characters.
        *   Explore related themes.
        *   Add depth or complexity to the main plot.
        *   Provide contrast or relief.
    *   Suggest how subplots might intersect with or influence the main plot.
7.  **Ensure Character Agency & Motivation:**
    *   For each plot point, consider how characters' choices and actions drive the event.
8.  **Connect Plot to Theme:**
    *   How do the proposed plot developments reinforce or explore the story's underlying themes?
9.  **Present Ideas & Options:**
    *   Offer a range of plot ideas, subplot suggestions, or different paths the story could take.

## 3. Inputs Required from User/System

*   **Core Story Idea/Premise:**
*   **Main Character(s) Profile:** Goals, motivations, flaws, relationships.
*   **Setting Information:**
*   **Genre & Desired Tone:**
*   **Central Conflict (if already defined):**
*   **Key Themes the User Wants to Explore:**
*   **Any Existing Plot Points or Outline Snippets:**
*   **Specific Areas Where Help is Needed:** (e.g., "I need a midpoint twist," "Help me develop a subplot for character X").

## 4. Potential Challenges & Considerations

*   **Avoiding Clichés:** Generating fresh plot ideas in established genres.
*   **Maintaining Believability:** Ensuring plot developments, even fantastical ones, feel consistent within the story's internal logic.
*   **Pacing:** Distributing plot events effectively to maintain reader engagement.
*   **Subplot Overload:** Introducing too many subplots can make the narrative feel cluttered.
*   **"Deus Ex Machina":** Avoiding resolutions that feel unearned or overly convenient.
*   **Character Consistency:** Ensuring plot events don't force characters to act against their established nature without proper motivation.

## 5. Metrics for Success (How to Evaluate Output)

*   **Plausibility & Coherence:** Do the suggested plot developments make sense within the story's context?
*   **Engagement Factor:** Do the ideas sound interesting and likely to keep a reader hooked?
*   **Character Congruence:** Do plot suggestions align with character motivations?
*   **Thematic Relevance:** Do the plot/subplot ideas connect to the story's themes?
*   **Originality of Ideas:** Are the suggestions creative and non-obvious?
*   **Usefulness for Author:** Do the suggestions provide concrete, actionable ideas for the writer?
*   **Subplot Integration:** If subplots are suggested, do they seem to enhance the main plot effectively?
*   **Completeness of Arc (Conceptual):** Do the ideas contribute to a satisfying overall narrative arc?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/vignette-scene-writing.md
-----------------
# Use Case Definition: Vignette/Scene Writing

**Objective:** To generate a short, focused piece of writing that captures a specific moment, character sketch, mood, or a single, self-contained scene, often as part of a larger work or as a standalone descriptive piece.

## 1. Core Requirements & Quality Indicators

*   **Focused Scope:**
    *   Clearly centers on a single moment, character interaction, setting description, or emotional beat.
    *   Avoids sprawling into multiple plotlines or complex narratives.
*   **Evocative Description & Imagery:**
    *   Uses vivid language and sensory details (sight, sound, smell, touch, taste) to immerse the reader.
    *   Paints a clear picture of the character, setting, or atmosphere.
*   **Emotional Resonance/Mood Creation:**
    *   Successfully establishes and conveys the intended mood or emotion (e.g., tension, joy, nostalgia, suspense).
*   **Character Insight (if character-focused):**
    *   Reveals aspects of a character's personality, motivations, or internal state through action, dialogue, or internal monologue within the scene.
*   **Atmosphere & Setting:**
    *   Effectively establishes the time, place, and overall feeling of the environment.
*   **Conciseness & Impact:**
    *   Delivers its impact efficiently, without unnecessary words.
    *   Every element contributes to the scene's purpose.
*   **Natural Dialogue (if applicable):**
    *   Dialogue sounds authentic for the characters and situation.
*   **Show, Don't Tell:**
    *   Relies on description, action, and dialogue to convey information and emotion rather than explicit exposition.

## 2. Key Stages & Processes Involved

1.  **Understand Core Focus & Purpose:**
    *   What is the central element of this vignette/scene? (A specific character, a setting, an event, an emotion, a relationship dynamic).
    *   What is this piece intended to achieve or convey?
2.  **Identify Key Sensory Details & Emotional Beats:**
    *   Brainstorm specific details that will bring the moment to life.
    *   Determine the emotional arc or core feeling of the scene.
3.  **Establish Point of View (POV):**
    *   Decide from whose perspective the scene will be told (e.g., first person, third person limited, third person omniscient).
4.  **Draft the Scene/Vignette:**
    *   **Opening:** Immediately establish the setting, character(s), or mood.
    *   **Development:** Build the scene through description, action, dialogue, and/or internal thought. Focus on sensory details.
    *   **Closing:** End with an image, thought, or line of dialogue that resonates or provides a sense of closure for the specific moment (even if the larger story continues).
5.  **Refine Language for Impact:**
    *   Choose precise verbs and evocative adjectives/adverbs.
    *   Pay attention to rhythm and pacing of sentences.
6.  **Ensure Consistency (if part of a larger work):**
    *   Maintain consistency with established character traits, plot points, and setting details from the broader narrative.
7.  **Review & Edit:**
    *   Check for clarity, vividness, emotional impact, and conciseness.
    *   Proofread.

## 3. Inputs Required from User/System

*   **Central Focus/Subject:** (e.g., "a character feeling anxious before a speech," "a description of a rainy city street at night," "a brief argument between two friends").
*   **Key Character(s) Involved (if any):** Names, brief descriptions, or established traits.
*   **Setting Details (if specific):** Time, place, atmosphere.
*   **Desired Mood or Emotion to Convey:**
*   **Specific Sensory Details to Include (Optional):**
*   **Plot Point to Illustrate (if part of a larger story):**
*   **Point of View (Optional):**
*   **Approximate Desired Length (Optional):** (Vignettes/scenes are typically short).
*   **Any Specific Objects, Actions, or Lines of Dialogue to Incorporate (Optional):**

## 4. Potential Challenges & Considerations

*   **Maintaining Focus:** Resisting the urge to expand beyond the intended scope of the single moment/scene.
*   **Balancing Description with Action/Dialogue:** Finding the right mix to keep the scene engaging.
*   **Showing vs. Telling:** A common challenge in descriptive writing.
*   **Creating Impact in a Short Space:** Making a brief piece memorable.
*   **Integration (if part of a larger work):** Ensuring the scene fits cohesively into the broader narrative.

## 5. Metrics for Success (How to Evaluate Output)

*   **Vividness & Imagery:** Does the writing create a strong mental picture or sensory experience?
*   **Emotional Impact/Mood:** Does it successfully evoke the intended feeling?
*   **Focus & Cohesion:** Does it remain centered on its core subject without straying?
*   **Character Revelation (if applicable):** Does it offer insight into the characters involved?
*   **Descriptive Quality:** Is the language precise and evocative?
*   **Conciseness:** Is the scene delivered without unnecessary padding?
*   **Naturalness (of dialogue, description):** Does it feel authentic?
*   **Adherence to Prompt:** Does it effectively address the user's specific request for the scene/vignette?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/chapter-summaries-outlines.md
-----------------
# Use Case Definition: Chapter Summaries/Outlines (for Fiction)

**Objective:** To generate concise summaries or detailed outlines for individual chapters of a novel or long-form fictional work, aiding in plot development, pacing, and ensuring each chapter contributes to the overall narrative.

## 1. Core Requirements & Quality Indicators

*   **Clarity of Purpose:**
    *   Each chapter summary/outline clearly states the main goal or event of that chapter.
*   **Key Plot Advancement:**
    *   Identifies how the chapter moves the main plot forward.
    *   Highlights key scenes, turning points, or revelations within the chapter.
*   **Character Development:**
    *   Notes any significant character development, decisions, or changes that occur within the chapter.
*   **Subplot Integration (if applicable):**
    *   Shows how subplots are woven into or advanced within the chapter.
*   **Setting & Atmosphere:**
    *   Briefly mentions key settings or atmospheric elements relevant to the chapter's events.
*   **Pacing Indication:**
    *   The level of detail or number of events outlined gives a sense of the chapter's pacing (e.g., fast-paced action vs. slower character introspection).
*   **Hook/Transition Notes:**
    *   May suggest how the chapter begins (hooking from previous) or ends (leading to next).
*   **Conciseness (for summaries) / Detail (for outlines):**
    *   Summaries are brief overviews. Outlines provide more granular scene/event breakdowns.
*   **Consistency with Overall Narrative:**
    *   Aligns with the broader plot, character arcs, and themes of the novel (as established in a main outline or by user).

## 2. Key Stages & Processes Involved

1.  **Understand Chapter's Role in Overall Story:**
    *   Review the main plot outline or user's notes to see where this chapter fits and what it needs to accomplish.
2.  **Determine Key Event(s) for the Chapter:**
    *   What is the most important thing that must happen in this chapter?
3.  **Outline Key Scenes/Beats within the Chapter:**
    *   Break the chapter down into smaller, manageable scenes or narrative beats.
    *   For each scene:
        *   What is its purpose?
        *   Which characters are involved?
        *   What is the core conflict or interaction?
        *   How does it start and end?
4.  **Track Character Progression:**
    *   How do the events of this chapter affect the main characters? What do they learn, decide, or how do they change?
5.  **Advance Plot/Subplots:**
    *   Ensure the chapter contributes to moving the main story and any relevant subplots forward.
6.  **Consider Pacing and Tension:**
    *   Arrange scenes to build or release tension as appropriate for the chapter's function.
7.  **Draft Summary/Outline Text:**
    *   Write a concise summary capturing the essence of the chapter, or a more detailed bullet-point outline of scenes and events.
8.  **Note Opening/Closing Hooks:**
    *   Consider how the chapter will begin and how it will transition to the next.

## 3. Inputs Required from User/System

*   **Overall Book/Novel Concept & Plot Outline (Highly Recommended):**
*   **Specific Chapter Number or Placement in the Story:**
*   **Main Goal/Event for This Specific Chapter:**
*   **Characters Expected to Feature Prominently:**
*   **Any Specific Scenes, Plot Points, or Revelations to Include:**
*   **Desired Output: Summary or Detailed Outline?**
*   **Approximate Desired Length of Chapter (Optional):**
*   **Point of View for the Chapter (if specific):**

## 4. Potential Challenges & Considerations

*   **"Middle Book/Chapter Syndrome":** Ensuring chapters in the middle of a story maintain momentum and purpose.
*   **Balancing Plot, Character, and Theme:** Weaving these elements together effectively within each chapter.
*   **Information Dumps:** Avoiding chapters that are solely exposition without advancing the story.
*   **Pacing Issues:** Chapters that drag or rush through important events.
*   **Ensuring Each Chapter is Essential:** Does this chapter need to exist, or could its events be condensed or moved?

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Chapter Goal:** Is it clear what this chapter aims to achieve in the narrative?
*   **Plot Contribution:** Does the outline/summary show how the chapter advances the main story?
*   **Character Relevance:** Are character actions and developments meaningful within the chapter?
*   **Logical Scene Progression (for outlines):** Do the scenes flow well and build towards the chapter's goal?
*   **Actionability for Writer:** Does it provide a useful guide for drafting the actual chapter?
*   **Consistency with Broader Narrative:** Does it fit well with the overall story arc provided by the user?
*   **Engagement Potential:** Does the outlined/summarized chapter sound interesting?

## 6. Example Output Structure/Format
**Scenario:** User is writing a fantasy novel and needs an outline for Chapter 5.
*   **User Input:**
    *   Overall Plot: A young mage must find three ancient artifacts to stop an encroaching shadow force.
    *   Chapter: 5
    *   Main Goal for Chapter 5: The mage, Elara, discovers the first clue to the location of the Sunstone artifact. She faces a moral dilemma.
    *   Characters: Elara, her mentor Master Vorlag, a mysterious informant named Kael.
    *   Desired Output: Detailed Outline.

*   **Cline Generated Chapter Outline:**

    **Chapter 5: The Whispering Map**

    *   **Opening:**
        *   Elara and Master Vorlag are in the ancient library, frustrated after days of fruitless research on the Sunstone.
        *   Vorlag expresses concern about the growing shadow activity.
    *   **Inciting Incident for Chapter:**
        *   A coded message arrives for Elara from Kael, an informant known for dealing in rare information, hinting he knows something about the Sunstone. The message suggests a clandestine meeting.
    *   **Rising Action:**
        1.  **Debate & Decision:** Elara wants to meet Kael. Vorlag is wary, warning Elara about Kael's untrustworthy reputation and the danger of dealing with him. Elara feels the urgency and decides to go against Vorlag's explicit advice, creating a point of tension.
        2.  **The Meeting:** Elara meets Kael in a shadowy part of the city. Kael is enigmatic and demands a steep price for his information: a rare spellbook from Vorlag's private collection – one Elara knows Vorlag treasures and considers dangerous in the wrong hands.
        3.  **Moral Dilemma:** Elara struggles with the choice: betray Vorlag's trust and steal the book for a vital clue, or refuse and potentially lose the only lead to the Sunstone.
    *   **Climax of Chapter:**
        *   Elara makes her decision. (e.g., She attempts to steal the book, or she tries to negotiate a different price with Kael, or she refuses and Kael gives her a cryptic half-clue out of amusement/pity).
    *   **Falling Action:**
        *   Brief immediate consequence of Elara's decision (e.g., she has the book and feels guilty; Kael disappears after giving a partial clue; she returns to Vorlag with a new problem).
    *   **Closing Hook:**
        *   The chapter ends with Elara contemplating her next move based on the outcome of her interaction with Kael, and the weight of her decision. (e.g., "The map fragment Kael had given her felt cold in her hand, but not as cold as the lie she would have to tell Vorlag.")

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Chapter Summaries/Outlines (Fiction)"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/chapter-summaries-outlines.md"
type: "use_case_guide"
description: "Generates concise summaries or detailed outlines for individual chapters of a novel or long-form fictional work."
triggers: ["chapter summary", "chapter outline", "fiction chapter plan", "novel chapter structure", "story beat sheet for chapter"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/character-profile-generation.md
-----------------
# Use Case Definition: Character Profile Generation (Fiction)

**Objective:** To generate a detailed profile for a fictional character, outlining their physical appearance, personality traits, backstory, motivations, flaws, relationships, and other key attributes to aid in consistent and deep characterization in a story.

## 1. Core Requirements & Quality Indicators

*   **Comprehensive Details:**
    *   Covers a wide range of character aspects: physical, psychological, social, and historical.
*   **Internal Consistency:**
    *   Character traits, motivations, and backstory elements are consistent with each other and do not create contradictions.
*   **Believability & Relatability (even for fantastical characters):**
    *   Motivations and behaviors, even if extraordinary, stem from understandable human (or character-specific) desires, fears, or experiences.
*   **Potential for Conflict & Growth:**
    *   Profile includes flaws, internal conflicts, or false beliefs that can drive the character's arc and create story conflict.
*   **Uniqueness & Memorability:**
    *   Avoids overly generic or clichéd character types unless specifically requested as a starting point.
    *   Includes distinctive details that make the character memorable.
*   **Actionability for Writer:**
    *   Provides a rich foundation for the writer to understand and portray the character consistently in various situations.
*   **Alignment with Story/Genre (if provided):**
    *   The character profile fits the tone, genre, and needs of the intended story.

## 2. Key Stages & Processes Involved

1.  **Understand Core Character Concept & Role:**
    *   Analyze user input: What is the character's basic idea? What role do they play in the story (protagonist, antagonist, mentor, sidekick)?
2.  **Brainstorm Physical Appearance:**
    *   Generate details about age, build, hair, eyes, distinguishing features, typical attire, mannerisms.
3.  **Develop Personality Traits:**
    *   List key positive and negative personality traits (e.g., brave, curious, impatient, arrogant).
    *   Consider Myers-Briggs type, Enneagram, or other personality frameworks if helpful conceptually.
    *   How do they generally behave in social situations? When alone? Under pressure?
4.  **Craft Backstory & History:**
    *   Outline significant life events that shaped the character: childhood, education, key relationships, formative experiences (triumphs and traumas).
    *   How does their past influence their present?
5.  **Define Motivations, Goals & Desires:**
    *   What does the character want most (consciously or unconsciously)?
    *   What are their short-term and long-term goals?
6.  **Identify Flaws, Fears & Internal Conflicts:**
    *   What are their major weaknesses or character flaws?
    *   What do they fear most?
    *   What internal struggles or contradictions do they experience? (e.g., desire for love vs. fear of intimacy).
7.  **Outline Key Relationships:**
    *   Describe their relationships with other important characters (family, friends, enemies, mentors, love interests).
    *   What is the nature and dynamic of these relationships?
8.  **Determine Skills, Abilities & Talents:**
    *   What are they good at? What skills have they acquired?
    *   Any special talents or powers (if genre-appropriate)?
9.  **Establish Beliefs & Values (Worldview):**
    *   What are their core beliefs about the world, themselves, and others?
    *   What do they value most? What is their moral code (or lack thereof)?
10. **Summarize in a Profile Format:**
    *   Organize all the generated information into a structured profile, often using headings for different categories.

## 3. Inputs Required from User/System

*   **Character Name (Optional):**
*   **Role in Story (Optional):** (e.g., protagonist, villain, love interest).
*   **Genre of Story (Optional):**
*   **Core Concept or Archetype (Optional):** (e.g., "a reluctant hero," "a cynical detective," "a naive idealist").
*   **Any Specific Traits, Backstory Elements, or Motivations to Include:**
*   **Relationship to Other Characters (if known):**
*   **Key Conflict They Will Face (if known):**

## 4. Potential Challenges & Considerations

*   **Avoiding Stereotypes:** Creating nuanced characters rather than flat archetypes.
*   **Balancing Strengths and Flaws:** Making characters relatable and human (or believably non-human) by giving them both positive and negative traits.
*   **Ensuring Motivations are Strong Enough:** Character goals need to be compelling to drive their actions.
*   **"Mary Sue"/"Gary Stu" Problem:** Avoiding characters who are overly perfect or capable without justification.
*   **Static vs. Dynamic Characters:** Profile should ideally allow for character growth (unless a static character is intended).

## 5. Metrics for Success (How to Evaluate Output)

*   **Depth & Detail:** Does the profile provide a rich and multi-faceted understanding of the character?
*   **Internal Consistency:** Are the character's traits, backstory, and motivations logically connected?
*   **Potential for Story:** Does the profile suggest interesting conflicts, relationships, and potential for character arc?
*   **Uniqueness:** Does the character feel distinct and memorable?
*   **Usefulness for Writer:** Can a writer use this profile to consistently and believably portray the character?
*   **Adherence to Prompt:** Does it incorporate all user-specified elements?

## 6. Example Output Structure/Format
**Scenario:** User wants a profile for a fantasy character.
*   **User Input:**
    *   Name: Lyra
    *   Role: Protagonist, a young sorceress
    *   Genre: High Fantasy
    *   Core Concept: Reluctant hero, initially afraid of her own powers.
    *   Key Conflict: Must learn to control her magic to save her village from a magical blight.

*   **Cline Generated Character Profile (Excerpt):**

    **Character Profile: Lyra**

    *   **Role:** Protagonist
    *   **Age:** 19
    *   **Physical Appearance:** Slender build, with long, dark wavy hair often tied back. Bright, intelligent green eyes that sometimes glow faintly when her magic is active. Wears simple, practical clothes suitable for a village setting, perhaps with a few subtle magical charms woven in.
    *   **Personality Traits:**
        *   *Positive:* Kind, empathetic, intelligent, resourceful, fiercely loyal to her village.
        *   *Negative:* Initially timid, self-doubting, fearful of her untrained magical abilities, prone to anxiety under pressure.
    *   **Backstory:**
        *   Grew up in a small, isolated village where magic is rare and often misunderstood.
        *   Her magical abilities manifested unexpectedly in her early teens, causing a minor accident that frightened her and some villagers.
        *   Has since tried to suppress her powers, fearing she might hurt someone or be ostracized.
    *   **Motivations/Goals:**
        *   *Primary Goal:* To save her village from the spreading magical blight.
        *   *Internal Desire:* To understand and control her magic, and to be accepted for who she is.
    *   **Flaws/Fears:**
        *   *Major Flaw:* Lack of confidence in her own abilities, leading to hesitation.
        *   *Greatest Fear:* Losing control of her magic and harming those she cares about, or being rejected by her community.
    *   **Internal Conflict:** The desire to help her village vs. the fear of her own uncontrolled power.
    *   **Key Relationships:**
        *   *Elder Maeve (Mentor Figure):* The village elder who recognizes Lyra's potential and tries to guide her, though Lyra is initially resistant.
        *   *Rhys (Childhood Friend):* Supportive but perhaps a little fearful of her magic, representing the village's ambivalence.
    *   **Skills/Abilities:**
        *   Untrained but potent innate magical ability (e.g., nature-based or elemental magic).
        *   Good knowledge of local herbs and remedies (pre-magic skills).
        *   Quick learner.
    *   **Beliefs/Values:**
        *   Values community, nature, and kindness.
        *   *Initial False Belief:* "My magic is a curse and dangerous."
        *   *Potential Truth to Learn:* "My magic, when controlled and understood, can be a gift to protect others."
    *   **Potential Arc:** From fear and suppression of her powers to acceptance, control, and using her magic responsibly to become a protector.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Character Profile Generation (Fiction)"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/character-profile-generation.md"
type: "use_case_guide"
description: "Generates a detailed profile for a fictional character, outlining appearance, personality, backstory, motivations, and more."
triggers: ["character profile", "create fiction character", "character sheet", "novel character details", "story character bio"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/poetry-lyrical-content/song-lyric-writing.md
-----------------
# Use Case Definition: Song Lyric Writing

**Objective:** To generate original song lyrics based on user-provided themes, genre, mood, song structure, or specific prompts, aiming for emotional resonance, singability, and adherence to lyrical conventions.

## 1. Core Requirements & Quality Indicators

*   **Musicality & Rhythm:**
    *   Lyrics have a natural rhythm and flow suitable for being set to music.
    *   Considers meter, syllable count per line, and overall cadence.
*   **Rhyme Scheme & Structure (if specified):**
    *   Adheres to requested rhyme schemes (e.g., AABB, ABAB) and song structures (e.g., verse-chorus-verse-chorus-bridge-chorus).
    *   Rhymes feel natural and unforced, not sacrificing meaning for the sake of a rhyme.
*   **Emotional Resonance & Thematic Cohesion:**
    *   Lyrics effectively convey the intended emotion or explore the central theme of the song.
    *   Maintains a consistent mood.
*   **Imagery & Figurative Language:**
    *   Uses vivid imagery, metaphors, similes, and other poetic devices to create engaging and memorable lyrics.
*   **Storytelling/Narrative (if applicable):**
    *   If the song tells a story, the narrative is clear and progresses logically.
*   **Singability:**
    *   Words and phrases are generally easy to sing and pronounce.
    *   Considers vowel sounds and consonant clusters.
*   **Originality & Creativity:**
    *   Offers fresh perspectives, unique phrasing, or novel ways to express common themes.
*   **Genre Appropriateness:**
    *   Lyrics align with the conventions and stylistic expectations of the specified musical genre (e.g., pop, rock, folk, country, hip-hop).

## 2. Key Stages & Processes Involved

1.  **Understand Core Theme, Mood, Genre, & Structure:**
    *   Analyze user input: What is the song about? What feeling should it evoke? What musical genre is it for? Is there a desired structure (verse, chorus, bridge)?
2.  **Brainstorm Key Ideas, Images, & Phrases:**
    *   Generate concepts, metaphors, and specific lines related to the song's theme.
    *   Think about a central hook or memorable line for the chorus.
3.  **Outline Song Structure:**
    *   Map out the sections of the song (e.g., Verse 1, Chorus, Verse 2, Chorus, Bridge, Chorus, Outro).
4.  **Draft Lyrics for Each Section:**
    *   **Chorus:** Write the main, repeatable section that encapsulates the core message or emotion.
    *   **Verses:** Develop the story, provide details, or explore different facets of the theme.
    *   **Bridge:** Offer a contrast, a shift in perspective, or an emotional build-up.
    *   **Pre-Chorus (Optional):** Build anticipation for the chorus.
    *   **Outro/Coda (Optional):** Provide a sense of closure.
5.  **Develop Rhyme Scheme & Meter (if applicable):**
    *   Work on finding appropriate rhymes and maintaining a consistent rhythm or meter within sections.
6.  **Refine Word Choice & Imagery:**
    *   Select words for their sound, meaning, and emotional impact.
    *   Strengthen imagery and figurative language.
7.  **Ensure Narrative/Thematic Flow:**
    *   Check that the lyrics progress logically and cohesively from one section to the next.
8.  **Read Aloud/Sing (Conceptual for AI):**
    *   Assess the singability and musicality of the lyrics by reading them with rhythm.
9.  **Revise & Polish:**
    *   Tighten phrasing, improve rhymes, enhance emotional impact, and proofread.

## 3. Inputs Required from User/System

*   **Theme or Subject Matter of the Song:**
*   **Desired Mood or Emotion:**
*   **Musical Genre (Highly Recommended):** (e.g., pop, rock, folk, blues, R&B).
*   **Song Structure Preferences (Optional):** (e.g., "verse-chorus structure," "include a bridge").
*   **Key Phrases, Ideas, or Story Points to Include (Optional):**
*   **Rhyme Scheme or Meter Ideas (Optional):**
*   **Examples of Similar Songs or Artists (Optional):** For style reference.
*   **Target Audience (Optional):**

## 4. Potential Challenges & Considerations

*   **Forced Rhymes:** Sacrificing meaning or natural language for a rhyme.
*   **Clichés:** Using overused lyrical phrases or imagery.
*   **Singability:** Writing words that are awkward to sing or don't fit well rhythmically.
*   **Abstract vs. Concrete:** Balancing abstract emotions with concrete details and imagery.
*   **Melody (Beyond AI Scope):** Lyrics are only one component of a song; the melody is crucial and created separately. AI-generated lyrics should be flexible enough to be set to music.
*   **Repetition:** Using repetition effectively (e.g., in a chorus) without becoming monotonous.

## 5. Metrics for Success (How to Evaluate Output)

*   **Lyrical Quality:** Is the language evocative, creative, and well-crafted?
*   **Emotional Impact:** Do the lyrics effectively convey the intended mood and resonate emotionally?
*   **Thematic Cohesion:** Is there a clear and consistent theme?
*   **Structural Soundness:** If a structure was requested, do the lyrics fit it well (e.g., distinct verses, impactful chorus)?
*   **Rhyme & Rhythm (if applicable):** Are rhymes natural and unforced? Does it have a good rhythmic flow?
*   **Singability (Conceptual):** Do the lyrics seem like they would be easy and pleasing to sing?
*   **Originality:** Do they offer a fresh take or unique expression?
*   **Genre Appropriateness (if specified):** Do the lyrics fit the conventions of the target genre?

## 6. Example Output Structure/Format
**Scenario:** User wants lyrics for a folk song about a lost love and the changing seasons.
*   **User Input:**
    *   Theme: Lost love, passage of time, memories tied to seasons.
    *   Mood: Melancholy, wistful, a touch of hope.
    *   Genre: Folk
    *   Structure: Verse-Chorus-Verse-Chorus-Bridge-Chorus
    *   Key Imagery: Autumn leaves, winter snow, spring thaw, summer sun.

*   **Cline Generated Lyrics (Excerpt):**

    **(Verse 1)**
    The autumn leaves fell gold and red, the year we said goodbye
    Whispered words on a pathway spread, beneath a fading sky
    You walked away, the air grew cold, a story left untold
    And every falling leaf, I'm told, carries a memory old.

    **(Chorus)**
    Oh, the seasons turn, the river flows, the winter snows descend
    But in my heart, a memory glows, of a love that knew no end
    Though summer sun may warm the land, and spring may heal the pain
    I still recall you holding my hand, in the gentle autumn rain.

    **(Verse 2)**
    The winter came with icy breath, and covered all in white
    The world seemed hushed and still as death, lost in the fading light
    I searched for you in frosted panes, in patterns on the glass
    Just echoes of your voice remains, as lonely moments pass.

    **(Chorus)**
    Oh, the seasons turn, the river flows, the winter snows descend
    But in my heart, a memory glows, of a love that knew no end
    Though summer sun may warm the land, and spring may heal the pain
    I still recall you holding my hand, in the gentle autumn rain.

    **(Bridge)**
    Now spring arrives with hopeful green, the birds begin to sing
    A different life, a different scene, new chances it may bring
    But still I look to that old tree, where we carved our names so true
    And wonder if you think of me, the way I think of you.

    **(Chorus)**
    Oh, the seasons turn, the river flows, the winter snows descend
    But in my heart, a memory glows, of a love that knew no end
    Though summer sun may warm the land, and spring may heal the pain
    I still recall you holding my hand, in the gentle autumn rain.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Song Lyric Writing"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/poetry-lyrical-content/song-lyric-writing.md"
type: "use_case_guide"
description: "Generates original song lyrics based on themes, genre, mood, or structure, focusing on emotional resonance and singability."
triggers: ["write song lyrics", "lyrics for a song", "songwriting help", "create lyrics for pop song", "folk song lyrics about"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/poetry-lyrical-content/poetry-generation.md
-----------------
# Use Case Definition: Poetry Generation

**Objective:** To generate original poetry based on user-provided themes, styles, forms, moods, or specific prompts, aiming for artistic expression, emotional resonance, and adherence to poetic conventions if specified.

## 1. Core Requirements & Quality Indicators

*   **Artistic & Evocative Language:**
    *   Uses vivid imagery, metaphor, simile, and other figurative language effectively.
    *   Word choice is precise and contributes to the poem's overall effect.
*   **Emotional Resonance/Mood:**
    *   Successfully conveys the intended mood or emotion (e.g., joy, sorrow, wonder, anger).
*   **Thematic Cohesion:**
    *   The poem explores or revolves around a central theme or idea.
*   **Adherence to Form (if specified):**
    *   If a specific poetic form is requested (e.g., sonnet, haiku, limerick, villanelle, free verse), the output adheres to its structural rules (meter, rhyme scheme, line count, syllable count).
*   **Rhythm & Musicality:**
    *   The poem has a pleasing rhythm and flow when read aloud.
    *   Sound devices (alliteration, assonance, consonance) may be used effectively.
*   **Originality & Creativity:**
    *   Offers a fresh perspective or unique expression, avoiding clichés unless used intentionally.
*   **Imagery & Sensory Detail:**
    *   Creates strong mental images and appeals to the senses.
*   **Conciseness & Impact:**
    *   Every word and line contributes to the poem's meaning and impact.

## 2. Key Stages & Processes Involved

1.  **Understand Core Prompt/Theme/Form:**
    *   Analyze user input: What is the subject matter? Is there a desired mood, style, or specific poetic form?
2.  **Brainstorm Imagery, Metaphors, and Key Ideas:**
    *   Generate words, phrases, and images related to the theme or prompt.
    *   Think about symbolic representations or figurative language.
3.  **Consider Poetic Form & Structure:**
    *   If a specific form is requested, map out its requirements (rhyme scheme, meter, stanzas).
    *   If free verse, consider line breaks, stanza breaks, and overall shape on the page.
4.  **Draft the Poem:**
    *   Begin writing, focusing on evocative language and imagery.
    *   Pay attention to sound and rhythm.
    *   Develop the central theme or emotion.
5.  **Refine Word Choice & Line Breaks:**
    *   Select words for their precise meaning, sound, and connotation.
    *   Use line breaks and stanza breaks to control pacing, emphasis, and visual appearance.
6.  **Work with Rhyme & Meter (if applicable):**
    *   If a rhyming form is used, find natural-sounding rhymes that don't feel forced.
    *   If metered, ensure the rhythm fits the intended pattern.
7.  **Review for Emotional Impact & Cohesion:**
    *   Read the poem aloud to assess its musicality and emotional effect.
    *   Ensure all parts of the poem contribute to a unified whole.
8.  **Revise & Polish:**
    *   Refine imagery, tighten phrasing, and correct any awkward lines.
    *   Proofread.

## 3. Inputs Required from User/System

*   **Theme or Subject Matter:** (e.g., "love," "nature," "loss," "a specific event").
*   **Desired Mood or Emotion:** (e.g., "sad," "joyful," "reflective," "angry").
*   **Specific Poetic Form (Optional):** (e.g., sonnet, haiku, limerick, free verse).
*   **Style of a Particular Poet (Optional):** (e.g., "in the style of Emily Dickinson").
*   **Specific Images, Words, or Phrases to Include (Optional):**
*   **Rhyme Scheme or Meter Preferences (Optional):**
*   **Approximate Desired Length (Optional):** (e.g., "a short poem," "three stanzas").

## 4. Potential Challenges & Considerations

*   **Forced Rhymes/Meter:** Prioritizing form over meaning or natural language.
*   **Clichés & Overused Imagery:** Difficulty in finding fresh expressions.
*   **Abstract vs. Concrete Language:** Balancing abstract ideas with concrete imagery.
*   **Emotional Authenticity:** Conveying genuine emotion can be challenging for AI.
*   **Subjectivity of Poetry:** What one person considers good poetry, another may not.
*   **Nuance & Subtlety:** Poetry often relies on layers of meaning that can be hard to generate.

## 5. Metrics for Success (How to Evaluate Output)

*   **Evocative Language & Imagery:** Does the poem create vivid mental pictures and use language effectively?
*   **Emotional Impact:** Does it successfully convey the intended mood or elicit an emotional response?
*   **Thematic Clarity & Depth:** Is the central theme clear and explored meaningfully?
*   **Adherence to Form (if specified):** Does it correctly follow the rules of the requested poetic form?
*   **Musicality & Rhythm:** Does it have a pleasing sound and flow?
*   **Originality:** Does it offer a creative or unique poetic expression?
*   **Conciseness & Precision:** Is every word and line impactful?
*   **Overall Artistic Impression:** Does it feel like a well-crafted piece of poetry?

## 6. Example Output Structure/Format
**Scenario:** User requests a short, free-verse poem about the feeling of autumn.
*   **User Input:**
    *   Theme: Autumn
    *   Mood: Reflective, slightly melancholic but beautiful.
    *   Form: Free verse
    *   Length: Short (around 8-12 lines)

*   **Cline Generated Poem:**

    Golden leaves detach,
    spiral dancers on a chill wind.
    The sun, a lower, softer eye,
    watches the world prepare for sleep.

    A scent of woodsmoke,
    and distant, fading laughter.
    Summer's vibrant song
    quiets to a whisper,
    a sigh of russet and brown.
    Beauty in the letting go.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Poetry Generation"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/poetry-lyrical-content/poetry-generation.md"
type: "use_case_guide"
description: "Generates original poetry based on themes, styles, forms, or moods, aiming for artistic expression and emotional resonance."
triggers: ["write a poem", "poetry generation", "create a sonnet", "haiku about", "free verse poem on"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/interactive-game-narrative/rpg-scenario-encounter-design.md
-----------------
# Use Case Definition: Role-Playing Game (RPG) Scenario/Encounter Design

**Objective:** To design a self-contained scenario or encounter for a tabletop or computer role-playing game, including setting description, involved NPCs, potential challenges (combat, social, puzzle), player objectives, and possible outcomes or rewards.

## 1. Core Requirements & Quality Indicators

*   **Clear Objective(s) for Players:**
    *   Players understand what they are supposed to achieve in the scenario/encounter.
*   **Engaging Premise & Hook:**
    *   The scenario starts with an interesting situation or problem that draws players in.
*   **Appropriate Challenge:**
    *   The difficulty of challenges (combat, puzzles, social interactions) is suitable for the intended player characters' level and abilities.
    *   Offers a sense of risk and accomplishment.
*   **Multiple Avenues for Success (Often):**
    *   Good encounters often allow players to use different skills or approaches to succeed (e.g., combat, stealth, diplomacy, clever thinking).
*   **Interesting NPCs:**
    *   Non-Player Characters involved have believable motivations, personalities, and potential reactions to player actions.
*   **Vivid Setting Description:**
    *   The location of the encounter is described clearly, perhaps with tactically relevant features for combat or interactive elements for puzzles/social encounters.
*   **Meaningful Consequences & Rewards:**
    *   Player actions within the encounter have consequences.
    *   Successful completion yields appropriate rewards (experience, items, information, reputation).
*   **Integration with Larger Campaign/World (if applicable):**
    *   The encounter fits thematically and narratively within the broader game world or campaign story.
*   **Clarity for Game Master (GM)/Developer:**
    *   The design is presented in a way that a GM can easily run it, or a developer can implement it.

## 2. Key Stages & Processes Involved

1.  **Define Encounter Goal & Context:**
    *   What is the purpose of this encounter in the larger adventure or campaign?
    *   What type of encounter is it (combat, social, exploration, puzzle, trap)?
2.  **Establish Setting & Atmosphere:**
    *   Describe the location, time of day, weather, and overall mood.
    *   Note any tactically important features or interactive elements.
3.  **Design NPCs/Antagonists:**
    *   Who are the key NPCs or creatures involved?
    *   What are their motivations, goals, abilities, and tactics?
    *   How might they react to different player approaches?
4.  **Outline Player Objectives & Potential Challenges:**
    *   What do the players need to do to "succeed"?
    *   What obstacles stand in their way? (e.g., monsters to fight, a riddle to solve, an NPC to persuade, a trap to disarm).
5.  **Develop Potential Resolutions & Outcomes:**
    *   What happens if players succeed? What if they fail?
    *   Are there partial successes or mixed outcomes?
6.  **Determine Rewards:**
    *   What do players gain from overcoming the encounter (e.g., treasure, information, experience points, story progression)?
7.  **Write Descriptive Text & GM Notes:**
    *   Draft text to be read or paraphrased by the GM to set the scene.
    *   Include notes for the GM on NPC behavior, triggers for events, or hidden information.
8.  **Consider Player Agency & Different Approaches:**
    *   Think about how players might try to tackle the encounter in unexpected ways and how NPCs/the environment might react.
9.  **Structure the Encounter Design:**
    *   Organize information clearly with headings for Setting, NPCs, Objectives, Challenges, Outcomes, Rewards, GM Notes.

## 3. Inputs Required from User/System

*   **RPG System/Ruleset (Optional but helpful):** (e.g., D&D 5e, Pathfinder, Call of Cthulhu) - influences monster stats, skill checks, etc.
*   **Party Level/Capabilities (Approximate):**
*   **Encounter Type Desired:** (e.g., "a challenging combat encounter," "a social intrigue scene," "a puzzle room").
*   **Setting/Location Idea:**
*   **Key NPCs or Monster Types to Include (Optional):**
*   **Connection to Ongoing Campaign/Story (if any):**
*   **Desired Tone/Mood:** (e.g., tense, humorous, horrific).
*   **Reward Ideas (Optional):**

## 4. Potential Challenges & Considerations

*   **Balancing Difficulty:** Making encounters challenging but not impossible or trivial.
*   **Player Agency:** Designing encounters that don't feel like a railroad, allowing for player creativity.
*   **"Solving" Social/Puzzle Encounters:** Creating non-combat encounters that are engaging and have clear (but not necessarily easy) solutions.
*   **GM Fiat vs. Player Choice:** Ensuring outcomes feel like a result of player actions and dice rolls, not just GM whim.
*   **Time Management (for GMs):** Designing encounters that can be run within a reasonable session time.
*   **Scalability (if for various party sizes/levels):**

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Completeness for GM/Developer:** Is all necessary information provided to run/implement the encounter?
*   **Engagement Potential:** Does the scenario sound fun and interesting for players?
*   **Appropriate Challenge Level (Conceptual):** Does the difficulty seem right for the target players?
*   **Plausibility of NPC Actions/Motivations:**
*   **Variety of Potential Solutions (if applicable):** Does it allow for different player approaches?
*   **Meaningful Outcomes & Rewards:**
*   **World/Campaign Consistency:** Does it fit the established game setting and narrative?
*   **Originality/Creativity:** Does it offer a fresh or memorable encounter idea?

## 6. Example Output Structure/Format
**Scenario:** User wants a D&D 5e combat encounter for a party of 3 level 5 adventurers in a ruined shrine.
*   **User Input:**
    *   RPG System: D&D 5e
    *   Party: 3 players, Level 5
    *   Encounter Type: Combat with a small puzzle/trap element.
    *   Setting: Ruined shrine in a swamp.
    *   Enemies: Undead, perhaps a minor spellcaster.
    *   Mood: Creepy, dangerous.

*   **Cline Generated RPG Encounter Design (Excerpt):**

    **Encounter: The Sunken Shrine of Sylas**

    *   **Setting:**
        *   The encounter takes place in the partially flooded main chamber of a small, ruined shrine. Crumbling stone walls are slick with algae. Murky water, about 2 feet deep, covers most of the floor (difficult terrain).
        *   A central dais rises slightly above the water, upon which sits a moss-covered stone altar.
        *   Three crumbling pillars offer partial cover.
        *   **Trap/Puzzle:** The altar has a hidden pressure plate. If stepped on (DC 13 Perception to spot, DC 15 Dexterity (Thieves' Tools) to disable), or if a heavy object is removed from it, spectral hands erupt from the water, attempting to grapple (DC 12 Strength save to avoid) anyone in the water for 1d4 rounds.
    *   **NPCs/Antagonists:**
        1.  **Ghast (1):** Lurks behind the altar, initially hidden (DC 14 Perception to spot). It will try to use its Stench ability and then target weaker-looking PCs.
        2.  **Zombies (3):** Submerged in the murky water, they rise and attack when PCs enter the chamber or the Ghast attacks.
        3.  **(Optional) Will-o'-Wisp (1):** If the fight is too easy, it flickers into existence near a pillar, trying to lure a PC into a deeper, more treacherous part of the water or onto the altar trap.
    *   **Player Objectives:**
        *   Defeat the undead.
        *   (Optional) Discover a clue or item on the altar.
    *   **Challenges:**
        *   Combat with Ghast and Zombies in difficult terrain.
        *   Ghast's Stench and Paralyzing Touch.
        *   The pressure plate trap on the altar.
        *   Potential misdirection by Will-o'-Wisp.
    *   **Potential Resolutions & Outcomes:**
        *   **Success:** Undead are defeated. Trap is avoided or overcome. Players can safely investigate the altar.
        *   **Partial Success:** Undead defeated, but someone triggered the trap and suffered its effects.
        *   **Failure:** Party is overwhelmed (TPK or forced retreat).
    *   **Rewards:**
        *   XP for defeated monsters.
        *   On the altar, a small, waterlogged pouch containing 35 gp and a tarnished silver locket (non-magical but could be a plot hook).
        *   If the trap was disabled or cleverly bypassed, perhaps an inspiration point.
    *   **GM Notes:**
        *   Emphasize the creepy atmosphere, the smell of decay, and the unsettling sounds of the swamp.
        *   The Zombies are slow but relentless. The Ghast is more cunning.
        *   If players search the altar after the fight, they find the pouch. If they triggered the trap, the pouch might be partially submerged or harder to find.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "RPG Scenario/Encounter Design"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/interactive-game-narrative/rpg-scenario-encounter-design.md"
type: "use_case_guide"
description: "Designs self-contained scenarios or encounters for RPGs, including setting, NPCs, challenges, and outcomes."
triggers: ["rpg encounter design", "d&d scenario", "pathfinder encounter", "create rpg quest", "tabletop game encounter"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/creative-writing-storytelling/interactive-game-narrative/interactive-fiction-choose-your-own-adventure-scripting.md
-----------------
# Use Case Definition: Interactive Fiction/Choose-Your-Own-Adventure Scripting

**Objective:** To generate the branching narrative script for a piece of interactive fiction (IF) or a choose-your-own-adventure (CYOA) story, including descriptions of situations/scenes, player choices, and the corresponding consequences or next story segments.

## 1. Core Requirements & Quality Indicators

*   **Branching Narrative Structure:**
    *   Clearly defines different paths and outcomes based on player/reader choices.
    *   Story segments (nodes/pages) are logically connected through choices.
*   **Meaningful Choices:**
    *   Player choices have a tangible impact on the story's direction, character development, or outcomes.
    *   Choices are not illusory (i.e., leading to the same outcome regardless of selection, unless intentionally designed for a specific narrative effect).
*   **Engaging Story & Scenarios:**
    *   Presents interesting situations, conflicts, and dilemmas for the player to navigate.
*   **Clear Descriptions & Options:**
    *   Each story segment clearly describes the current situation.
    *   Player choices are presented unambiguously.
*   **Consistent Tone & World:**
    *   Maintains a consistent tone, style, and adherence to the established fictional world across all branches.
*   **Varied Outcomes & Replayability (Often):**
    *   Different choices lead to genuinely different experiences, encouraging replay.
    *   May include multiple endings.
*   **Logical Consequences:**
    *   The results of player choices are logical within the context of the story and world.
*   **Clarity for Implementation (if for a game engine):**
    *   Script is structured in a way that can be implemented in IF authoring tools (e.g., Twine, Inform) or game engines, often involving clear labeling of nodes/passages and links.

## 2. Key Stages & Processes Involved

1.  **Understand Core Premise, Setting, and Player Role:**
    *   What is the basic story or situation? What is the setting? Who is the player character (or what role does the reader take)?
2.  **Outline Main Story Arcs & Potential Endings:**
    *   Sketch out the major possible paths the story can take and the different ways it might conclude.
3.  **Design Key Choice Points (Decision Nodes):**
    *   Identify critical moments where the player will make a significant decision.
4.  **Develop Story Segments (Nodes/Passages):**
    *   For each part of the story:
        *   Write descriptive text setting the scene and current situation.
        *   If it's a choice point, present 2-4 clear options to the player.
        *   If it's a consequence of a choice, describe the outcome.
5.  **Map Choices to Subsequent Segments:**
    *   Clearly link each choice to the next story segment or outcome it leads to. This forms the branching structure.
    *   (Conceptual for AI: This might involve using labels like `[[Go to Scene A]]` or `[[Choice 1 -> Node_1B]]`).
6.  **Write Content for All Branches:**
    *   Ensure all paths stemming from choices are fleshed out with narrative content.
7.  **Incorporate Variables & Conditions (Advanced):**
    *   (If the system supports it) Plan for variables that track player stats, inventory, or past choices, which can then affect future options or outcomes. AI can describe the logic.
8.  **Ensure Narrative Cohesion Across Branches:**
    *   Even with branching, maintain consistency in character, world, and tone.
9.  **Review & "Playtest" (Conceptual for AI):**
    *   Read through different paths to check for logical flow, engaging choices, and satisfying (or appropriately unsatisfying) outcomes.
    *   Check for dead ends (unless intentional) or broken links.

## 3. Inputs Required from User/System

*   **Story Premise/Starting Situation:**
*   **Genre:** (e.g., fantasy, sci-fi, mystery, horror).
*   **Player Character Concept (Optional):**
*   **Desired Level of Branching/Complexity (Optional):** (e.g., "a few major choices," "many small branches").
*   **Key Themes or Messages (Optional):**
*   **Specific Choices or Outcomes to Include (Optional):**
*   **Target IF System/Format (Optional):** (e.g., "for Twine," "general CYOA text format"). This can influence how choices/links are described.
*   **Desired Tone/Mood:**

## 4. Potential Challenges & Considerations

*   **Managing Complexity:** Branching narratives can quickly become very complex to design and write.
*   **Ensuring All Paths are Engaging:** Some branches might be less interesting than others if not carefully planned.
*   **"Choice Overload":** Presenting too many options at once can be overwhelming.
*   **Meaningful Consequences:** Making choices feel like they genuinely matter.
*   **Avoiding Dead Ends (Unintentional):** Ensuring all paths lead to some form of conclusion.
*   **Balancing Freedom with Narrative Control:** Giving the player agency while still telling a coherent story.
*   **Testing All Branches:** Thoroughly checking every possible path is time-consuming.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Choices & Consequences:** Can the player understand their options and the likely impact of their decisions?
*   **Branching Logic:** Is the narrative structure sound, with choices leading to distinct and logical paths?
*   **Engagement of Story Segments:** Is each part of the story interesting to read?
*   **Sense of Agency:** Does the player feel like their choices matter?
*   **Narrative Cohesion:** Does the overall story (across potential paths) feel coherent?
*   **Replayability Potential:** Would a player be motivated to try different choices?
*   **Completeness:** Are all described branches followed through to some form of outcome?
*   **Adherence to Prompt:** Does it fulfill the user's requirements for the interactive story?

## 6. Example Output Structure/Format
**Scenario:** User wants a short interactive scene where the player explores a cave.
*   **User Input:**
    *   Premise: Player is an explorer who has just found the entrance to a dark cave.
    *   Genre: Adventure/Exploration.
    *   Desired Format: Twine-like (using `[[Link Text->Target Node]]` for choices).

*   **Cline Generated Interactive Fiction Script (Excerpt):**

    **:: Start**
    You stand at the mouth of a dark cave. A cool, damp breeze issues from within, carrying the scent of wet stone and something else... something ancient and unknown. The opening is just large enough to squeeze through.
    *   [[Enter the cave cautiously.->CaveEntrance]]
    *   [[Light a torch before entering.->LightTorch]]
    *   [[Decide it's too risky and turn back.->TurnBack]]

    **:: CaveEntrance**
    The darkness inside is almost total. You take a few hesitant steps forward, your hands outstretched. The ground is uneven. You hear a faint dripping sound echoing from deeper within.
    *   [[Try to find your way by touch.->TouchAhead]]
    *   [[Call out to see if anyone (or anything) is there.->CallOut]]
    *   [[Attempt to light your emergency flare.->LightFlare_Entrance]]

    **:: LightTorch**
    You fumble for your tinderbox and torch. After a few tries, the torch catches, casting flickering orange light on the rough-hewn cave walls. The entrance passage seems to narrow ahead.
    *   [[Proceed into the narrowing passage.->NarrowPassage_Torch]]
    *   [[Examine the cave mouth more closely with the torchlight.->ExamineMouth_Torch]]

    **:: TurnBack**
    Wisdom, or perhaps caution, gets the better of you. This cave has waited for centuries; it can wait a little longer. You turn away from the dark opening and head back towards the sunlight.
    **(Ending: Safe Retreat)**

    **:: TouchAhead**
    Your hands brush against something cold and slimy on the wall. Further ahead, you stumble, your foot catching on a loose rock.
    *   [[Try to regain your balance.->RegainBalance_Stumble]]
    *   [[Fall.->Fall_Darkness]]

    *(...and so on for other nodes like CallOut, LightFlare_Entrance, NarrowPassage_Torch, etc.)*

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Interactive Fiction/CYOA Scripting"
path: "prompts/use_cases/content-creation-and-management/creative-writing-storytelling/interactive-game-narrative/interactive-fiction-choose-your-own-adventure-scripting.md"
type: "use_case_guide"
description: "Generates branching narrative scripts for interactive fiction or choose-your-own-adventure stories."
triggers: ["interactive fiction script", "choose your own adventure story", "cyoa writing", "branching narrative", "Twine story script"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/social-media-post-generation.md
-----------------
# Use Case Definition: Social Media Post Generation

**Objective:** To generate engaging and platform-appropriate social media posts (e.g., for Twitter, LinkedIn, Facebook, Instagram, TikTok) that effectively communicate a message, promote content, or drive engagement.

## 1. Core Requirements & Quality Indicators

*   **Platform Appropriateness:**
    *   Content, tone, length, and style are tailored to the specific social media platform.
    *   Utilizes platform-specific features effectively (e.g., hashtags, mentions, character limits).
*   **Engagement:**
    *   Likely to capture attention and encourage interaction (likes, comments, shares, clicks).
    *   May include questions, calls to action, or conversation starters.
*   **Clarity & Conciseness:**
    *   Message is clear, direct, and easily digestible in a fast-paced social media feed.
    *   Adheres to character limits or optimal lengths for the platform.
*   **Brand Voice Consistency:**
    *   Reflects the established brand voice and personality (if applicable).
*   **Visual Appeal (Conceptual for AI):**
    *   If the post is intended to accompany an image or video, the text should complement the visual. AI can suggest visual concepts or types of imagery.
*   **Accuracy:**
    *   Any factual information, links, or mentions are correct.
*   **Effective Use of Hashtags:**
    *   Includes relevant and potentially trending hashtags to increase visibility.
    *   Avoids overuse or irrelevant hashtags.
*   **Clear Call to Action (CTA) (if applicable):**
    *   If the post aims to drive a specific action (e.g., visit a website, sign up, learn more), the CTA is clear and compelling.

## 2. Key Stages & Processes Involved

1.  **Define Objective & Platform:**
    *   What is the goal of the post? (e.g., awareness, engagement, traffic, lead generation).
    *   Which social media platform(s) is it for?
2.  **Identify Target Audience:**
    *   Who are you trying to reach with this post?
3.  **Determine Core Message/Content:**
    *   What is the key piece of information or idea to convey?
    *   Is it based on existing content (e.g., a blog post, an event)?
4.  **Draft Post Copy:**
    *   Write concise and engaging text tailored to the platform.
    *   Incorporate keywords naturally.
    *   Consider using emojis appropriately to add personality or visual appeal.
5.  **Develop Call to Action (if needed):**
    *   Craft a clear and compelling CTA.
6.  **Select/Suggest Hashtags:**
    *   Research and choose relevant and effective hashtags.
7.  **Suggest Visuals (Conceptual):**
    *   If applicable, suggest the type of image, GIF, or video that would best accompany the post.
8.  **Review & Refine:**
    *   Check for clarity, conciseness, grammar, spelling, and platform compliance.
    *   Ensure it aligns with the brand voice and overall marketing goals.
    *   Verify any links or mentions.

## 3. Inputs Required from User/System

*   **Core Message/Topic:** What the post should be about.
*   **Target Social Media Platform(s):** (e.g., Twitter, LinkedIn, Instagram).
*   **Objective of the Post:** (e.g., share news, promote a blog, ask a question).
*   **Link to Share (if any):**
*   **Key Information/Talking Points:**
*   **Desired Tone/Style:** (e.g., witty, professional, informative, urgent).
*   **Brand Guidelines (if applicable):**
*   **Specific Hashtags to Include/Avoid (Optional):**
*   **Call to Action (if any):**
*   **Reference to Existing Content (Optional):** (e.g., "Create 3 tweets based on this article: [link]").
*   **Visual Concept/Idea (Optional):**

## 4. Potential Challenges & Considerations

*   **Character Limits:** Crafting impactful messages within tight constraints (especially Twitter).
*   **Platform Nuances:** Each platform has its own best practices and audience expectations.
*   **Staying Current:** Social media trends and algorithms change rapidly.
*   **Visuals:** Text-only AI generation means the user needs to source or create accompanying visuals.
*   **Engagement Bait vs. Genuine Interaction:** Creating posts that encourage real engagement.
*   **Measuring Effectiveness (Beyond AI Scope):** Tracking metrics like reach, engagement, and clicks.

## 5. Metrics for Success (How to Evaluate Output)

*   **Platform Fit:** Is the post well-suited for the specified platform(s)?
*   **Clarity & Conciseness:** Is the message easy to grasp quickly?
*   **Engagement Potential:** Is it likely to elicit a response from the target audience?
*   **Adherence to Instructions:** Does it meet all user requirements (topic, tone, CTA, hashtags)?
*   **Brand Alignment:** Does it reflect the desired brand voice?
*   **Grammar & Accuracy:** Is it free of errors?
*   **CTA Effectiveness (if applicable):** Is the call to action clear and compelling?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/quora-reddit-answer-drafting.md
-----------------
# Use Case Definition: Quora/Reddit Answer Drafting

**Objective:** To draft helpful, informative, and contextually appropriate answers to questions posted on platforms like Quora or Reddit, aiming to provide value to the asker and the wider community.

## 1. Core Requirements & Quality Indicators

*   **Directly Addresses the Question:**
    *   The answer clearly and directly responds to the specific question asked.
    *   Avoids going off-topic or providing irrelevant information.
*   **Accuracy & Informativeness:**
    *   Provides factually correct information.
    *   Offers genuine insights, explanations, or solutions.
*   **Platform-Appropriate Tone & Style:**
    *   Adopts a tone suitable for the specific platform and community (e.g., Quora tends to be more explanatory, Reddit can vary widely by subreddit).
    *   May be conversational, authoritative, empathetic, or humorous, as appropriate.
*   **Helpfulness & Value:**
    *   Aims to genuinely help the person who asked the question.
    *   Provides actionable advice, clear explanations, or useful resources.
*   **Clarity & Conciseness:**
    *   Well-structured and easy to understand.
    *   Gets to the point without unnecessary rambling, but provides sufficient detail.
*   **Evidence/Sources (if applicable):**
    *   If making factual claims or providing specific advice, citing sources or explaining the basis of the information can add credibility.
*   **Community Guidelines Awareness (Conceptual):**
    *   Answers should ideally align with the general etiquette and rules of the platform/subreddit (AI cannot know all specific rules, but can aim for generally good conduct).
*   **Non-Promotional (Usually):**
    *   Unless the context explicitly allows for it (e.g., a brand answering a product question), answers should be primarily helpful rather than overtly self-promotional.

## 2. Key Stages & Processes Involved

1.  **Understand the Question & Its Context:**
    *   Carefully read the original question to fully grasp what is being asked.
    *   Note any nuances, underlying assumptions, or specific constraints mentioned by the asker.
    *   Consider the platform and specific community (e.g., subreddit) where the question is posted.
2.  **Research/Recall Relevant Information:**
    *   Access knowledge relevant to answering the question. This might involve internal knowledge or synthesizing information from provided sources.
3.  **Formulate a Core Answer:**
    *   Develop the main points or a direct response to the question.
4.  **Structure the Answer:**
    *   Organize the information logically.
    *   Consider an introduction (acknowledging the question), the main body (providing the answer/explanation), and a brief conclusion or summary.
    *   Use bullet points, numbered lists, or formatting (like bolding) for readability if appropriate.
5.  **Elaborate with Details & Examples:**
    *   Provide supporting details, examples, or explanations to make the answer more comprehensive and understandable.
6.  **Cite Sources (if necessary/appropriate):**
    *   If the answer relies on specific data or external information, mention the source.
7.  **Adopt an Appropriate Tone:**
    *   Tailor the language and tone to the question and platform.
8.  **Review & Refine:**
    *   Check for accuracy, clarity, completeness, and helpfulness.
    *   Proofread for any errors.
    *   Ensure the answer directly addresses the original question.

## 3. Inputs Required from User/System

*   **The Question Posted on Quora/Reddit:** The full text of the question.
*   **Platform/Community Context:** (e.g., "This is for the r/explainlikeimfive subreddit," or "Answering a Quora question about X").
*   **Desired Persona/Stance (Optional):** (e.g., "Answer as an expert in Y," "Provide a neutral overview").
*   **Key Information/Sources to Use (Optional):** If the user wants specific information included or referenced.
*   **Any Points to Emphasize or Avoid:**
*   **Link to the Original Post (Optional but helpful for full context):**

## 4. Potential Challenges & Considerations

*   **Understanding Nuance and Intent:** Questions on these platforms can sometimes be poorly phrased, sarcastic, or have hidden assumptions.
*   **Varying Community Norms:** Different subreddits or Quora topics have distinct cultures and expectations.
*   **Avoiding "Well, Actually" Syndrome:** Providing helpful information without being condescending.
*   **Handling Opinion-Based Questions:** Clearly distinguishing between factual answers and opinions.
*   **Dealing with Misinformation in the Question:** Deciding whether to correct a premise or simply answer the question as asked.
*   **Brevity vs. Thoroughness:** Finding the right balance for the platform.

## 5. Metrics for Success (How to Evaluate Output)

*   **Directness of Answer:** Does it clearly and directly address the question asked?
*   **Helpfulness & Value:** Is the answer likely to be useful to the asker and other readers?
*   **Accuracy:** Is the information provided correct?
*   **Clarity:** Is the answer easy to understand?
*   **Appropriateness of Tone:** Does the tone fit the question and platform?
*   **Completeness (within reason):** Does it provide a reasonably thorough answer without being overly verbose?
*   **Engagement (Indirect):** Would this type of answer likely receive upvotes or positive comments in the given community?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/email-newsletter-content-creation.md
-----------------
# Use Case Definition: Email Newsletter Content Creation

**Objective:** To generate engaging and valuable content for email newsletters, including subject lines, body copy for different sections, and calls to action, tailored to a specific audience and newsletter goal.

## 1. Core Requirements & Quality Indicators

*   **Value Proposition:**
    *   Each newsletter (and its sections) should offer clear value to the subscriber (e.g., information, insights, entertainment, offers).
*   **Engaging Subject Line:**
    *   Subject line is compelling, curiosity-inducing, or clearly states the value, aiming for high open rates.
    *   Concise and mobile-friendly.
*   **Clear & Scannable Content:**
    *   Well-structured with clear headings, short paragraphs, and possibly bullet points.
    *   Easy for subscribers to quickly scan and find information relevant to them.
*   **Consistent Brand Voice & Tone:**
    *   Aligns with the established brand identity and the expectations of the subscribers.
*   **Relevant Content:**
    *   Content is tailored to the interests and needs of the target audience segment.
*   **Strong Call to Action (CTA):**
    *   If the newsletter aims to drive action, CTAs are clear, visible, and compelling.
*   **Mobile Responsiveness (Conceptual for AI):**
    *   Content structure (e.g., short sentences, single-column focus for sections) should facilitate mobile-friendly email design.
*   **Accuracy & Professionalism:**
    *   All information, links, and promotions are accurate.
    *   Free of typos and grammatical errors.

## 2. Key Stages & Processes Involved

1.  **Define Newsletter Goal & Audience:**
    *   What is the primary purpose of this specific newsletter issue (e.g., drive sales, share news, build community, educate)?
    *   Who is the target segment for this newsletter?
2.  **Content Curation/Ideation:**
    *   Determine the key pieces of content or topics to be featured (e.g., new blog posts, product updates, upcoming events, curated articles, special offers).
3.  **Outline Newsletter Structure:**
    *   Plan the sections of the newsletter (e.g., main feature, secondary stories, tips, community spotlight, CTA).
4.  **Craft Subject Line & Preheader Text:**
    *   Develop several options for engaging subject lines and preheader text (preview text).
5.  **Write Body Copy for Each Section:**
    *   Draft concise, engaging copy for each planned section.
    *   Focus on delivering value and maintaining reader interest.
    *   Incorporate links to further reading or relevant web pages.
6.  **Develop Calls to Action (CTAs):**
    *   Create clear and compelling CTAs for desired actions.
7.  **Review & Edit:**
    *   Check for clarity, conciseness, accuracy, and brand voice consistency.
    *   Proofread for errors.
    *   Ensure all links are correct.
    *   Read from the subscriber's perspective: "What's in it for me?"

## 3. Inputs Required from User/System

*   **Purpose/Goal of the Newsletter Issue:**
*   **Target Audience/Segment:**
*   **Key Content/Topics to Feature:** (e.g., links to articles, product information, event details).
*   **Brand Voice/Style Guidelines:**
*   **Desired Call(s) to Action:**
*   **Any Specific Promotions or Offers to Include:**
*   **Previous Newsletter Examples (Optional):** For style reference.
*   **Subject Line Ideas (Optional):**
*   **Company Boilerplate/Footer Information (if needed consistently):**

## 4. Potential Challenges & Considerations

*   **Subject Line Optimization:** Crafting subject lines that maximize open rates without being clickbait.
*   **Content Overload:** Avoiding overwhelming subscribers with too much information.
*   **Mobile Readability:** Ensuring content is easily consumed on small screens.
*   **Maintaining Subscriber Engagement:** Keeping content fresh and valuable over time.
*   **Spam Filters:** Writing copy that avoids triggering spam filters (e.g., avoiding excessive capitalization, misleading claims).
*   **Design & Layout (Beyond AI Scope):** AI generates text; the visual design of the newsletter is a separate step.
*   **List Segmentation & Personalization:** Advanced newsletters often use segmentation; AI can help draft variations for different segments if provided with segment criteria.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Value of Content:** Is the information useful and easy to understand for the target audience?
*   **Subject Line Effectiveness:** Is the subject line compelling and likely to encourage opens?
*   **Engagement Potential:** Is the body copy interesting and likely to be read?
*   **CTA Clarity & Strength:** Are calls to action clear and persuasive?
*   **Brand Voice Consistency:** Does it align with the brand's style?
*   **Structure & Readability:** Is the newsletter well-organized and easy to scan?
*   **Accuracy:** Is all information correct?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/ad-copywriting.md
-----------------
# Use Case Definition: Ad Copywriting

**Objective:** To generate persuasive and concise advertising copy for various platforms (e.g., Google Ads, social media ads, print ads) designed to capture attention, convey a key message, and drive a specific action (e.g., clicks, purchases, sign-ups).

## 1. Core Requirements & Quality Indicators

*   **Persuasiveness & Compelling Message:**
    *   Copy is designed to persuade the target audience to take a desired action.
    *   Highlights unique selling propositions (USPs) and benefits.
*   **Clarity & Conciseness:**
    *   Message is immediately understandable and to the point.
    *   Adheres strictly to character limits and platform constraints.
*   **Attention-Grabbing Headline/Hook:**
    *   The headline or initial text must capture attention quickly in a crowded ad space.
*   **Strong Call to Action (CTA):**
    *   Clearly tells the audience what to do next (e.g., "Shop Now," "Learn More," "Sign Up Today").
    *   CTA is prominent and compelling.
*   **Target Audience Relevance:**
    *   Language, tone, and offer are tailored to the specific target audience.
    *   Addresses their needs, pain points, or desires.
*   **Platform Optimization:**
    *   Copy is formatted and optimized for the specific advertising platform (e.g., keyword integration for Google Ads, engaging visuals for social media ads - AI suggests text to complement visuals).
*   **Brand Voice Consistency:**
    *   Aligns with the established brand voice and messaging.
*   **A/B Testing Suitability (Often):**
    *   Generates variations of headlines, body copy, and CTAs to facilitate A/B testing and optimization.
*   **Compliance:**
    *   Adheres to advertising platform policies and guidelines (e.g., avoiding misleading claims).

## 2. Key Stages & Processes Involved

1.  **Understand Product/Service & Offer:**
    *   Clearly define what is being advertised and the specific offer or value proposition.
2.  **Identify Target Audience & Their Motivations:**
    *   Who are you trying to reach? What are their needs, desires, or pain points?
3.  **Define Campaign Objective & Key Message:**
    *   What is the primary goal of the ad (e.g., clicks, conversions, awareness)?
    *   What is the single most important message to convey?
4.  **Platform Selection & Constraint Analysis:**
    *   Identify the advertising platform(s).
    *   Note character limits, formatting rules, and best practices for each platform.
5.  **Headline Generation:**
    *   Brainstorm and draft multiple attention-grabbing headlines.
    *   Focus on benefits, solutions, or intriguing questions.
6.  **Body Copy Development:**
    *   Write concise and persuasive body text that elaborates on the headline and highlights key benefits.
    *   Use power words and persuasive language.
7.  **Call to Action (CTA) Crafting:**
    *   Develop clear, strong, and action-oriented CTAs.
8.  **Keyword Integration (for Search Ads):**
    *   Incorporate relevant keywords naturally into the ad copy.
9.  **Variation Generation (for A/B Testing):**
    *   Create multiple versions of headlines, body copy, and CTAs.
10. **Review & Refinement:**
    *   Check for clarity, conciseness, persuasiveness, and compliance with platform guidelines.
    *   Ensure all elements work together cohesively.
    *   Proofread for any errors.

## 3. Inputs Required from User/System

*   **Product/Service Being Advertised:**
*   **Specific Offer/Promotion (if any):**
*   **Target Audience Profile:**
*   **Advertising Platform(s):** (e.g., Google Ads, Facebook, LinkedIn).
*   **Campaign Objective:** (e.g., website traffic, lead generation, sales).
*   **Unique Selling Propositions (USPs):** What makes the product/service stand out?
*   **Key Benefits to Highlight:**
*   **Keywords (for search ads):**
*   **Desired Call to Action:**
*   **Brand Voice/Tone Guidelines:**
*   **Any Character Limits or Specific Constraints:**
*   **Examples of Competitor Ads or Successful Ads (Optional):**

## 4. Potential Challenges & Considerations

*   **Extremely Tight Character Limits:** Conveying a compelling message in very few words.
*   **Ad Fatigue:** Audiences can quickly become tired of seeing the same ads. (Need for variations).
*   **Platform Policies:** Navigating the often strict and evolving rules of ad platforms.
*   **Standing Out:** Cutting through the noise in a competitive advertising landscape.
*   **Measuring Effectiveness (Beyond AI Scope):** Requires tracking click-through rates (CTR), conversion rates, etc.
*   **Visuals:** Ad copy often works in conjunction with images or videos, which AI can only conceptually support.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Conciseness:** Is the message instantly understandable within platform limits?
*   **Persuasiveness:** Is the copy likely to motivate the target audience?
*   **Strength of CTA:** Is the call to action clear, compelling, and prominent?
*   **Headline Impact:** Is the headline attention-grabbing and relevant?
*   **Audience Targeting:** Does the copy speak effectively to the defined audience?
*   **Platform Appropriateness:** Is it well-suited for the specified ad platform?
*   **Potential for A/B Testing:** Are there good variations for testing?
*   **Compliance:** Does it seem to adhere to general advertising best practices (AI cannot guarantee platform policy compliance)?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/product-description-writing.md
-----------------
# Use Case Definition: Product Description Writing

**Objective:** To create compelling, informative, and persuasive product descriptions for e-commerce sites, catalogs, or marketing materials that highlight features and benefits, and encourage purchase.

## 1. Core Requirements & Quality Indicators

*   **Benefit-Oriented Language:**
    *   Focuses on how the product benefits the customer, not just listing features.
    *   Translates features into tangible advantages and solutions for the user.
*   **Persuasive & Engaging Tone:**
    *   Uses language that appeals to the target audience and motivates them to buy.
    *   May use storytelling, sensory details, or address pain points.
*   **Clarity & Accuracy:**
    *   Product features, specifications, and materials are described accurately.
    *   Information is clear and easy to understand.
*   **Target Audience Focus:**
    *   Written with the specific target customer in mind, using language and highlighting benefits that resonate with them.
*   **SEO-Friendly (if applicable for online descriptions):**
    *   Incorporates relevant keywords naturally to improve search visibility.
*   **Conciseness & Scannability:**
    *   Provides essential information efficiently.
    *   May use bullet points for key features or specifications for easy scanning.
*   **Unique Selling Propositions (USPs):**
    *   Clearly communicates what makes the product unique or superior to alternatives.
*   **Brand Voice Consistency:**
    *   Aligns with the overall brand tone and style.
*   **Call to Action (Implicit or Explicit):**
    *   Encourages the customer to take the next step (e.g., "Add to Cart," "Learn More").

## 2. Key Stages & Processes Involved

1.  **Understand the Product Thoroughly:**
    *   Identify all key features, materials, specifications, and how it works.
2.  **Identify the Target Audience:**
    *   Who is the ideal customer for this product? What are their needs, desires, and pain points?
3.  **Determine Key Benefits & USPs:**
    *   Translate each feature into a customer benefit.
    *   Identify what makes this product stand out.
4.  **Craft an Engaging Headline/Opening:**
    *   Grab the customer's attention immediately.
5.  **Write Descriptive Body Copy:**
    *   Elaborate on the benefits and features.
    *   Use vivid and sensory language where appropriate.
    *   Tell a story about how the product can improve the customer's life or solve their problem.
6.  **Incorporate Keywords (for SEO):**
    *   Naturally weave in relevant keywords that potential customers might search for.
7.  **Use Bullet Points for Key Details:**
    *   List key features, specifications, or benefits in an easy-to-scan bulleted format.
8.  **Include a Call to Action (if appropriate):**
    *   Guide the customer towards making a purchase.
9.  **Review & Refine:**
    *   Check for accuracy, clarity, persuasiveness, and brand consistency.
    *   Proofread for grammar, spelling, and punctuation errors.
    *   Ensure it addresses the target audience effectively.

## 3. Inputs Required from User/System

*   **Product Name & Category:**
*   **Detailed List of Features & Specifications:** (e.g., dimensions, materials, technical specs).
*   **Target Audience Profile:**
*   **Key Benefits to Emphasize:**
*   **Unique Selling Propositions (USPs):**
*   **Brand Voice/Tone Guidelines:**
*   **Keywords for SEO (if applicable):**
*   **Platform/Context for the Description:** (e.g., e-commerce product page, catalog).
*   **Any Specific Points to Include or Avoid:**
*   **Examples of Competitor Descriptions or Desired Style (Optional):**
*   **Information about the Problem the Product Solves:**

## 4. Potential Challenges & Considerations

*   **Balancing Information with Persuasion:** Providing enough detail without being overwhelming or overly "salesy."
*   **Differentiation:** Making the product stand out in a crowded market.
*   **Maintaining Accuracy:** Ensuring all technical details and claims are correct.
*   **SEO vs. Readability:** Integrating keywords naturally without sacrificing the quality of the copy.
*   **Limited Space:** Some platforms have strict character limits for descriptions.
*   **Visuals:** Product descriptions are almost always accompanied by images/videos; the text should complement these.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Benefits:** Are the advantages for the customer clearly communicated?
*   **Persuasiveness:** Is the description likely to encourage a purchase?
*   **Accuracy of Information:** Are all product details correct?
*   **Audience Appeal:** Does it speak effectively to the target customer?
*   **SEO Effectiveness (if applicable):** Are keywords used appropriately?
*   **Readability & Scannability:** Is it easy to read and digest?
*   **Brand Consistency:** Does it align with the brand's voice?
*   **Completeness:** Does it provide all essential information a customer would need to make a decision?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/faq-and-answer-generation.md
-----------------
# Use Case Definition: FAQ & Answer Generation

**Objective:** To generate a comprehensive list of frequently asked questions (FAQs) and their corresponding clear, concise, and accurate answers related to a specific product, service, topic, or document.

## 1. Core Requirements & Quality Indicators

*   **Relevance of Questions:**
    *   FAQs should address common queries, concerns, or points of confusion that users/customers are likely to have.
    *   Questions are pertinent to the specified subject matter.
*   **Accuracy & Completeness of Answers:**
    *   Answers must be factually correct and provide sufficient information to resolve the question.
    *   Avoid ambiguity and provide definitive information where possible.
*   **Clarity & Conciseness:**
    *   Both questions and answers are phrased clearly and are easy to understand.
    *   Answers are direct and to the point, avoiding unnecessary jargon or overly technical language unless appropriate for the target audience.
*   **Helpfulness:**
    *   The FAQ set as a whole should be genuinely helpful to users seeking information.
*   **Logical Organization (if generating a full FAQ page):**
    *   Questions may be grouped by topic or category for easier navigation.
*   **Consistent Tone & Style:**
    *   Maintains a consistent tone (e.g., helpful, informative, professional) throughout.

## 2. Key Stages & Processes Involved

1.  **Understand Subject Matter & Target Audience:**
    *   Gain a clear understanding of the product, service, or topic for which the FAQ is being created.
    *   Identify the likely audience and their potential level of understanding.
2.  **Identify Potential Questions:**
    *   Brainstorm common questions based on the subject matter.
    *   Review existing documentation, customer support inquiries, or user feedback to identify recurring queries.
    *   Consider different aspects: features, usage, troubleshooting, policies, pricing, etc.
3.  **Formulate Clear Questions:**
    *   Phrase questions from the user's perspective.
    *   Ensure each question is distinct and addresses a specific point.
4.  **Research & Draft Accurate Answers:**
    *   Gather the correct information to answer each question thoroughly.
    *   Write clear, concise, and direct answers.
    *   If necessary, include links to more detailed information or resources.
5.  **Organize & Structure (for a full FAQ set):**
    *   Group related questions into logical categories.
    *   Order questions within categories logically (e.g., from general to specific, or by frequency).
6.  **Review & Refine:**
    *   Check all questions and answers for accuracy, clarity, completeness, and consistency.
    *   Proofread for any errors.
    *   Ensure the FAQ set is easy to navigate and use.

## 3. Inputs Required from User/System

*   **Subject Matter:** The product, service, topic, or document for which the FAQ is needed.
*   **Source Material (Highly Recommended):** Existing documentation, product specifications, website content, articles, or any relevant information.
*   **Target Audience (Optional):** Helps tailor the language and depth of answers.
*   **Specific Questions to Include (Optional):** If the user already has a list of questions.
*   **Areas of Focus (Optional):** Specific aspects the user wants the FAQ to cover.
*   **Desired Tone/Style (Optional):**
*   **Existing Customer Inquiries or Pain Points (Optional):** Valuable for identifying relevant questions.

## 4. Potential Challenges & Considerations

*   **Anticipating All Relevant Questions:** It can be difficult to foresee every possible user query.
*   **Keeping Answers Concise Yet Complete:** Balancing brevity with providing enough detail.
*   **Maintaining Accuracy:** Ensuring answers remain correct as products/services evolve. (Requires periodic review and updates).
*   **Avoiding Jargon:** Making information accessible to a broad audience.
*   **Handling Subjective or Complex Questions:** Some questions may not have simple, definitive answers.

## 5. Metrics for Success (How to Evaluate Output)

*   **Comprehensiveness of Questions:** Does the FAQ cover a good range of likely user queries related to the subject?
*   **Accuracy of Answers:** Are the provided answers factually correct?
*   **Clarity of Questions & Answers:** Are they easy to understand?
*   **Helpfulness:** Would a user find this FAQ set useful in resolving their questions?
*   **Conciseness:** Are answers to the point without unnecessary information?
*   **Organization (if applicable):** If a full FAQ page is generated, is it well-structured?
*   **Relevance:** Are the questions and answers directly pertinent to the specified subject matter?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/generating-image-captions-alt-text.md
-----------------
# Use Case Definition: Generating Image Captions & Alt Text

**Objective:** To generate concise, descriptive, and contextually relevant captions and alternative text (alt text) for images, enhancing accessibility and user engagement.

## 1. Core Requirements & Quality Indicators

*   **For Captions:**
    *   **Contextual Relevance:** Caption relates directly to the image and the surrounding content or platform.
    *   **Engagement:** May be witty, informative, or evocative to engage the viewer.
    *   **Brevity:** Typically short and to the point.
    *   **Brand Voice Consistency:** Aligns with the established brand tone.
    *   **Call to Action (Optional):** May encourage interaction or direct users.
*   **For Alt Text:**
    *   **Descriptive Accuracy:** Accurately describes the image content and function for users who cannot see it (e.g., using screen readers).
    *   **Conciseness:** Provides essential information without being overly verbose.
    *   **Contextual Purpose:** Explains *why* the image is there, if it's functional (e.g., "Submit button") or conveys important information.
    *   **Accessibility Compliance:** Helps meet web accessibility standards (WCAG).
    *   **SEO Benefit (Secondary):** Keywords can be included if natural and relevant, but primary purpose is accessibility.
    *   **Avoid Redundancy:** Does not repeat information already present in nearby text if the image is purely decorative or fully described by context. State if decorative (e.g., `alt="Decorative line separator"`).

## 2. Key Stages & Processes Involved

1.  **Image Analysis (Conceptual for AI - based on user description or image understanding capabilities):**
    *   Understand the key elements, subject, action, and mood of the image.
    *   If AI has vision capabilities, analyze the image directly. Otherwise, rely on user's description of the image.
2.  **Understand Context:**
    *   Where will this image be used? (e.g., blog post, social media, product page).
    *   What is the surrounding text or topic?
    *   What is the purpose of the image in this context?
3.  **Draft Caption(s):**
    *   Generate one or more caption options.
    *   Tailor the tone and style to the platform and audience.
    *   Consider adding relevant hashtags or mentions if for social media.
4.  **Draft Alt Text:**
    *   Describe the image's visual content accurately and concisely.
    *   Focus on what's important for understanding the image's purpose.
    *   If the image is a link, describe the destination or action.
    *   If the image contains text, include that text in the alt attribute (unless it's very long, then summarize).
    *   Indicate if an image is purely decorative if no other descriptive text is needed.
5.  **Review & Refine:**
    *   Check captions for engagement and relevance.
    *   Check alt text for accuracy, conciseness, and helpfulness for accessibility.
    *   Ensure consistency with brand voice.
    *   Proofread.

## 3. Inputs Required from User/System

*   **The Image Itself (or a detailed description of it if AI lacks vision):**
*   **Context of Use:** Where will the image and its caption/alt text appear? (e.g., specific webpage, social media platform).
*   **Purpose of the Image:** (e.g., illustrative, decorative, functional, informative).
*   **Surrounding Text/Topic (Highly Recommended):**
*   **Desired Tone/Style for Caption:**
*   **Key Message to Convey (for caption, if any):**
*   **Target Audience (Optional):**
*   **Keywords (Optional, mainly for SEO aspect of alt text if desired):**
*   **Call to Action for Caption (Optional):**

## 4. Potential Challenges & Considerations

*   **Subjectivity of Captions:** What one person finds engaging, another might not.
*   **Describing Complex Images Concisely (for Alt Text):** Balancing detail with brevity.
*   **Understanding Image Nuance without Vision (if AI relies on description):** The quality of user-provided image descriptions is key.
*   **Decorative vs. Informative Images:** Correctly identifying when alt text should be minimal or descriptive.
*   **Dynamic Content:** Ensuring captions and alt text remain relevant if images change.

## 5. Metrics for Success (How to Evaluate Output)

*   **Caption - Engagement & Relevance:** Is the caption interesting and related to the image and context?
*   **Caption - Tone:** Does it match the desired style?
*   **Alt Text - Accuracy:** Does it accurately describe the image content?
*   **Alt Text - Helpfulness:** Would it be useful to someone using a screen reader?
*   **Alt Text - Conciseness:** Is it to the point?
*   **Accessibility:** Does the alt text contribute to a more accessible experience?
*   **Adherence to Instructions:** Are all user requirements met?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/short-form-and-micro-content-creation/sms-push-notification-copywriting.md
-----------------
# Use Case Definition: SMS/Push Notification Copywriting

**Objective:** To craft extremely concise, clear, and actionable copy for SMS messages and push notifications that effectively delivers information or prompts user engagement within very tight character limits.

## 1. Core Requirements & Quality Indicators

*   **Extreme Brevity:**
    *   Messages are very short, adhering to strict character limits (e.g., SMS ~160 characters, push notifications vary but are also brief).
    *   Every word counts.
*   **Clarity & Immediacy:**
    *   The core message must be instantly understandable.
    *   Users should grasp the purpose of the notification at a glance.
*   **Actionability (Often):**
    *   If the goal is to drive action, the desired action is clear and easy to perform (e.g., tap to view, reply with keyword).
    *   May include a short link (URL).
*   **Urgency/Timeliness (if applicable):**
    *   Effectively conveys time-sensitive information or offers.
*   **Personalization (where possible):**
    *   May include personalization tokens (e.g., user's name) to increase relevance.
*   **Brand Voice Consistency:**
    *   Maintains brand tone even in a very condensed format.
*   **Relevance & Context:**
    *   Notification is relevant to the user and their current context or recent interactions.
*   **Non-Intrusiveness (Consideration):**
    *   While aiming for attention, copy should not be overly aggressive or annoying, respecting the personal nature of these channels.

## 2. Key Stages & Processes Involved

1.  **Define Objective & Channel:**
    *   What is the specific goal of this SMS/push notification? (e.g., alert, reminder, promotion, update).
    *   Confirm if it's for SMS or a specific push notification platform (which might have slightly different constraints or capabilities).
2.  **Identify Target Audience & Context:**
    *   Who is receiving this message?
    *   What is the likely context in which they will receive it?
3.  **Determine the Single Most Important Piece of Information:**
    *   Given the brevity, focus on one core message.
4.  **Draft Multiple Copy Variations:**
    *   Write several versions, experimenting with different wording and calls to action.
    *   Focus on strong verbs and direct language.
5.  **Incorporate Emojis (Optional & Platform-Dependent):**
    *   Consider if a relevant emoji can enhance clarity or save space, but use sparingly and ensure it renders correctly.
6.  **Include a Clear Call to Action (if applicable):**
    *   Make it obvious what the user should do.
7.  **Add Shortened URLs (if linking):**
    *   Use URL shorteners if a link is necessary, to save characters.
8.  **Check Character Counts Rigorously:**
    *   Ensure all variations meet the specific character limits.
9.  **Review for Clarity, Impact, and Errors:**
    *   Read aloud to check for natural phrasing.
    *   Proofread carefully.

## 3. Inputs Required from User/System

*   **Core Message/Purpose of the Notification:**
*   **Target Channel:** SMS or specific Push Notification system.
*   **Specific Offer, Alert, or Information to Convey:**
*   **Call to Action (if any):**
*   **Link to Include (if any):**
*   **Target Audience Segment (Optional):**
*   **Brand Voice/Tone Preferences:**
*   **Any Mandatory Information (e.g., opt-out language for SMS marketing):**
*   **Character Limit (if known and specific):**

## 4. Potential Challenges & Considerations

*   **Severe Character Constraints:** The biggest challenge is conveying a meaningful message in so few characters.
*   **Lack of Formatting:** SMS, in particular, offers very limited formatting options.
*   **Risk of Being Perceived as Spam:** Users are sensitive to unsolicited or irrelevant messages on these channels.
*   **Timing of Delivery:** Crucial for relevance and engagement (though AI typically only drafts copy, not schedules).
*   **URL Shorteners:** Ensuring shortened links are trustworthy and work correctly.
*   **Emoji Compatibility:** Ensuring emojis render as intended across devices.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity within Brevity:** Is the message instantly clear despite its shortness?
*   **Actionability:** If a CTA is present, is it clear and compelling?
*   **Adherence to Character Limits:** Does it fit the constraints?
*   **Impact Potential:** Is it likely to achieve its objective (e.g., get a tap, convey critical info)?
*   **Tone Appropriateness:** Is the tone suitable for the message and brand?
*   **Absence of Ambiguity:** Is there any room for misinterpretation?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/code-refactoring-optimization-suggestions.md
-----------------
# Use Case Definition: Code Refactoring & Optimization Suggestions

**Objective:** To analyze a given piece of source code and provide suggestions for refactoring (improving structure, readability, maintainability without changing external behavior) or optimization (improving performance, resource usage).

## 1. Core Requirements & Quality Indicators

*   **Identification of Refactoring Opportunities:**
    *   Detects common "code smells" (e.g., long methods, duplicated code, large classes, feature envy).
    *   Suggests specific refactoring techniques (e.g., extract method, introduce parameter object, replace conditional with polymorphism).
*   **Identification of Optimization Opportunities:**
    *   Pinpoints potential performance bottlenecks (e.g., inefficient loops, unnecessary computations, suboptimal data structures).
    *   Suggests specific optimizations (e.g., using more efficient algorithms, caching, reducing I/O).
*   **Clarity & Actionability of Suggestions:**
    *   Suggestions are clear, specific, and explain the rationale (the "why").
    *   Provides concrete examples of how the code could be improved (e.g., "before" and "after" snippets, or diffs).
*   **Focus on Maintainability & Readability (for Refactoring):**
    *   Refactoring suggestions aim to make the code easier to understand, modify, and test.
*   **Focus on Performance/Resource Usage (for Optimization):**
    *   Optimization suggestions aim to make the code faster or use fewer resources (CPU, memory).
*   **Contextual Awareness:**
    *   Suggestions are relevant to the programming language, framework, and general context of the code.
*   **Non-Destructive (Suggestions):**
    *   Emphasizes that refactoring should not change the code's external behavior. Optimizations might, but trade-offs should be noted.
*   **Prioritization (Optional):**
    *   May suggest which refactorings or optimizations would yield the most benefit.

## 2. Key Stages & Processes Involved

1.  **Understand Code Under Review:**
    *   Analyze the provided code snippet or file: its purpose, logic, structure, data flow, and dependencies.
2.  **Identify Areas for Refactoring:**
    *   Look for code smells:
        *   Duplicated code.
        *   Long functions/methods or classes.
        *   Complex conditional logic.
        *   Poor naming.
        *   High coupling, low cohesion.
        *   Inconsistent style.
    *   Suggest refactoring techniques (e.g., Extract Method, Rename Variable, Encapsulate Field, Introduce Explaining Variable).
3.  **Identify Areas for Optimization:**
    *   Look for:
        *   Inefficient algorithms or data structures.
        *   Redundant computations or I/O operations.
        *   Bottlenecks in loops or critical sections.
        *   Memory inefficiencies (e.g., creating many temporary objects).
    *   Suggest optimization techniques (e.g., algorithm replacement, caching, loop unrolling, memoization, using more efficient data structures).
4.  **Formulate Specific Suggestions:**
    *   For each identified opportunity:
        *   Clearly describe the issue.
        *   Explain why it's a problem (e.g., impacts readability, performance).
        *   Propose a specific change or refactoring.
        *   Illustrate with a "before" and "after" code example if possible, or describe the change.
5.  **Explain Rationale & Trade-offs:**
    *   Justify why the suggested change is an improvement.
    *   For optimizations, mention any potential trade-offs (e.g., increased code complexity for performance gain).
6.  **Structure Suggestions:**
    *   Organize suggestions clearly, perhaps by type (refactoring, optimization) or by location in the code.

## 3. Inputs Required from User/System

*   **Source Code Snippet or File(s) to Review:**
*   **Programming Language (and framework, if relevant):**
*   **Specific Goals (Optional):** (e.g., "focus on improving readability," "find performance bottlenecks," "reduce complexity").
*   **Context (Optional):** Information about how the code is used, performance requirements, or existing coding standards.

## 4. Potential Challenges & Considerations

*   **Understanding Complex Code:** Accurately analyzing intricate or poorly documented code.
*   **Subjectivity of "Clean Code":** Some refactoring suggestions can be stylistic or based on opinion.
*   **Performance Profiling (Beyond AI Scope):** True optimization often requires profiling tools to identify actual bottlenecks. AI suggestions are based on common patterns.
*   **Risk of Introducing Bugs:** Refactoring or optimizing code, if not done carefully, can introduce new errors. (AI provides suggestions, developer implements and tests).
*   **Micro-optimizations vs. Architectural Issues:** AI might focus on local optimizations while larger architectural improvements are needed.
*   **Contextual Trade-offs:** An optimization in one context might be a pessimization in another.

## 5. Metrics for Success (How to Evaluate Output)

*   **Relevance & Validity of Suggestions:** Are the identified issues genuine problems? Are the proposed solutions appropriate?
*   **Actionability:** Can a developer take concrete steps based on the suggestions?
*   **Clarity of Explanation:** Is the rationale behind each suggestion clear?
*   **Impactfulness:** Are the suggestions likely to lead to significant improvements in readability, maintainability, or performance?
*   **Specificity:** Are suggestions concrete rather than vague?
*   **Balance:** Does it offer a good mix of refactoring and optimization ideas if both are relevant?
*   **Educational Value:** Does the user learn something about code quality or performance from the suggestions?

## 6. Example Output Structure/Format
**Scenario:** User provides a Python function that could be refactored for clarity and optimized.
*   **User Input:**
    *   Source Code:
        ```python
        # Processes a list of items and returns a new list with items that meet a certain criteria
        # and are transformed.
        def process_my_list(items_list, criteria_value, transform_factor):
            new_list = []
            for i in range(len(items_list)):
                if items_list[i] > criteria_value: # Check criteria
                    # Apply transformation
                    transformed_item = items_list[i] * transform_factor
                    new_list.append(transformed_item)
            return new_list
        ```
    *   Language: Python
    *   Goal: Improve readability and suggest potential optimizations.

*   **Cline Generated Suggestions:**

    **Refactoring & Optimization Suggestions for `process_my_list`:**

    **Refactoring Suggestions:**

    1.  **Use List Comprehension for Clarity & Conciseness:**
        *   **Issue:** The current `for` loop with an `if` condition and `append` can be made more Pythonic and readable using a list comprehension.
        *   **Suggestion:** Convert the loop to a list comprehension.
        *   **Example:**
            ```python
            # Before
            # new_list = []
            # for i in range(len(items_list)):
            #     if items_list[i] > criteria_value:
            #         transformed_item = items_list[i] * transform_factor
            #         new_list.append(transformed_item)
            # return new_list

            # After
            def process_my_list_refactored(items_list, criteria_value, transform_factor):
                return [item * transform_factor for item in items_list if item > criteria_value]
            ```
        *   **Rationale:** List comprehensions are more idiomatic in Python for this type of filtering and transformation, leading to more concise and often more readable code.

    2.  **More Descriptive Variable Names (Minor):**
        *   **Issue:** `items_list` is acceptable, but `data` or a more specific name based on context could be considered if the list's content is known. `transform_factor` is clear.
        *   **Suggestion:** Consider renaming `items_list` if a more domain-specific term applies. (Low priority for this example).

    **Optimization Suggestions:**

    1.  **Consider NumPy for Large Lists (If Applicable):**
        *   **Issue:** For very large numerical lists, Python's native loops can be slower than vectorized operations using libraries like NumPy.
        *   **Suggestion:** If `items_list` is expected to be very large and performance is critical, consider using NumPy arrays and its vectorized operations.
        *   **Example (Conceptual):**
            ```python
            # import numpy as np
            # def process_with_numpy(items_array, criteria_value, transform_factor):
            #     filtered_array = items_array[items_array > criteria_value]
            #     transformed_array = filtered_array * transform_factor
            #     return transformed_array.tolist()
            ```
        *   **Rationale:** NumPy operations are implemented in C and can be significantly faster for numerical computations on large arrays.
        *   **Trade-off:** Adds a dependency on NumPy. Only beneficial for large datasets where the overhead of NumPy is offset by performance gains.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Code Refactoring & Optimization Suggestions"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/code-refactoring-optimization-suggestions.md"
type: "use_case_guide"
description: "Analyzes source code to provide suggestions for refactoring (improving structure, readability) or optimization (improving performance)."
triggers: ["refactor code", "optimize code", "code review suggestions", "improve code quality", "performance optimization tips"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/unit-test-generation.md
-----------------
# Use Case Definition: Unit Test Generation

**Objective:** To generate unit tests for a given piece of code (e.g., a function, method, or class) to verify its correctness by testing individual components in isolation.

## 1. Core Requirements & Quality Indicators

*   **Coverage of Logic Paths:**
    *   Tests cover different execution paths within the code, including conditional branches and loops.
*   **Testing Edge Cases:**
    *   Includes tests for boundary conditions, empty inputs, null inputs (if applicable), and other potential edge cases.
*   **Correct Assertions:**
    *   Assertions accurately verify the expected outcomes for given inputs.
*   **Isolation:**
    *   Tests focus on a single unit of code and mock dependencies where necessary to ensure isolation.
*   **Readability & Maintainability of Tests:**
    *   Test code is clear, well-structured, and easy to understand and maintain.
    *   Uses descriptive test case names.
*   **Adherence to Testing Framework Syntax:**
    *   Generated tests use the correct syntax and conventions of the specified testing framework (e.g., Jest, PyTest, JUnit, NUnit, Go's `testing` package).
*   **Non-Trivial Tests:**
    *   Goes beyond simple "happy path" testing to include more complex scenarios.
*   **Idempotency:**
    *   Tests should produce the same results every time they are run with the same inputs and code.

## 2. Key Stages & Processes Involved

1.  **Understand Code Under Test:**
    *   Analyze the function/method/class to be tested: its inputs, outputs, internal logic, dependencies, and expected behavior.
2.  **Identify Test Scenarios:**
    *   Brainstorm different scenarios to test:
        *   **Happy Path:** Normal, expected inputs and outputs.
        *   **Edge Cases:** Boundary values, empty inputs, nulls, large inputs.
        *   **Error Conditions:** How the code handles invalid inputs or exceptional situations.
        *   **Specific Logic Paths:** Inputs that trigger different conditional branches or loop behaviors.
3.  **Select Testing Framework & Language:**
    *   Confirm the programming language of the code and the testing framework to be used.
4.  **Write Test Cases:**
    *   For each scenario:
        *   **Arrange:** Set up any necessary preconditions or input data. Mock dependencies if needed.
        *   **Act:** Execute the unit of code being tested with the prepared inputs.
        *   **Assert:** Verify that the actual output or behavior matches the expected outcome.
5.  **Structure Test Code:**
    *   Organize tests into a test suite or class.
    *   Use descriptive names for test methods/functions.
    *   Follow the conventions of the chosen testing framework.
6.  **Handle Dependencies (Mocking/Stubbing):**
    *   If the unit under test has external dependencies, generate code to mock or stub those dependencies so the unit can be tested in isolation.
7.  **Review & Refine Tests:**
    *   Check for test coverage, clarity, correctness of assertions, and maintainability.

## 3. Inputs Required from User/System

*   **Source Code of the Unit to be Tested:** (The function, method, or class).
*   **Programming Language:**
*   **Testing Framework to be Used:** (e.g., Jest, PyTest, JUnit).
*   **Key Functionality or Logic Paths to Prioritize for Testing (Optional):**
*   **Specific Edge Cases or Error Conditions to Test (Optional):**
*   **Information about Dependencies that Might Need Mocking (Optional):**

## 4. Potential Challenges & Considerations

*   **Testing Code with Side Effects:** Units that modify global state or interact with external systems (files, databases, networks) are harder to test in isolation and require careful mocking.
*   **Complex Dependencies:** Mocking intricate or numerous dependencies can be challenging.
*   **Private/Internal Methods:** Unit testing typically focuses on public interfaces. Testing private methods directly is often discouraged (test them via public methods).
*   **Achieving High Coverage:** Ensuring all significant logic paths and edge cases are covered.
*   **Test Brittleness:** Writing tests that don't break unnecessarily when the underlying code is refactored without changing its behavior.
*   **Understanding Code Intent:** AI might struggle to infer all intended behaviors or edge cases if the code is unclear or lacks good comments/documentation.

## 5. Metrics for Success (How to Evaluate Output)

*   **Functionality of Tests:** Do the generated tests run correctly within the specified framework?
*   **Coverage (Conceptual):** Do the tests cover a reasonable range of scenarios, including happy paths, edge cases, and error conditions relevant to the unit's logic?
*   **Correctness of Assertions:** Do the assertions accurately reflect the expected behavior of the code unit?
*   **Isolation:** Are dependencies appropriately mocked or handled to ensure the unit is tested in isolation?
*   **Readability & Maintainability:** Is the test code clear, well-named, and easy to understand?
*   **Adherence to Framework Conventions:**
*   **Usefulness:** Would these tests genuinely help in verifying the correctness of the code and preventing regressions?

## 6. Example Output Structure/Format
**Scenario:** User wants unit tests for a simple Python function `add(a, b)` using `unittest`.
*   **User Input:**
    *   Source Code:
        ```python
        def add(a, b):
            """Returns the sum of two numbers."""
            return a + b
        ```
    *   Language: Python
    *   Testing Framework: `unittest`

*   **Cline Generated Unit Tests (Conceptual - would be in a separate test file):**
    ```python
    import unittest
    # Assuming the function 'add' is in a file named 'my_module.py'
    # from my_module import add # Or however the function is imported

    # For demonstration, defining 'add' here if not importing
    def add(a, b):
        return a + b

    class TestAddFunction(unittest.TestCase):

        def test_add_positive_numbers(self):
            """Test adding two positive numbers."""
            self.assertEqual(add(2, 3), 5)
            self.assertEqual(add(100, 200), 300)

        def test_add_negative_numbers(self):
            """Test adding two negative numbers."""
            self.assertEqual(add(-2, -3), -5)
            self.assertEqual(add(-100, -50), -150)

        def test_add_positive_and_negative_number(self):
            """Test adding a positive and a negative number."""
            self.assertEqual(add(5, -3), 2)
            self.assertEqual(add(-7, 4), -3)

        def test_add_zero(self):
            """Test adding zero to a number."""
            self.assertEqual(add(0, 5), 5)
            self.assertEqual(add(5, 0), 5)
            self.assertEqual(add(0, 0), 0)
            self.assertEqual(add(-5, 0), -5)

        # Optional: Test for non-numeric input if error handling is expected
        # def test_add_non_numeric_input(self):
        #     """Test adding non-numeric types (should raise TypeError)."""
        #     with self.assertRaises(TypeError):
        #         add(2, "hello")
        #     with self.assertRaises(TypeError):
        #         add("world", 3)

    if __name__ == '__main__':
        unittest.main()
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Unit Test Generation"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/unit-test-generation.md"
type: "use_case_guide"
description: "Generates unit tests for a given piece of code (function, method, class) using a specified testing framework."
triggers: ["generate unit tests", "write tests for code", "create test cases", "pytest generation", "jest test generation", "junit tests"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/scripting-for-automation.md
-----------------
# Use Case Definition: Scripting for Automation

**Objective:** To generate scripts (commonly in Bash, Python, PowerShell, or other scripting languages) to automate repetitive system administration tasks, build processes, deployments, data manipulation, or other workflows.

## 1. Core Requirements & Quality Indicators

*   **Correct Task Execution:**
    *   The script accurately performs the sequence of operations described by the user.
*   **Robustness & Error Handling:**
    *   Includes basic error checking (e.g., checking command exit statuses, handling file not found).
    *   May log errors or provide informative messages.
*   **Efficiency:**
    *   Uses appropriate commands and constructs for the task without unnecessary complexity or resource usage.
*   **Readability & Maintainability:**
    *   Script is well-formatted, uses meaningful variable names, and includes comments for complex or non-obvious sections.
*   **Portability (Consideration):**
    *   If intended for multiple environments, uses commands and syntax that are widely available or notes dependencies.
*   **Parameterization/Configuration (Optional):**
    *   May accept command-line arguments or use configuration files/environment variables to allow for flexibility without modifying the script itself.
*   **Idempotency (if applicable):**
    *   For some automation tasks, it's desirable that running the script multiple times has the same effect as running it once (e.g., for setup or configuration scripts).

## 2. Key Stages & Processes Involved

1.  **Understand Automation Goal & Steps:**
    *   What specific task needs to be automated?
    *   What are the individual manual steps involved in performing this task?
2.  **Choose Scripting Language:**
    *   Select an appropriate language based on the task, environment, and user preference (e.g., Bash for simple command sequences, Python for more complex logic or data manipulation).
3.  **Translate Manual Steps into Script Commands:**
    *   For each manual step, identify the corresponding command-line tool, system call, or language function.
4.  **Implement Control Flow:**
    *   Use loops, conditionals, and functions to manage the sequence of operations and handle variations.
5.  **Handle Variables & Data:**
    *   Use variables to store and manipulate data (e.g., file paths, user inputs, command outputs).
    *   Parse and process data from files or command outputs if necessary.
6.  **Add Error Checking & Logging:**
    *   Check the success/failure of critical commands.
    *   Print informative messages or log to a file.
    *   Implement basic error recovery or exit gracefully on failure.
7.  **Incorporate User Inputs/Parameters (if needed):**
    *   Allow the script to accept arguments from the command line or read from a configuration source.
8.  **Add Comments & Documentation:**
    *   Explain the purpose of the script, key variables, and complex sections.
    *   Include usage instructions (how to run it, any prerequisites).
9.  **Test (Conceptual for AI):**
    *   Mentally walk through the script's execution flow with different scenarios.

## 3. Inputs Required from User/System

*   **Description of the Task to be Automated:**
*   **Sequence of Manual Steps Currently Performed:**
*   **Preferred Scripting Language:** (e.g., Bash, Python, PowerShell).
*   **Operating System/Environment where the script will run:** (This affects command availability and syntax).
*   **Specific Tools, Commands, or APIs to be Used (if known):**
*   **Input Sources (if any):** (e.g., files to process, user prompts, environment variables).
*   **Expected Output or Outcome of the Script:**
*   **Error Handling Requirements (Optional):** (e.g., "log errors to a file," "send an email on failure").

## 4. Potential Challenges & Considerations

*   **Environment Differences:** Scripts that work in one environment might fail in another due to differences in installed tools, paths, or permissions.
*   **Error Handling Complexity:** Anticipating and handling all possible error conditions can be difficult.
*   **Security Risks:** Scripts, especially those running with elevated privileges or handling sensitive data, must be written carefully to avoid vulnerabilities. (AI should be cautious about generating scripts that handle credentials directly).
*   **Dependencies:** Ensuring that all tools or libraries used by the script are available in the execution environment.
*   **Idempotency:** Making scripts safe to re-run without unintended side effects.
*   **Maintaining Complex Scripts:** As automation scripts grow, they can become difficult to manage.

## 5. Metrics for Success (How to Evaluate Output)

*   **Functionality:** Does the script successfully automate the intended task?
*   **Correctness:** Does it perform the operations accurately and in the correct sequence?
*   **Robustness:** Does it handle common errors or variations gracefully?
*   **Readability:** Is the script easy to understand and maintain?
*   **Efficiency:** Does it perform the task without unnecessary delays or resource consumption?
*   **Adherence to Language/Shell Best Practices:**
*   **Security (Conceptual):** Does it avoid obvious security pitfalls (e.g., hardcoding passwords, command injection vulnerabilities if processing user input directly in shell commands)?
*   **Usefulness:** Does the script provide a tangible benefit by automating a manual process?

## 6. Example Output Structure/Format
**Scenario:** User wants a Bash script to back up a directory to a specified location, adding a timestamp to the backup archive name.
*   **User Input:**
    *   Task: Backup a source directory to a target directory.
    *   Scripting Language: Bash
    *   Source Directory: `/home/user/documents`
    *   Target Directory: `/mnt/backups/`
    *   Archive Format: `.tar.gz`
    *   Timestamp Format: `YYYYMMDD-HHMMSS`

*   **Cline Generated Bash Script:**
    ```bash
    #!/bin/bash

    # Script to back up a source directory to a target directory with a timestamp.

    # --- Configuration ---
    SOURCE_DIR="/home/user/documents"
    TARGET_BASE_DIR="/mnt/backups"
    # --- End Configuration ---

    # Check if source directory exists
    if [ ! -d "$SOURCE_DIR" ]; then
        echo "Error: Source directory '$SOURCE_DIR' not found."
        exit 1
    fi

    # Create target directory if it doesn't exist
    mkdir -p "$TARGET_BASE_DIR"
    if [ ! -d "$TARGET_BASE_DIR" ]; then
        echo "Error: Could not create or find target directory '$TARGET_BASE_DIR'."
        exit 1
    fi

    # Generate timestamp
    TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
    BASENAME=$(basename "$SOURCE_DIR")
    ARCHIVE_NAME="${BASENAME}_backup_${TIMESTAMP}.tar.gz"
    TARGET_FILE_PATH="${TARGET_BASE_DIR}/${ARCHIVE_NAME}"

    echo "Starting backup of '$SOURCE_DIR'..."
    echo "Archive will be saved as '$TARGET_FILE_PATH'"

    # Create the tarball
    # Using -C to change directory so the archive doesn't contain the full source path
    tar -czf "$TARGET_FILE_PATH" -C "$(dirname "$SOURCE_DIR")" "$(basename "$SOURCE_DIR")"

    # Check if tar command was successful
    if [ $? -eq 0 ]; then
        echo "Backup completed successfully: $TARGET_FILE_PATH"
        # Optional: List contents for verification
        # echo "Archive contents:"
        # tar -tzf "$TARGET_FILE_PATH"
    else
        echo "Error: Backup failed. Check tar command output."
        exit 1
    fi

    exit 0
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Scripting for Automation"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/scripting-for-automation.md"
type: "use_case_guide"
description: "Generates scripts (Bash, Python, etc.) to automate repetitive system tasks, build processes, or other workflows."
triggers: ["automation script", "bash script for", "python script to automate", "powershell automation", "automate workflow"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/boilerplate-code-generation.md
-----------------
# Use Case Definition: Boilerplate Code Generation

**Objective:** To generate initial boilerplate code for a new project, module, component, or file based on a specified programming language, framework, and common structural patterns.

## 1. Core Requirements & Quality Indicators

*   **Correct Project/Module Structure:**
    *   Generates a standard directory structure and essential files for the specified project type or framework (e.g., `src`, `tests`, `public` directories; `package.json`, `main.py`, `index.html`).
*   **Basic Configuration Files:**
    *   Includes minimal, functional configuration files (e.g., `tsconfig.json` for TypeScript, `requirements.txt` or `Pipfile` for Python, basic `webpack.config.js`).
*   **Entry Point File(s):**
    *   Creates main application entry point(s) (e.g., `app.js`, `main.py`, `index.html` with a script tag).
*   **"Hello World" or Basic Example:**
    *   Often includes a simple, runnable example to demonstrate the basic setup is working.
*   **Adherence to Framework Conventions:**
    *   Follows the typical project layout and file naming conventions of the specified framework (e.g., Next.js, Django, Spring Boot, React).
*   **Essential Dependencies (Conceptual):**
    *   Lists or includes common starter dependencies in package manager files (e.g., `express` for a Node.js web server, `react` and `react-dom` for a React app).
*   **Readability & Cleanliness:**
    *   Boilerplate is clean, well-formatted, and free of unnecessary clutter.
*   **Comments for Key Sections (Optional):**
    *   May include comments indicating where to add specific logic or further configuration.

## 2. Key Stages & Processes Involved

1.  **Identify Project/Module Type & Technology Stack:**
    *   What kind of project is it (e.g., web application, CLI tool, library, mobile app component)?
    *   What programming language, framework, and key libraries will be used?
2.  **Determine Standard Directory Structure:**
    *   Based on the project type and framework, define the common directory layout.
3.  **Identify Essential Configuration Files:**
    *   List necessary config files and their basic content (e.g., package manager file, linter config, compiler config).
4.  **Create Main Entry Point(s):**
    *   Generate the initial code for the main file(s) that start the application or module.
5.  **Add Basic "Hello World" or Example Functionality:**
    *   Include a simple piece of code that can be run to verify the setup.
6.  **Generate Folder Structure & Files:**
    *   (Conceptually for AI) Describe the commands or actions to create directories and write the content for each boilerplate file.
7.  **Include README (Optional but good):**
    *   Generate a basic README.md with project title, brief description, and instructions on how to build/run.

## 3. Inputs Required from User/System

*   **Project Type:** (e.g., "React web app," "Python Flask API," "Node.js CLI tool," "Go library").
*   **Programming Language:**
*   **Framework (if any):** (e.g., Next.js, Django, Spring Boot, Express).
*   **Project Name (for naming root folder, package names, etc.):**
*   **Key Features or Modules to Include Stubs For (Optional):** (e.g., "include a basic auth module stub").
*   **Preferred Package Manager (if applicable, e.g., npm, yarn, pip, poetry):**
*   **Version Control Initialization Preference (Optional):** (e.g., "initialize a Git repository").

## 4. Potential Challenges & Considerations

*   **Keeping Up with Framework Changes:** Frameworks evolve, and boilerplate conventions can change.
*   **Opinionated vs. Minimal Boilerplate:** Deciding how much to include by default. Some users prefer minimal setups, others more feature-rich starters.
*   **Configuration Complexity:** Some frameworks require extensive initial configuration.
*   **Dependency Management:** Ensuring correct versions of starter dependencies.
*   **Build Tool Integration:** Setting up basic build tool configurations (e.g., Webpack, Parcel, Maven, Gradle).

## 5. Metrics for Success (How to Evaluate Output)

*   **Correctness of Structure:** Is the generated directory and file structure conventional for the specified project type/framework?
*   **Functionality of Basic Example:** Can the "Hello World" or initial example be run successfully (assuming dependencies are installed)?
*   **Completeness of Boilerplate:** Does it include the essential files and configurations to get started?
*   **Adherence to Conventions:** Does it follow common practices for the language/framework?
*   **Ease of Getting Started:** Does the boilerplate significantly reduce the initial setup effort for a developer?
*   **Readability & Cleanliness:** Is the generated code and structure easy to understand?

## 6. Example Output Structure/Format
**Scenario:** User wants boilerplate for a simple Node.js/Express web server.
*   **User Input:**
    *   Project Type: Node.js Express web server
    *   Programming Language: JavaScript (Node.js)
    *   Framework: Express
    *   Project Name: "my-simple-server"
    *   Package Manager: npm

*   **Cline Generated Boilerplate (Conceptual - would describe file creation):**

    **File Structure:**
    ```
    my-simple-server/
    ├── src/
    │   └── app.js
    ├── public/
    ├── package.json
    └── README.md
    ```

    **`my-simple-server/package.json` (Excerpt):**
    ```json
    {
      "name": "my-simple-server",
      "version": "1.0.0",
      "main": "src/app.js",
      "scripts": {
        "start": "node src/app.js",
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "dependencies": {
        "express": "^4.17.1"
      }
    }
    ```

    **`my-simple-server/src/app.js` (Excerpt):**
    ```javascript
    const express = require('express');
    const app = express();
    const port = process.env.PORT || 3000;

    app.get('/', (req, res) => {
      res.send('Hello World from my-simple-server!');
    });

    app.listen(port, () => {
      console.log(`Server listening at http://localhost:${port}`);
    });
    ```

    **`my-simple-server/README.md` (Excerpt):**
    ```markdown
    # my-simple-server
    A basic Node.js Express web server.

    ## Getting Started
    1. Install dependencies: `npm install`
    2. Run the server: `npm start`
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Boilerplate Code Generation"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/boilerplate-code-generation.md"
type: "use_case_guide"
description: "Generates initial boilerplate code for a new project, module, or file based on specified language, framework, and common patterns."
triggers: ["boilerplate code", "generate project starter", "scaffold application", "new project setup", "starter code"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/database-schema-generation-sql-ddl.md
-----------------
# Use Case Definition: Database Schema Generation (SQL DDL)

**Objective:** To generate SQL Data Definition Language (DDL) statements for creating or modifying database schemas (tables, columns, relationships, indexes) based on a conceptual data model or user requirements.

## 1. Core Requirements & Quality Indicators

*   **Correct SQL Syntax:**
    *   Generated DDL statements are syntactically correct for the specified SQL dialect (e.g., PostgreSQL, MySQL, SQL Server, SQLite).
*   **Accurate Representation of Data Model:**
    *   The schema correctly implements the entities, attributes, data types, and relationships described by the user.
*   **Appropriate Data Type Selection:**
    *   Uses suitable SQL data types for each column based on the nature of the data (e.g., VARCHAR, INT, BOOLEAN, TIMESTAMP, TEXT).
*   **Primary & Foreign Key Definitions:**
    *   Correctly defines primary keys for tables.
    *   Accurately establishes foreign key relationships between tables to enforce referential integrity.
*   **Constraints:**
    *   Includes common constraints like NOT NULL, UNIQUE, CHECK constraints where appropriate or specified.
*   **Index Suggestions/Creation (Optional):**
    *   May suggest or include DDL for creating indexes on frequently queried columns or foreign keys to improve performance.
*   **Readability & Formatting of SQL:**
    *   Generated SQL is well-formatted and easy to read.
*   **Normalization (Conceptual):**
    *   Aims for a reasonably normalized schema design to reduce data redundancy and improve data integrity, based on the provided entities and relationships.

## 2. Key Stages & Processes Involved

1.  **Understand Data Requirements & Entities:**
    *   Identify the main entities (e.g., Users, Products, Orders).
    *   For each entity, list its attributes (fields/columns) and their characteristics (data type, optionality, uniqueness).
    *   Understand the relationships between entities (e.g., one-to-many, many-to-many).
2.  **Map Entities to Tables:**
    *   Each primary entity typically becomes a table.
    *   Many-to-many relationships often require a separate join/link table.
3.  **Define Columns for Each Table:**
    *   For each attribute, define a column with an appropriate SQL data type.
    *   Specify constraints (NOT NULL, UNIQUE, DEFAULT values).
4.  **Define Primary Keys:**
    *   Choose or create a primary key for each table (e.g., an auto-incrementing ID, a natural key).
5.  **Define Foreign Keys & Relationships:**
    *   Implement relationships between tables using foreign key constraints.
    *   Specify `ON DELETE` and `ON UPDATE` cascade actions if appropriate.
6.  **Consider Indexes:**
    *   Identify columns that will be frequently used in `WHERE` clauses, `JOIN` conditions, or `ORDER BY` clauses, and consider creating indexes on them. Foreign keys are often good candidates for indexes.
7.  **Generate SQL DDL Statements:**
    *   Write `CREATE TABLE` statements for each table.
    *   Write `ALTER TABLE` statements if modifying existing tables (less common for initial generation, more for migrations).
    *   Write `CREATE INDEX` statements.
8.  **Add Comments (Optional):**
    *   May include SQL comments to explain table or column purposes.
9.  **Order Statements Logically:**
    *   Ensure tables are created in an order that respects foreign key dependencies (i.e., create a referenced table before the table that references it).

## 3. Inputs Required from User/System

*   **Conceptual Data Model or List of Entities & Attributes:**
    *   Description of each entity (e.g., "Customer," "Order").
    *   For each entity, a list of attributes/fields with their intended data types (e.g., "Customer Name: string", "Order Date: date", "Quantity: integer").
*   **Relationships Between Entities:** (e.g., "A Customer can have many Orders," "A Product can be in many Orders, and an Order can have many Products").
*   **Specific SQL Dialect (Highly Recommended):** (e.g., PostgreSQL, MySQL, SQLite). If not specified, might generate generic SQL or default to a common one like PostgreSQL.
*   **Primary Key Preferences (Optional):** (e.g., "use auto-incrementing integer IDs for all primary keys").
*   **Specific Constraints or Indexes Required (Optional):**

## 4. Potential Challenges & Considerations

*   **Normalization Levels:** Deciding on the appropriate level of database normalization (e.g., 3NF, BCNF) can be complex and depends on trade-offs. AI will likely aim for a reasonable default.
*   **Handling Many-to-Many Relationships:** Requires creating join tables.
*   **Data Type Nuances:** Choosing the most optimal data type (e.g., `VARCHAR(255)` vs. `TEXT`, `INT` vs. `BIGINT`) can depend on specific database and data characteristics.
*   **Performance Implications of Schema Design:** Indexing strategy, normalization choices, and data types all affect query performance.
*   **Evolution/Migration:** This use case focuses on initial schema generation. Modifying existing schemas (migrations) is a more complex task.
*   **SQL Dialect Differences:** SQL syntax can vary significantly between database systems.

## 5. Metrics for Success (How to Evaluate Output)

*   **Syntactic Correctness:** Is the generated SQL valid for the specified dialect?
*   **Logical Correctness:** Does the schema accurately represent the user's data model and relationships?
*   **Data Integrity:** Does the schema include appropriate primary keys, foreign keys, and constraints to help maintain data integrity?
*   **Readability:** Is the SQL code well-formatted and easy to understand?
*   **Completeness:** Are all specified entities, attributes, and relationships accounted for?
*   **Efficiency (Conceptual):** Does the schema seem reasonably designed for typical query patterns (e.g., basic indexing on foreign keys)?
*   **Adherence to Best Practices:** Does it follow common database design principles (e.g., reasonable normalization)?

## 6. Example Output Structure/Format
**Scenario:** User wants SQL DDL for a simple blog with Users, Posts, and Comments.
*   **User Input:**
    *   Entities: Users (user_id PK, username, email), Posts (post_id PK, author_id FK to Users, title, content), Comments (comment_id PK, post_id FK to Posts, commenter_id FK to Users, comment_text).
    *   Relationships: User-Posts (one-to-many), Post-Comments (one-to-many), User-Comments (one-to-many).
    *   SQL Dialect: PostgreSQL

*   **Cline Generated SQL DDL:**
    ```sql
    -- Users Table
    CREATE TABLE Users (
        user_id SERIAL PRIMARY KEY,
        username VARCHAR(255) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL, -- Assuming password will be hashed
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Posts Table
    CREATE TABLE Posts (
        post_id SERIAL PRIMARY KEY,
        author_id INTEGER NOT NULL REFERENCES Users(user_id) ON DELETE CASCADE,
        title VARCHAR(255) NOT NULL,
        content TEXT,
        published_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Comments Table
    CREATE TABLE Comments (
        comment_id SERIAL PRIMARY KEY,
        post_id INTEGER NOT NULL REFERENCES Posts(post_id) ON DELETE CASCADE,
        commenter_id INTEGER NOT NULL REFERENCES Users(user_id) ON DELETE CASCADE,
        comment_text TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- Optional: Indexes for foreign keys and frequently queried columns
    CREATE INDEX idx_posts_author_id ON Posts(author_id);
    CREATE INDEX idx_comments_post_id ON Comments(post_id);
    CREATE INDEX idx_comments_commenter_id ON Comments(commenter_id);
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Database Schema Generation (SQL DDL)"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/database-schema-generation-sql-ddl.md"
type: "use_case_guide"
description: "Generates SQL DDL statements (CREATE TABLE, etc.) for a database schema based on a conceptual model."
triggers: ["generate sql schema", "database ddl", "create table sql", "sql schema generation", "database design to sql"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/code-snippet-generation.md
-----------------
# Use Case Definition: Code Snippet Generation

**Objective:** To generate a functional and well-written code snippet in a specified programming language to perform a specific task, implement an algorithm, or demonstrate the use of a particular function or library feature.

## 1. Core Requirements & Quality Indicators

*   **Functionality & Correctness:**
    *   The generated code snippet correctly implements the requested logic or algorithm.
    *   It is syntactically correct and should run without errors (given the appropriate environment and inputs).
*   **Clarity & Readability:**
    *   Code is well-formatted, easy to understand, and follows common style conventions for the language.
    *   Uses meaningful variable and function names.
*   **Efficiency (Context-Dependent):**
    *   Uses reasonably efficient algorithms and data structures for the task, without premature optimization for very small snippets.
*   **Conciseness:**
    *   Provides the necessary code to achieve the task without unnecessary boilerplate or unrelated logic.
*   **Completeness (for the snippet's scope):**
    *   Includes necessary imports or dependencies if they are standard and essential for the snippet to function (or notes them if they are project-specific).
    *   May include a brief example of how to call or use the generated function/snippet.
*   **Adherence to Language & Library Best Practices:**
    *   Uses idiomatic expressions and standard library features where appropriate.
*   **Comments (Optional but helpful for complex snippets):**
    *   May include brief comments to explain non-obvious parts of the logic.

## 2. Key Stages & Processes Involved

1.  **Understand Task & Requirements:**
    *   What specific function, algorithm, or task should the code snippet perform?
    *   What are the expected inputs and outputs?
    *   Are there any specific constraints or performance considerations?
2.  **Select Programming Language & Libraries:**
    *   Confirm the target language (e.g., Python, JavaScript, Java, C++).
    *   Identify any standard libraries or frameworks that should be used.
3.  **Design Algorithm/Logic:**
    *   Outline the steps required to achieve the desired functionality.
    *   Choose appropriate data structures and control flow.
4.  **Write the Code:**
    *   Implement the logic in the specified language.
    *   Focus on clarity, correctness, and adherence to best practices.
5.  **Add Necessary Imports/Setup (Conceptual):**
    *   Include or note any required import statements or minimal setup for the snippet to be testable.
6.  **Include Usage Example (Optional):**
    *   Provide a short example demonstrating how to call the function or use the snippet.
7.  **Add Comments (If needed):**
    *   Explain complex or non-obvious parts of the code.
8.  **Review & Test (Conceptual for AI):**
    *   Mentally "run" the code with sample inputs to check for logical errors.
    *   Verify syntax and adherence to requirements.

## 3. Inputs Required from User/System

*   **Specific Task or Algorithm to Implement:** (e.g., "generate a Python function to sort a list using quicksort," "a JavaScript snippet to make an API call with fetch").
*   **Programming Language:**
*   **Expected Inputs & Their Types:**
*   **Expected Output & Its Type:**
*   **Any Specific Libraries or Frameworks to Use/Avoid (Optional):**
*   **Constraints or Edge Cases to Consider (Optional):**
*   **Desired Level of Efficiency or Complexity (Optional):**

## 4. Potential Challenges & Considerations

*   **Ambiguity in Requirements:** User requests can sometimes be unclear or incomplete.
*   **Handling Edge Cases:** Ensuring the snippet is robust and handles potential edge cases correctly.
*   **Dependencies:** Managing external library dependencies if the snippet relies on them.
*   **Context:** A snippet generated in isolation might need adjustments to fit into a larger codebase.
*   **Security (if applicable):** Ensuring snippets don't introduce vulnerabilities (e.g., if handling user input or making external calls).
*   **Over-Optimization:** Writing overly complex code for a simple task.

## 5. Metrics for Success (How to Evaluate Output)

*   **Correctness:** Does the snippet produce the correct output for given inputs? Does it correctly implement the requested algorithm/logic?
*   **Functionality:** Does the code run without errors (assuming correct environment)?
*   **Readability:** Is the code easy to understand and follow?
*   **Efficiency:** Is the approach reasonably efficient for the problem?
*   **Conciseness:** Is it free of unnecessary code?
*   **Adherence to Language Conventions:** Does it follow idiomatic practices for the specified language?
*   **Helpfulness of Examples/Comments (if included):**
*   **Completeness (for its scope):** Does it include necessary setup like imports to be runnable or easily integrated?

## 6. Example Output Structure/Format
**Scenario:** User wants a Python snippet to read a CSV file into a list of dictionaries.
*   **User Input:**
    *   Task: Python function to read a CSV file into a list of dictionaries.
    *   Language: Python
    *   Inputs: `file_path` (string)
    *   Output: List of dictionaries, where each dictionary represents a row.
    *   Libraries: Use the `csv` module.

*   **Cline Generated Python Code Snippet:**
    ```python
    import csv

    def read_csv_to_list_of_dicts(file_path):
        """
        Reads a CSV file and returns its content as a list of dictionaries.
        Assumes the first row of the CSV is the header row.

        Args:
            file_path (str): The path to the CSV file.

        Returns:
            list: A list of dictionaries, where each dictionary represents a row
                  with column headers as keys. Returns an empty list if file
                  not found or in case of error.
        """
        data = []
        try:
            with open(file_path, mode='r', newline='', encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    data.append(dict(row)) # Convert OrderedDict to dict if necessary
        except FileNotFoundError:
            print(f"Error: File not found at {file_path}")
            return []
        except Exception as e:
            print(f"An error occurred: {e}")
            return []
        return data

    # Example Usage:
    # Assuming 'data.csv' exists with content like:
    # name,age,city
    # Alice,30,New York
    # Bob,24,Los Angeles
    #
    # file_data = read_csv_to_list_of_dicts('data.csv')
    # if file_data:
    #     for row in file_data:
    #         print(row)
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Code Snippet Generation"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/code-snippet-generation.md"
type: "use_case_guide"
description: "Generates a functional code snippet in a specified language to perform a specific task or demonstrate a feature."
triggers: ["code snippet", "generate function", "sample code", "programming example", "write code for"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/algorithm-implementation-from-pseudocode.md
-----------------
# Use Case Definition: Algorithm Implementation from Pseudocode/Description

**Objective:** To translate a given algorithm, described in pseudocode or natural language, into functional code in a specified programming language.

## 1. Core Requirements & Quality Indicators

*   **Correct Implementation of Logic:**
    *   The generated code accurately implements the steps and logic described in the pseudocode or natural language description.
*   **Functional Equivalence:**
    *   The code produces the same results or behavior as intended by the algorithm description for given inputs.
*   **Adherence to Language Conventions:**
    *   Uses idiomatic syntax, data structures, and control flow constructs of the target programming language.
*   **Clarity & Readability:**
    *   Generated code is well-formatted, uses meaningful variable names, and is easy to understand.
*   **Handling of Inputs & Outputs:**
    *   Correctly defines function/method signatures to accept specified inputs and return expected outputs.
*   **Efficiency (Consideration):**
    *   If the pseudocode implies certain data structures or approaches, the implementation should reflect that. Avoids grossly inefficient translations if obvious alternatives exist in the target language.
*   **Comments (Optional but helpful):**
    *   May include comments linking code sections back to specific steps in the pseudocode or explaining complex translations.

## 2. Key Stages & Processes Involved

1.  **Understand Algorithm Description/Pseudocode:**
    *   Thoroughly read and analyze the provided pseudocode or natural language description.
    *   Identify inputs, outputs, variables, control structures (loops, conditionals), and key operations.
2.  **Map Pseudocode Constructs to Target Language:**
    *   For each pseudocode element (e.g., `FOR EACH item IN list`, `IF condition THEN ...`), determine the equivalent construct in the target programming language.
    *   Choose appropriate data types and data structures in the target language.
3.  **Write Function/Method Signature:**
    *   Define the function or method that will encapsulate the algorithm, including parameters for inputs and a return type for the output.
4.  **Translate Logic Step-by-Step:**
    *   Implement each step of the algorithm in the target language, maintaining the logical flow.
5.  **Handle Variables & State:**
    *   Declare and manage variables as required by the algorithm.
6.  **Implement Control Flow:**
    *   Translate loops, conditional statements, and other control structures.
7.  **Return Output:**
    *   Ensure the function/method returns the correct result as specified by the algorithm.
8.  **Add Comments & Formatting:**
    *   Format the code for readability.
    *   Add comments to clarify complex parts or map code to pseudocode steps.
9.  **Review & Test (Conceptual for AI):**
    *   Mentally trace the execution of the generated code with sample inputs to verify it matches the pseudocode's logic.

## 3. Inputs Required from User/System

*   **Algorithm Description:**
    *   Pseudocode (preferred for clarity).
    *   Or, a clear, step-by-step natural language description of the algorithm.
*   **Target Programming Language:**
*   **Description of Expected Inputs:** (Names, data types).
*   **Description of Expected Output:** (Data type).
*   **Any Specific Libraries or Built-in Functions to Utilize or Avoid (Optional):**
*   **Context (Optional):** Where will this algorithm be used? This might influence choices about data structures or error handling.

## 4. Potential Challenges & Considerations

*   **Ambiguity in Pseudocode/Description:** Natural language or poorly written pseudocode can be open to misinterpretation.
*   **Mapping Abstract Concepts to Concrete Code:** Translating high-level algorithmic ideas into specific language constructs.
*   **Choosing Appropriate Data Structures:** Selecting the most suitable data structures in the target language for efficiency and clarity.
*   **Implicit Assumptions:** Pseudocode might rely on assumptions that need to be made explicit in the code (e.g., error handling, input validation).
*   **Language-Specific Optimizations/Idioms:** Knowing when to use language-specific features that might be more efficient or readable than a direct pseudocode translation.
*   **Complexity of Algorithm:** Highly complex algorithms are more challenging to translate correctly.

## 5. Metrics for Success (How to Evaluate Output)

*   **Logical Equivalence:** Does the generated code faithfully implement the logic of the provided algorithm description/pseudocode?
*   **Correctness:** Does it produce the correct output for a range of valid inputs (conceptually)?
*   **Syntactic Validity:** Is the code free of syntax errors in the target language?
*   **Readability & Clarity:** Is the code easy to understand?
*   **Adherence to Language Idioms:** Does it use the target language effectively and conventionally?
*   **Completeness:** Does it handle the specified inputs and produce the specified outputs?
*   **Efficiency (Relative to Algorithm):** Is the translation reasonably efficient, not introducing unnecessary overhead?

## 6. Example Output Structure/Format
**Scenario:** User provides pseudocode for a simple linear search and wants it in Python.
*   **User Input:**
    *   Algorithm Description (Pseudocode):
        ```
        FUNCTION LinearSearch(list, target_value)
          FOR EACH item IN list
            IF item EQUALS target_value THEN
              RETURN TRUE
            END IF
          END FOR
          RETURN FALSE
        END FUNCTION
        ```
    *   Target Language: Python
    *   Inputs: `list` (a list of numbers), `target_value` (a number)
    *   Output: Boolean (True if found, False otherwise)

*   **Cline Generated Python Code:**
    ```python
    def linear_search(data_list, target_value):
        """
        Performs a linear search for a target value in a list.

        Args:
            data_list: The list of items to search through.
            target_value: The value to search for.

        Returns:
            True if the target_value is found in the list, False otherwise.
        """
        for item in data_list:  # Corresponds to "FOR EACH item IN list"
            if item == target_value:  # Corresponds to "IF item EQUALS target_value THEN"
                return True  # Corresponds to "RETURN TRUE"
        return False  # Corresponds to "RETURN FALSE"

    # Example usage (optional, for demonstration)
    # my_list = [1, 5, 8, 12, 3, 7]
    # print(f"Is 12 in the list? {linear_search(my_list, 12)}")
    # print(f"Is 4 in the list? {linear_search(my_list, 4)}")
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Algorithm Implementation from Pseudocode/Description"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/algorithm-implementation-from-pseudocode.md"
type: "use_case_guide"
description: "Translates a given algorithm, described in pseudocode or natural language, into functional code in a specified programming language."
triggers: ["implement algorithm", "pseudocode to code", "translate algorithm", "code from description", "algorithm to python", "algorithm to javascript"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/configuration-file-generation.md
-----------------
# Use Case Definition: Configuration File Generation

**Objective:** To generate content for various types of configuration files used in software development, such as Dockerfiles, .gitignore files, CI/CD pipeline definitions (e.g., GitHub Actions workflows, Jenkinsfiles), linter configurations (e.g., .eslintrc, .prettierrc), and project-specific settings files.

## 1. Core Requirements & Quality Indicators

*   **Correct Syntax for Target Format:**
    *   Generated content adheres to the specific syntax and structure of the target configuration file type (e.g., YAML for GitHub Actions, Dockerfile instructions, JSON for .eslintrc).
*   **Functional Configuration:**
    *   The generated configuration is valid and achieves the user's intended setup or behavior.
*   **Inclusion of Common/Best-Practice Settings:**
    *   Includes widely accepted default settings or best practices for the given tool or purpose (e.g., common Node.js patterns for .gitignore, basic stages for a CI pipeline).
*   **Customization Based on User Input:**
    *   Tailors the configuration based on specific user requirements (e.g., specific base image for Dockerfile, particular linters to enable, custom build steps for CI).
*   **Readability & Comments:**
    *   Configuration is well-formatted and includes comments to explain non-obvious settings or sections.
*   **Security Considerations (if applicable):**
    *   Avoids hardcoding secrets. Suggests using environment variables or secrets management systems.
    *   For CI/CD, promotes secure practices (e.g., limiting permissions).
*   **Completeness (for a basic setup):**
    *   Provides a functional starting point that the user can then refine.

## 2. Key Stages & Processes Involved

1.  **Identify Configuration File Type & Purpose:**
    *   What type of configuration file is needed (e.g., Dockerfile, .gitignore, .travis.yml, package.json scripts section)?
    *   What is its main goal (e.g., containerize an app, define build steps, ignore files from version control)?
2.  **Gather Requirements & Context:**
    *   Understand the project's technology stack (language, framework).
    *   Identify any specific tools, versions, or settings the user wants to include or customize.
3.  **Select Base Template or Common Patterns:**
    *   Start from a common template or set of patterns for that configuration type and technology stack.
4.  **Generate Configuration Content:**
    *   Write the configuration directives, instructions, or key-value pairs according to the file format's syntax.
    *   Incorporate user-specified customizations.
    *   Add comments for clarity.
5.  **Organize Sections Logically:**
    *   Group related settings or steps.
6.  **Review for Syntax & Logic:**
    *   Check for common syntax errors or logical issues in the configuration.
    *   Ensure it aligns with the intended purpose.

## 3. Inputs Required from User/System

*   **Type of Configuration File Needed:** (e.g., "Dockerfile," ".gitignore," "GitHub Actions workflow for Node.js build and test").
*   **Project Technology Stack:** (Programming language, framework, key libraries, package manager).
*   **Specific Requirements or Customizations:**
    *   For Dockerfile: Base image, ports to expose, dependencies to install, entrypoint command.
    *   For .gitignore: File types or directories to ignore, specific tools being used (e.g., Node, Python, IDE-specific files).
    *   For CI/CD: Build commands, test commands, deployment steps, target branches/events.
    *   For Linters: Specific rules to enable/disable, style preferences.
*   **Project Structure (if relevant for paths):**
*   **Any Existing Partial Configuration to Build Upon (Optional):**

## 4. Potential Challenges & Considerations

*   **Syntax Variations & Complexity:** Configuration file formats can be complex and vary widely (YAML, JSON, INI, custom DSLs like Dockerfile).
*   **Tool-Specific Knowledge:** Generating effective configurations requires understanding the specific tool (Docker, Git, ESLint, GitHub Actions, etc.).
*   **Environment Dependencies:** Configurations often depend on the environment in which they are used.
*   **Keeping Up with Tool Updates:** Configuration best practices and syntax can change as tools evolve.
*   **Security of CI/CD Pipelines:** Ensuring pipelines don't expose secrets or create vulnerabilities.
*   **Debugging Configurations:** Incorrect configurations can be hard to troubleshoot.

## 5. Metrics for Success (How to Evaluate Output)

*   **Syntactic Validity:** Is the generated configuration file correctly formatted for its type?
*   **Functional Correctness (Conceptual):** Would this configuration likely achieve the intended purpose when used with the relevant tool/system?
*   **Completeness:** Does it include essential settings for a basic, functional setup?
*   **Adherence to Best Practices:** Does it follow common conventions and security considerations for that configuration type?
*   **Readability & Maintainability:** Is the configuration easy to understand and modify?
*   **Customization:** Are user-specific requirements correctly incorporated?
*   **Usefulness as a Starting Point:** Does it provide a solid foundation that a developer can build upon?

## 6. Example Output Structure/Format
**Scenario:** User wants a basic `.gitignore` file for a Node.js project.
*   **User Input:**
    *   Type: `.gitignore`
    *   Project Technology: Node.js
    *   Additional Ignores: `.env` files, `dist/` folder.

*   **Cline Generated `.gitignore` Content:**
    ```
    # Node.js
    node_modules/
    npm-debug.log*
    yarn-debug.log*
    yarn-error.log*
    package-lock.json # Optional, depending on team preference
    # yarn.lock # Optional, depending on team preference

    # IDEs and Editors
    .idea/
    .vscode/
    *.swp
    *.swo

    # Operating System files
    .DS_Store
    Thumbs.db

    # Environment variables
    .env
    .env.*
    !.env.example

    # Build output
    dist/
    build/

    # Logs
    logs/
    *.log
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Configuration File Generation"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/configuration-file-generation.md"
type: "use_case_guide"
description: "Generates content for various software configuration files (e.g., Dockerfile, .gitignore, CI/CD pipelines, linters)."
triggers: ["generate config file", "create dockerfile", "setup gitignore", "github actions workflow", "eslint config", "prettier config"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/code-generation-software-development/api-endpoint-implementation.md
-----------------
# Use Case Definition: API Endpoint Implementation

**Objective:** To generate server-side code for implementing a specific API endpoint (e.g., for a RESTful or GraphQL API), including request handling, business logic, data access (conceptually), and response generation.

## 1. Core Requirements & Quality Indicators

*   **Correct Routing & Method Handling:**
    *   Code correctly maps to the specified URL path and HTTP method (GET, POST, PUT, DELETE, etc. for REST) or GraphQL query/mutation.
*   **Request Data Parsing & Validation:**
    *   Properly extracts and validates data from request parameters (path, query), request body, and headers.
    *   Handles missing or invalid data gracefully.
*   **Business Logic Implementation:**
    *   Accurately implements the core logic associated with the endpoint's purpose.
*   **Data Access/Manipulation (Conceptual):**
    *   Includes placeholders or clear indications of where database interactions or calls to other services would occur. (AI doesn't directly interact with live databases).
*   **Response Generation:**
    *   Constructs and returns responses in the correct format (e.g., JSON, XML) with appropriate HTTP status codes.
    *   Handles success and error responses correctly.
*   **Error Handling:**
    *   Includes robust error handling for common issues (e.g., invalid input, resource not found, server errors).
*   **Security Considerations (Basic):**
    *   Suggests or implements basic security practices like input sanitization (conceptual), and notes where authentication/authorization checks should occur.
*   **Adherence to Framework/Language Conventions:**
    *   Code follows the idiomatic style and best practices of the specified server-side language and framework (e.g., Node.js/Express, Python/Flask/Django, Java/Spring, Ruby/Rails).
*   **Readability & Maintainability:**
    *   Generated code is well-structured, commented where necessary, and easy to understand.

## 2. Key Stages & Processes Involved

1.  **Understand Endpoint Requirements:**
    *   What is the purpose of this endpoint?
    *   What is its URL path and HTTP method (for REST)? Or its GraphQL schema definition?
    *   What are the expected request parameters, headers, and body?
    *   What are the expected success and error responses (format, status codes)?
    *   What business logic needs to be performed?
2.  **Select Language, Framework, and Key Libraries:**
3.  **Set Up Route Handler/Resolver:**
    *   Write the basic function or class method that will handle requests to this endpoint.
4.  **Implement Request Parsing & Validation:**
    *   Add code to extract data from the request (path params, query params, body, headers).
    *   Validate the data (e.g., check for required fields, correct data types, value ranges). Return appropriate error responses for invalid data.
5.  **Implement Core Business Logic:**
    *   Write the code that performs the main task of the endpoint.
    *   This may involve calculations, data transformations, or orchestrating calls to other services or data layers.
6.  **Integrate Data Access (Conceptual):**
    *   Add comments or placeholder functions indicating where database reads/writes or other service calls would occur (e.g., `// TODO: Fetch user from database by ID`, `data = await userService.getUser(userId)`).
7.  **Construct & Return Responses:**
    *   Based on the outcome of the business logic, create the appropriate success or error response.
    *   Set the correct HTTP status code and response body (e.g., JSON).
8.  **Implement Error Handling:**
    *   Wrap logic in try-catch blocks or use framework-specific error handling mechanisms to manage exceptions and return meaningful error responses.
9.  **Add Security Notes/Placeholders:**
    *   Comment where authentication and authorization checks should be performed.
10. **Review & Refine Code:**
    *   Check for correctness, clarity, security considerations, and adherence to conventions.

## 3. Inputs Required from User/System

*   **Endpoint Definition:**
    *   **For REST:** URL path (e.g., `/users/{id}`), HTTP method (e.g., GET, POST).
    *   **For GraphQL:** Type definition (e.g., `type User { id: ID!, name: String }`), query/mutation definition (e.g., `user(id: ID!): User`).
*   **Request Details:**
    *   Expected path parameters, query parameters, request headers.
    *   Schema for the request body (if any), including field names and data types.
*   **Response Details:**
    *   Schema for success response body, including HTTP status code.
    *   Schemas for potential error responses, including HTTP status codes.
*   **Description of Business Logic:** What the endpoint should do.
*   **Programming Language & Server-Side Framework:** (e.g., Node.js with Express, Python with Flask).
*   **Database Interaction Points (Conceptual):** What kind of data operations are expected (e.g., "fetch user by ID," "create new product record").
*   **Authentication/Authorization Requirements (Conceptual):** (e.g., "requires admin role," "user can only access their own data").

## 4. Potential Challenges & Considerations

*   **Complexity of Business Logic:** Implementing highly complex logic accurately.
*   **Database/Service Integration:** AI can only generate placeholders for these; actual integration is a developer task.
*   **Security:** Ensuring robust security (authentication, authorization, input validation, protection against common vulnerabilities like injection attacks) requires careful design beyond basic AI generation.
*   **Scalability & Performance:** Designing endpoints that perform well under load.
*   **Idempotency (for PUT/DELETE etc.):** Ensuring operations have the correct semantics.
*   **Transaction Management (if multiple data operations):**

## 5. Metrics for Success (How to Evaluate Output)

*   **Correctness of Routing & Request Handling:** Does the code correctly map to the path/method and parse request data?
*   **Implementation of Business Logic:** Does the generated code accurately reflect the described logic?
*   **Appropriate Response Generation:** Are success and error responses handled correctly with proper status codes and formats?
*   **Error Handling Robustness:** Does it include basic error handling?
*   **Code Quality & Readability:** Is the code well-structured and understandable?
*   **Adherence to Framework Conventions:**
*   **Security Awareness:** Are there notes or placeholders for essential security checks like authentication/authorization?
*   **Completeness (for the endpoint's scope):** Does it provide a solid starting point for a developer to complete the endpoint, including data integration?

## 6. Example Output Structure/Format
**Scenario:** User wants to implement a `POST /users` endpoint in Node.js with Express.
*   **User Input:**
    *   Endpoint: `POST /users`
    *   Request Body Schema: `{ "username": "string", "email": "string", "password": "string" }`
    *   Success Response: `201 Created` with `{ "user_id", "username", "email", "created_at" }`
    *   Business Logic: Create a new user record. Hash password before saving.
    *   Language/Framework: Node.js with Express
    *   Database Interaction: Conceptually save user to a database.

*   **Cline Generated Node.js/Express Code Snippet:**
    ```javascript
    const express = require('express');
    const router = express.Router();
    // Assume bcrypt for password hashing and some form of DB utility (e.g., db.js)
    // const bcrypt = require('bcryptjs');
    // const db = require('../db'); // Conceptual database utility

    router.post('/users', async (req, res) => {
        const { username, email, password } = req.body;

        // 1. Validate input
        if (!username || !email || !password) {
            return res.status(400).json({ error: 'Username, email, and password are required.' });
        }

        // TODO: Add more robust validation (e.g., email format, password strength)

        try {
            // 2. Check if user already exists (Conceptual DB call)
            // const existingUser = await db.query('SELECT * FROM users WHERE email = $1', [email]);
            // if (existingUser.rows.length > 0) {
            //     return res.status(409).json({ error: 'User with this email already exists.' });
            // }

            // 3. Hash password
            // const salt = await bcrypt.genSalt(10);
            // const hashedPassword = await bcrypt.hash(password, salt);

            // 4. Save user to database (Conceptual DB call)
            // const newUser = await db.query(
            //     'INSERT INTO users (username, email, password_hash) VALUES ($1, $2, $3) RETURNING user_id, username, email, created_at',
            //     [username, email, hashedPassword]
            // );

            // Placeholder for successful creation
            const createdUser = {
                user_id: Date.now(), // Placeholder ID
                username: username,
                email: email,
                created_at: new Date().toISOString()
            };

            // 5. Return success response
            res.status(201).json(createdUser);

        } catch (err) {
            console.error('Error creating user:', err.message);
            res.status(500).json({ error: 'Failed to create user.' });
        }
    });

    module.exports = router;
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "API Endpoint Implementation"
path: "prompts/use_cases/content-creation-and-management/code-generation-software-development/api-endpoint-implementation.md"
type: "use_case_guide"
description: "Generates server-side code for a specific API endpoint, including request handling, business logic, and response generation."
triggers: ["implement api endpoint", "create api route", "backend endpoint code", "rest endpoint", "graphql resolver code"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/legal-business-document-drafting/meeting-minutes-summaries.md
-----------------
# Use Case Definition: Meeting Minutes & Summaries

**Objective:** To accurately record the key discussions, decisions, action items, and attendees of a meeting, or to create a concise summary of a longer meeting recording or transcript.

## 1. Core Requirements & Quality Indicators

*   **Accuracy:**
    *   Faithfully captures what was discussed and decided.
    *   Correctly attributes statements or action items to the right individuals.
*   **Completeness (for Minutes):**
    *   Includes all essential information: date, time, attendees, apologies for absence, topics discussed, key points made, decisions reached, action items (with assigned person and due date), and next meeting date (if set).
*   **Conciseness (for Summaries):**
    *   Distills the most important information from a longer meeting into a brief, digestible format.
*   **Clarity & Objectivity:**
    *   Written in clear, professional language.
    *   Maintains an objective tone, reporting facts rather than personal interpretations (unless a summary of opinions is requested).
*   **Action-Oriented (for Action Items):**
    *   Action items are clearly stated, assigned to a specific person/team, and have a due date.
*   **Timeliness:**
    *   Minutes/summaries are ideally produced and distributed shortly after the meeting.
*   **Standardized Format:**
    *   Often follows a consistent template for easy reading and archiving.

## 2. Key Stages & Processes Involved

1.  **Pre-Meeting Preparation (if taking live minutes):**
    *   Obtain meeting agenda.
    *   Prepare a template with fields for attendees, date, time, etc.
2.  **Information Gathering (During or After Meeting):**
    *   **Live Minutes:** Actively listen and take notes on key discussion points, decisions, and action items.
    *   **From Recording/Transcript:** Review the recording/transcript to extract essential information.
3.  **Identify Key Information:**
    *   **Attendees & Absentees:**
    *   **Main Topics Discussed (per agenda item):**
    *   **Key Arguments/Points Raised:**
    *   **Decisions Made:** Clearly state what was decided.
    *   **Action Items:** What needs to be done, who is responsible, and by when?
    *   **Voting Outcomes (if applicable):**
    *   **Next Steps/Future Agenda Items:**
4.  **Draft the Minutes/Summary:**
    *   Organize information logically, often following the agenda structure.
    *   Use clear and concise language.
    *   Maintain an objective tone.
    *   For summaries, focus on the most critical outcomes and action items.
5.  **Format the Document:**
    *   Use headings, bullet points, and tables (e.g., for action items) to improve readability.
    *   Include meeting details (date, time, location/platform, title).
6.  **Review & Verify:**
    *   Check for accuracy against notes or recording.
    *   Ensure all key decisions and action items are captured correctly.
    *   Proofread for grammar and spelling errors.
7.  **Distribute & Archive (Conceptual for AI):**
    *   In a real-world scenario, minutes are distributed to attendees for review/approval and then archived.

## 3. Inputs Required from User/System

*   **Meeting Agenda (Highly Recommended):**
*   **List of Attendees (and apologies for absence):**
*   **Date, Time, and Location/Platform of the Meeting:**
*   **Meeting Recording or Detailed Notes/Transcript (Essential if AI is generating after the fact):**
*   **Purpose/Title of the Meeting:**
*   **Any Specific Decisions or Action Items Known Beforehand:**
*   **Desired Format: Full Minutes or Concise Summary?**
*   **Template for Minutes (if company uses one):**

## 4. Potential Challenges & Considerations

*   **Capturing Nuance:** Minutes may not always capture the full nuance of a discussion.
*   **Attribution Accuracy:** Ensuring statements and action items are correctly assigned.
*   **Objectivity:** Avoiding personal bias in recording discussions.
*   **Information Overload:** Deciding what is important enough to include, especially in long or complex meetings.
*   **Deciphering Recordings:** Poor audio quality or unclear speakers can make transcription/summarization difficult.
*   **Timeliness of Distribution:** Delays can reduce the usefulness of minutes.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy:** Do the minutes/summary correctly reflect what happened in the meeting?
*   **Completeness:** Are all key decisions, discussions, and action items included?
*   **Clarity:** Is the document easy to understand?
*   **Conciseness (especially for summaries):** Is it to the point?
*   **Actionability:** Are action items clear, assigned, and dated?
*   **Objectivity:** Is the tone neutral and factual?
*   **Usefulness as a Record:** Does it serve as a reliable record of the meeting?
*   **Timeliness (if AI is assisting live or shortly after):**

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/legal-business-document-drafting/business-proposal-outline-content-ideas.md
-----------------
# Use Case Definition: Business Proposal Outline & Content Ideas

**Objective:** To generate a structured outline and brainstorm content ideas for a business proposal, aimed at persuading a potential client or stakeholder to accept a proposed project, service, or course of action.

## 1. Core Requirements & Quality Indicators

*   **Clear Understanding of Client/Stakeholder Needs:**
    *   The proposal directly addresses the recipient's known or anticipated problems, needs, or goals.
*   **Compelling Value Proposition:**
    *   Clearly articulates the unique benefits and value of the proposed solution.
    *   Answers "Why choose us/this?"
*   **Logical Structure & Flow:**
    *   Organized in a persuasive manner (e.g., Problem -> Proposed Solution -> Benefits -> Methodology -> Pricing -> Call to Action).
*   **Professional Tone & Language:**
    *   Uses clear, concise, and professional business language.
*   **Credibility & Trust-Building Elements:**
    *   Suggests inclusion of elements like case studies, testimonials, team qualifications, or relevant experience.
*   **Well-Defined Scope & Deliverables:**
    *   Clearly outlines what will be delivered if the proposal is accepted.
*   **Clear Call to Action:**
    *   Specifies the next steps the recipient should take.
*   **Customization:**
    *   Tailored to the specific client/stakeholder and opportunity, not a generic template.

## 2. Key Stages & Processes Involved

1.  **Understand Client Needs & Proposal Objective:**
    *   What problem is the client trying to solve? What are their goals?
    *   What is the specific purpose of this proposal? (e.g., win a new project, secure funding, propose a partnership).
2.  **Research Client/Stakeholder (if applicable):**
    *   Gather information about their business, industry, challenges, and past projects.
3.  **Develop Core Solution & Value Proposition:**
    *   How will your product/service/idea address their needs effectively?
    *   What are the key benefits and differentiators?
4.  **Outline Proposal Structure:**
    *   A common structure includes:
        *   **Cover Letter/Executive Summary:** Briefly introduce yourself, the purpose, and key benefits.
        *   **Understanding of Client's Needs/Problem Statement:** Show you understand their situation.
        *   **Proposed Solution:** Detail your approach, methodology, and what you will deliver.
        *   **Benefits & Value Proposition:** Explain how your solution meets their needs and provides value.
        *   **Scope of Work & Deliverables:** Clearly list what's included.
        *   **Timeline/Project Plan:**
        *   **Pricing/Investment:**
        *   **About Us/Qualifications/Team:** Build credibility.
        *   **Case Studies/Testimonials (Optional):**
        *   **Call to Action/Next Steps:**
5.  **Brainstorm Content for Each Section:**
    *   Generate key talking points, data, examples, and persuasive arguments for each part of the outline.
6.  **Suggest Supporting Evidence:**
    *   Identify where data, charts, case study snippets, or testimonials would strengthen the proposal.
7.  **Craft a Compelling Call to Action:**
    *   Make it clear what you want the recipient to do next (e.g., "Schedule a meeting," "Sign the agreement," "Approve the budget").
8.  **Consider Tone & Language:**
    *   Ensure it's professional, confident, and client-focused.
9.  **Review & Refine Outline and Content Ideas:**
    *   Check for clarity, persuasiveness, completeness, and logical flow.

## 3. Inputs Required from User/System

*   **Purpose of the Proposal:**
*   **Target Recipient (Client/Stakeholder Profile):** Their business, needs, pain points.
*   **Product/Service/Project Being Proposed:** Detailed description.
*   **Key Benefits & Unique Selling Propositions (USPs):**
*   **Desired Scope of Work (if known):**
*   **Pricing Model or Budget Ideas (if any):**
*   **Information About Proposer's Company/Team:** Qualifications, experience.
*   **Any Existing Case Studies or Testimonials:**
*   **Specific Requirements or Format for the Proposal (if any):**
*   **Deadline for Submission (if applicable):**

## 4. Potential Challenges & Considerations

*   **Understanding True Client Needs:** Proposals based on incorrect assumptions are unlikely to succeed.
*   **Differentiation:** Clearly showing why your proposal is better than alternatives.
*   **Pricing Strategy:** Presenting pricing in a way that demonstrates value.
*   **Balancing Detail with Conciseness:** Providing enough information without overwhelming the reader.
*   **Persuasive Writing:** Crafting compelling arguments.
*   **Customization Effort:** Tailoring each proposal effectively can be time-consuming.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Value Proposition:** Is the benefit to the client immediately obvious?
*   **Addressing Client Needs:** Does the proposed solution directly solve the client's stated or implied problems?
*   **Persuasiveness of Content Ideas:** Are the suggested arguments and points likely to convince the recipient?
*   **Logical Structure:** Is the outline well-organized and easy to follow?
*   **Completeness of Outline:** Does it cover all essential sections of a strong proposal?
*   **Actionability of CTA:** Is the call to action clear and compelling?
*   **Professionalism of Tone & Language Suggestions:**
*   **Potential for Conversion (Conceptual):** Does the outlined proposal seem likely to achieve its objective?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/legal-business-document-drafting/contract-clause-generation-informational.md
-----------------
# Use Case Definition: Contract Clause Generation (Informational Only)

**Objective:** To generate sample contract clauses for common legal or business situations, based on user-provided parameters. **Crucially, this is for informational and illustrative purposes ONLY and does NOT constitute legal advice. Users MUST consult with a qualified legal professional before using or relying on any generated clauses.**

## 1. Core Requirements & Quality Indicators

*   **Relevance to Request:**
    *   The generated clause addresses the specific situation or type of agreement described by the user.
*   **Clarity & Precision of Language:**
    *   Uses clear, unambiguous legal or business terminology appropriate for the clause type.
*   **Commonly Accepted Phrasing (General):**
    *   Reflects typical language and structure found in standard agreements for the described purpose, without claiming to be jurisdictionally perfect or universally applicable.
*   **Identification of Key Elements:**
    *   Includes essential components typically found in such a clause (e.g., for a confidentiality clause: definition of confidential information, obligations of recipient, duration, exclusions).
*   **Neutrality (Usually):**
    *   Often aims for balanced or standard phrasing, unless a specific bias (e.g., "pro-seller" or "pro-buyer") is requested for illustrative purposes.
*   **Prominent Disclaimer:**
    *   **AI-generated output MUST always be accompanied by a clear and prominent disclaimer stating that the content is for informational purposes only, is not legal advice, and that a qualified attorney should be consulted.**

## 2. Key Stages & Processes Involved

1.  **Understand User's Need for a Clause:**
    *   What type of agreement is it for? (e.g., NDA, Service Agreement, Lease).
    *   What specific issue or provision does the user want the clause to address? (e.g., confidentiality, payment terms, termination, limitation of liability).
2.  **Identify Standard Components of Such a Clause:**
    *   Based on general knowledge of contract types, determine the typical elements and considerations for the requested clause.
3.  **Draft Sample Clause Language:**
    *   Generate text that incorporates these standard components.
    *   Use placeholders (e.g., `[Party A]`, `[Effective Date]`, `[Governing Law Jurisdiction]`) for specific details that would need to be filled in.
4.  **Include Optional/Alternative Phrasing (If appropriate):**
    *   May suggest common variations or points of negotiation for certain clauses.
5.  **Add Explanatory Notes (Optional but helpful):**
    *   Briefly explain the purpose or common implications of certain parts of the clause.
6.  **CRITICAL: Attach Disclaimer:**
    *   Ensure the output prominently features a disclaimer that it is not legal advice and professional legal counsel is required.

## 3. Inputs Required from User/System

*   **Type of Agreement:** (e.g., Non-Disclosure Agreement, Service Contract, Employment Agreement).
*   **Specific Purpose of the Clause:** (e.g., "a clause about intellectual property ownership," "a clause for late payment penalties").
*   **Key Terms or Conditions to be Included:** (e.g., "confidentiality period of 5 years," "interest rate of 1.5% per month on overdue invoices").
*   **Relationship Between Parties (Optional):** (e.g., buyer/seller, employer/employee, service provider/client).
*   **Jurisdictional Considerations (User should be aware AI cannot give jurisdiction-specific advice):** User might mention a jurisdiction, but AI response must still be general and disclaimed.

## 4. Potential Challenges & Considerations

*   **RISK OF BEING MISINTERPRETED AS LEGAL ADVICE (MITIGATED BY DISCLAIMER):** This is the primary challenge. AI cannot provide legal advice.
*   **Jurisdictional Differences:** Contract law varies significantly between jurisdictions. AI-generated clauses are general and not tailored to specific legal requirements of any location.
*   **Complexity of Legal Language:** Drafting truly effective and enforceable legal clauses requires deep legal expertise.
*   **Specificity of Situation:** Generic clauses may not adequately cover the unique aspects of a user's specific situation.
*   **Changing Laws:** Legal standards and interpretations evolve.

## 5. Metrics for Success (How to Evaluate Output)

*   **Presence & Prominence of Disclaimer:** Is the "not legal advice" disclaimer clear and unavoidable?
*   **Relevance to Request:** Does the sample clause address the user's stated need conceptually?
*   **Inclusion of Typical Elements:** Does it contain components commonly found in such a clause?
*   **Clarity of Sample Language:** Is the generated text understandable (as a sample)?
*   **Use of Placeholders:** Are specific, variable details appropriately indicated with placeholders?
*   **Educational Value (as an illustration):** Does it help the user understand what such a clause *might* look like or what points it *might* cover, before they consult a lawyer?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/legal-business-document-drafting/policy-procedure-document-drafting.md
-----------------
# Use Case Definition: Policy & Procedure Document Drafting

**Objective:** To draft clear, comprehensive, and actionable policy and procedure documents that outline organizational rules, guidelines, and step-by-step instructions for specific operations or behaviors.

## 1. Core Requirements & Quality Indicators

*   **Clarity & Unambiguity:**
    *   Policies are stated clearly and are easy to understand.
    *   Procedures provide precise, step-by-step instructions.
    *   Avoids jargon or defines terms clearly.
*   **Comprehensiveness:**
    *   Covers all necessary aspects of the policy or procedure.
    *   Includes scope, purpose, responsibilities, and relevant definitions.
*   **Accuracy & Authority:**
    *   Reflects current organizational rules, legal requirements (conceptually, AI cannot give legal advice), and best practices.
*   **Actionability (for Procedures):**
    *   Steps are actionable and can be followed consistently by relevant personnel.
*   **Consistency:**
    *   Aligns with overall organizational culture, values, and other existing policies.
    *   Uses consistent terminology and formatting.
*   **Enforceability (Conceptual for Policies):**
    *   Policies are written in a way that suggests they can be practically implemented and monitored.
*   **Accessibility & Readability:**
    *   Well-structured with clear headings, sections, and formatting for easy reference.

## 2. Key Stages & Processes Involved

1.  **Define Purpose, Scope, and Audience:**
    *   Why is this policy/procedure needed? What issue or area does it address?
    *   Who does it apply to within the organization?
2.  **Gather Information & Requirements:**
    *   Consult relevant stakeholders, subject matter experts, legal counsel (user's responsibility), and existing documentation.
    *   Identify any legal, regulatory, or industry standards that must be met.
3.  **Outline the Document Structure:**
    *   **Policy Documents Typically Include:**
        *   Policy Title
        *   Policy Number/Version/Effective Date
        *   Purpose Statement
        *   Scope (To whom and what it applies)
        *   Policy Statement(s) (The actual rules/guidelines)
        *   Definitions of Key Terms
        *   Responsibilities (Who is responsible for what)
        *   Consequences of Non-Compliance (if applicable)
        *   Related Policies/References
    *   **Procedure Documents Typically Include:**
        *   Procedure Title
        *   Purpose/Objective
        *   Scope
        *   Responsibilities
        *   Materials/Equipment Needed
        *   Step-by-Step Instructions
        *   Safety Precautions (if applicable)
        *   Contingencies/Troubleshooting (if applicable)
4.  **Draft Policy Statements:**
    *   Write clear, concise statements outlining the organization's rules or stance on the specific issue.
5.  **Draft Procedural Steps:**
    *   Break down the process into a logical sequence of actionable steps.
    *   Use imperative verbs and provide sufficient detail for each step.
6.  **Define Responsibilities & Roles:**
    *   Clearly assign responsibilities for implementing, adhering to, and enforcing the policy/procedure.
7.  **Incorporate Compliance & Safety Information:**
    *   Include any necessary legal disclaimers, safety warnings, or compliance requirements.
8.  **Review & Refine:**
    *   Check for clarity, accuracy, completeness, and internal consistency.
    *   Ensure language is unambiguous.
    *   (Ideally) Have it reviewed by legal counsel (user's responsibility) and relevant stakeholders.
9.  **Format for Readability & Accessibility:**
    *   Use clear headings, numbering, bullet points, and consistent formatting.

## 3. Inputs Required from User/System

*   **Subject/Topic of the Policy or Procedure:**
*   **Purpose & Objective:** Why is it needed? What should it achieve?
*   **Target Audience/Affected Personnel:**
*   **Key Rules, Guidelines, or Steps to be Included:**
*   **Relevant Legal, Regulatory, or Industry Standards (User to provide if specific legal compliance is needed):**
*   **Organizational Culture & Values (to ensure alignment):**
*   **Existing Related Policies or Procedures (if any):**
*   **Specific Format or Template to Use (if any):**
*   **Consequences for Non-Compliance (for policies, if applicable):**

## 4. Potential Challenges & Considerations

*   **Legal & Regulatory Compliance:** Ensuring documents meet all applicable legal requirements (AI cannot guarantee this; user needs legal review).
*   **Clarity vs. Comprehensiveness:** Balancing the need for detail with ease of understanding.
*   **Enforceability:** Writing policies that can be practically enforced.
*   **Keeping Documents Up-to-Date:** Policies and procedures need regular review and revision.
*   **User Buy-in & Understanding:** Documents are only effective if understood and followed.
*   **Avoiding Overly Prescriptive Language:** Allowing for professional judgment where appropriate, while still providing clear guidance.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Unambiguity:** Is the document easy to understand and interpret correctly?
*   **Completeness:** Does it cover all necessary aspects of the policy/procedure for its intended scope?
*   **Actionability (for procedures):** Can personnel follow the steps to achieve the desired outcome consistently?
*   **Consistency:** Does it align with organizational standards and other related documents?
*   **Perceived Authority & Professionalism:** Does it read like a formal organizational document?
*   **Usefulness as a Guide:** Does it effectively guide behavior or task execution?
*   **Inclusion of Disclaimer (if AI-generated for legal-like topics):** If touching on legal areas, does it include a disclaimer that it's not legal advice?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/mind-map-generation-text-based-outline.md
-----------------
# Use Case Definition: Mind Map Generation (Text-Based Outline)

**Objective:** To generate a hierarchical, text-based outline representing a mind map structure for a given central topic, exploring related concepts, sub-topics, and connections in a structured, indented list format.

## 1. Core Requirements & Quality Indicators

*   **Hierarchical Structure:**
    *   Clearly shows a central topic with main branches, sub-branches, and further details, typically represented by indentation levels.
*   **Logical Connections:**
    *   Related ideas are grouped together under appropriate parent nodes.
    *   The relationships between concepts are logical.
*   **Comprehensive Coverage (for the given scope):**
    *   Explores the central topic by branching out into relevant sub-themes and details.
*   **Clarity & Conciseness of Nodes:**
    *   Each item (node) in the mind map outline is a clear, concise phrase or keyword.
*   **Balanced Structure (Ideally):**
    *   The mind map doesn't become excessively deep in one branch while neglecting others, unless the topic naturally dictates it.
*   **Stimulates Further Thinking:**
    *   The generated outline serves as a good starting point for more detailed exploration or organization of thoughts.
*   **Readability of Outline:**
    *   Uses consistent indentation (e.g., tabs or spaces) to represent levels.

## 2. Key Stages & Processes Involved

1.  **Identify Central Topic:**
    *   Determine the main subject or concept around which the mind map will be built.
2.  **Brainstorm Main Branches (First-Level Ideas):**
    *   Generate 3-7 key sub-topics or categories directly related to the central topic. These form the first level of branches.
3.  **Develop Sub-Branches for Each Main Branch (Second-Level Ideas):**
    *   For each main branch, brainstorm further related ideas, details, or components.
4.  **Continue Branching to Deeper Levels (As appropriate):**
    *   For significant sub-branches, continue to break them down into more specific points.
    *   Avoid going too deep if it makes the outline unwieldy, unless detail is specifically requested.
5.  **Use Keywords & Concise Phrases:**
    *   Keep the text for each node brief and to the point.
6.  **Structure as a Text-Based Outline:**
    *   Represent the hierarchy using indentation:
        *   Central Topic (Level 0)
            *   Main Branch 1 (Level 1)
                *   Sub-Branch 1.1 (Level 2)
                    *   Detail 1.1.1 (Level 3)
                *   Sub-Branch 1.2
            *   Main Branch 2
                *   Sub-Branch 2.1
    *   Use bullet points (`*`, `-`) or numbering for list items at each level.
7.  **Review for Logic, Completeness, and Clarity:**
    *   Check that connections between ideas are logical.
    *   Ensure key aspects of the topic are covered.
    *   Verify that the outline is easy to read and understand.

## 3. Inputs Required from User/System

*   **Central Topic or Concept for the Mind Map:**
*   **Desired Level of Detail or Depth (Optional):** (e.g., "just main branches," "explore 3 levels deep").
*   **Specific Sub-Topics or Areas to Include/Exclude (Optional):**
*   **Purpose of the Mind Map (Optional):** (e.g., "for essay planning," "for project brainstorming," "to understand a complex system"). This helps tailor the type of branches generated.
*   **Preferred Outline Style (Optional):** (e.g., using tabs vs. spaces for indentation, specific bullet characters).

## 4. Potential Challenges & Considerations

*   **Balancing Breadth vs. Depth:** Deciding how many main branches to create versus how deeply to explore each one.
*   **Maintaining Focus:** Ensuring all branches and sub-branches remain relevant to the central topic.
*   **Information Overload:** Creating an outline that is too large or complex to be easily digestible.
*   **Subjectivity of Connections:** The "best" way to connect ideas can be subjective.
*   **Visual Representation (Beyond Scope):** This use case is for a text-based outline. Actual graphical mind map generation would require different tools/outputs (e.g., Mermaid, Markmap syntax).

## 5. Metrics for Success (How to Evaluate Output)

*   **Logical Hierarchy:** Is the outline well-structured with clear parent-child relationships?
*   **Relevance of Branches:** Do all nodes clearly relate to their parent and the central topic?
*   **Coverage of Topic:** Does the outline explore the key facets of the central topic adequately for the requested scope?
*   **Clarity of Node Labels:** Are the phrases used for each item clear and concise?
*   **Usefulness as an Organizational Tool:** Does the outline help in structuring thoughts or information about the topic?
*   **Readability of Text Format:** Is the indentation and list formatting clear and consistent?

## 6. Example Output Structure/Format
**Scenario:** User wants a text-based mind map outline for "Effective Time Management".
*   **User Input:**
    *   Central Topic: Effective Time Management
    *   Desired Depth: 2-3 levels

*   **Cline Generated Text-Based Mind Map Outline:**
    ```
    Effective Time Management
    *   I. Prioritization
        *   A. Identifying High-Impact Tasks
            *   1. Eisenhower Matrix (Urgent/Important)
            *   2. Pareto Principle (80/20 Rule)
        *   B. Goal Setting
            *   1. SMART Goals
            *   2. Breaking Down Large Goals
    *   II. Planning & Scheduling
        *   A. Time Blocking
        *   B. Using Calendars/Planners
        *   C. Daily/Weekly Reviews
    *   III. Minimizing Distractions
        *   A. Digital Distractions (Notifications, Social Media)
        *   B. Physical Environment
        *   C. Saying "No" to Non-Essential Commitments
    *   IV. Tools & Techniques
        *   A. To-Do Lists
        *   B. Pomodoro Technique
        *   C. Delegation
    *   V. Overcoming Procrastination
        *   A. Understanding Causes
        *   B. Starting Small (Two-Minute Rule)
        *   C. Setting Rewards
    ```

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Mind Map Generation (Text-Based Outline)"
path: "prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/mind-map-generation-text-based-outline.md"
type: "use_case_guide"
description: "Generates a hierarchical, text-based outline representing a mind map for a given central topic."
triggers: ["mind map text", "text mind map", "idea outline", "hierarchical brainstorm", "topic exploration outline"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/pros-cons-list-generation.md
-----------------
# Use Case Definition: Pros and Cons List Generation

**Objective:** To generate a balanced list of potential advantages (pros) and disadvantages (cons) for a given topic, decision, product, or course of action, aiding in evaluation and decision-making.

## 1. Core Requirements & Quality Indicators

*   **Balanced Perspective:**
    *   Presents both positive and negative aspects, aiming for a fair overview unless a specific bias is requested (e.g., "focus on the benefits").
*   **Relevance:**
    *   All pros and cons are directly relevant to the specified topic.
*   **Clarity & Conciseness:**
    *   Each pro and con is stated clearly and succinctly.
*   **Distinct Points:**
    *   Avoids significant overlap between different points in the list.
*   **Plausibility & Reasonableness:**
    *   The arguments for pros and cons are generally logical and based on common understanding or provided context.
*   **Comprehensiveness (for common aspects):**
    *   Covers the most significant or commonly considered advantages and disadvantages.
*   **Structured Format:**
    *   Clearly separates pros from cons, typically using two distinct lists or columns.

## 2. Key Stages & Processes Involved

1.  **Understand the Topic/Decision:**
    *   Clarify what is being evaluated.
2.  **Brainstorm Potential Advantages (Pros):**
    *   Think about the positive outcomes, benefits, strengths, or opportunities associated with the topic.
    *   Consider different perspectives (e.g., user, business, technical).
3.  **Brainstorm Potential Disadvantages (Cons):**
    *   Think about the negative outcomes, drawbacks, weaknesses, risks, or challenges.
    *   Consider different perspectives.
4.  **Filter & Refine Points:**
    *   Ensure each point is distinct and clearly stated.
    *   Remove any irrelevant or very weak points unless a comprehensive list is explicitly desired.
5.  **Structure the List:**
    *   Create two clear sections: "Pros" (or "Advantages") and "Cons" (or "Disadvantages").
    *   Use bullet points for individual items within each section.
6.  **Add Brief Elaboration (Optional):**
    *   For complex points, a short explanation can be added to each pro or con.
7.  **Review for Balance & Neutrality (if intended):**
    *   Check if the list presents a reasonably fair overview, or if it unintentionally skews heavily one way without justification.

## 3. Inputs Required from User/System

*   **Topic, Decision, Product, or Course of Action to Evaluate:** (e.g., "pros and cons of remote work," "pros and cons of adopting a new software," "pros and cons of learning Python vs. Java").
*   **Context or Background Information (Optional):** This can help generate more relevant points.
*   **Specific Aspects to Consider (Optional):** (e.g., "focus on financial implications," "consider the impact on team morale").
*   **Desired Number of Points per Side (Optional):**
*   **Target Audience for the List (Optional):** (This might influence the language and complexity of points).

## 4. Potential Challenges & Considerations

*   **Subjectivity:** What one person sees as a pro, another might see as a con, or it might depend on individual priorities.
*   **Hidden Biases:** AI might inadvertently reflect biases present in its training data.
*   **Oversimplification:** Complex issues may have pros/cons that are nuanced and not easily listed.
*   **Lack of Specific Context:** Without enough context, generated lists can be very generic.
*   **Balancing Detail:** Providing enough information for each point without making the list too long.

## 5. Metrics for Success (How to Evaluate Output)

*   **Relevance:** Are all listed pros and cons directly related to the topic?
*   **Balance (if intended):** Does the list offer a fair consideration of both positive and negative aspects?
*   **Clarity & Conciseness:** Is each point easy to understand?
*   **Plausibility:** Are the arguments for each pro and con reasonable?
*   **Comprehensiveness:** Does it cover the most significant, commonly discussed pros and cons?
*   **Usefulness for Decision-Making/Evaluation:** Does the list provide a helpful framework for thinking about the topic?
*   **Clear Structure:** Are pros and cons clearly separated and formatted?

## 6. Example Output Structure/Format
**Scenario:** User wants a pros and cons list for "switching to a four-day work week".
*   **User Input:**
    *   Topic: Switching to a four-day work week.
    *   Aspects to Consider: Employee well-being, productivity, operational costs.

*   **Cline Generated Pros & Cons List:**

    **Topic: Switching to a Four-Day Work Week**

    **Pros:**
    *   **Improved Employee Well-being:** Longer weekends can lead to better work-life balance, reduced stress, and lower burnout rates.
    *   **Increased Productivity:** Some studies suggest employees can be more focused and productive in a condensed work week.
    *   **Reduced Operational Costs:** Potential savings on utilities, office supplies, and commuting costs for employees.
    *   **Attract & Retain Talent:** Can be a significant perk to attract top candidates and improve employee retention.
    *   **Lower Absenteeism:** Employees may take fewer sick days with an extra day off for personal appointments.

    **Cons:**
    *   **Customer Service Challenges:** May be difficult to maintain consistent customer service coverage without careful scheduling.
    *   **Increased Workload Intensity:** Longer workdays can be tiring and may not suit all roles or individuals.
    *   **Scheduling Complexity:** Coordinating schedules for teams and ensuring handover can be challenging.
    *   **Not Suitable for All Industries:** Some industries require 24/7 operations or have client-facing demands that make a 4-day week difficult.
    *   **Potential for Overtime Costs:** If work cannot be completed in four days, overtime costs might negate savings.
    *   **Communication Gaps:** Reduced overlap in working hours could lead to communication delays if not managed well.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "Pros and Cons List Generation"
path: "prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/pros-cons-list-generation.md"
type: "use_case_guide"
description: "Generates a balanced list of advantages (pros) and disadvantages (cons) for a given topic, decision, or course of action."
triggers: ["pros and cons", "advantages disadvantages", "evaluate options", "decision making list", "benefits drawbacks"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/general-brainstorming-idea-listing.md
-----------------
# Use Case Definition: General Brainstorming & Idea Listing

**Objective:** To generate a diverse list of ideas, concepts, or solutions related to a user-provided topic, problem, or theme, encouraging creative thinking and exploration of possibilities.

## 1. Core Requirements & Quality Indicators

*   **Quantity & Diversity of Ideas:**
    *   Generates a reasonable number of distinct ideas.
    *   Ideas cover a range of perspectives or approaches if applicable.
*   **Relevance to Prompt:**
    *   All generated ideas are clearly related to the user's topic or problem statement.
*   **Creativity & Originality (where appropriate):**
    *   Includes some novel or less obvious ideas, not just common suggestions.
*   **Clarity of Ideas:**
    *   Each idea is expressed clearly and concisely.
*   **Actionability (Context-Dependent):**
    *   Some ideas might be high-level concepts, while others could be more concrete or actionable, depending on the prompt.
*   **Categorization (Optional but helpful):**
    *   May group similar ideas into categories for better organization.
*   **No Judgment (Initially):**
    *   The primary goal is to generate many ideas; filtering or evaluation can come later.

## 2. Key Stages & Processes Involved

1.  **Understand the Brainstorming Topic/Problem:**
    *   Clarify the central theme, question, or challenge provided by the user.
2.  **Set Scope/Constraints (if any):**
    *   Are there any specific constraints, desired number of ideas, or areas to focus on/avoid?
3.  **Generate Ideas Using Various Techniques (Conceptual for AI):**
    *   **Free Association:** Generate related words and concepts.
    *   **"What If" Scenarios:** Explore hypothetical situations.
    *   **Different Perspectives:** Consider the topic from various viewpoints (e.g., user, competitor, different roles).
    *   **Analogies & Metaphors:** Draw comparisons to unrelated domains.
    *   **SCAMPER (Substitute, Combine, Adapt, Modify, Put to another use, Eliminate, Reverse):** Apply these actions to existing ideas or the problem itself.
    *   **Random Word Association:** Connect the topic to random words to spark new connections.
4.  **List Generated Ideas:**
    *   Present the ideas, typically as a bulleted or numbered list.
5.  **Briefly Elaborate on Each Idea (Optional):**
    *   Provide a short explanation or expansion for each generated idea to clarify it.
6.  **Categorize Ideas (Optional):**
    *   If many ideas are generated, group them into logical categories or themes.
7.  **Encourage Further Exploration:**
    *   May conclude by prompting the user to select promising ideas for further development or to add their own.

## 3. Inputs Required from User/System

*   **Brainstorming Topic, Problem, or Theme:** (e.g., "ideas for a new mobile app," "ways to improve customer engagement," "themes for a fantasy novel").
*   **Context or Background Information (Optional):**
*   **Desired Number of Ideas or Level of Detail (Optional):**
*   **Any Specific Constraints or Areas to Focus On/Avoid (Optional):**
*   **Examples of Types of Ideas Sought (Optional):**

## 4. Potential Challenges & Considerations

*   **Vague Prompts:** Overly broad topics can lead to very generic ideas.
*   **Idea Quality vs. Quantity:** Balancing the generation of many ideas with the generation of useful or innovative ones.
*   **Repetitiveness:** Avoiding generating very similar ideas multiple times.
*   **Feasibility:** Some brainstormed ideas may be impractical or unrealistic (which is acceptable in early brainstorming stages).
*   **Filtering & Evaluation (Separate Step):** Brainstorming is about generation; evaluation is a subsequent process.

## 5. Metrics for Success (How to Evaluate Output)

*   **Quantity of Relevant Ideas:** Was a good number of on-topic ideas generated?
*   **Diversity of Ideas:** Do the ideas explore different angles or approaches?
*   **Clarity:** Are the ideas presented in an understandable way?
*   **Creativity/Originality:** Are there some novel or thought-provoking suggestions?
*   **Stimulation of Further Thought:** Does the list inspire the user to think of more ideas or refine existing ones?
*   **Organization (if categorized):** Is the categorization logical and helpful?
*   **Adherence to Constraints:** If the user provided specific focus areas or limitations, were they respected?

## 6. Example Output Structure/Format
**Scenario:** User wants ideas for a new sustainable product.
*   **User Input:**
    *   Topic: Ideas for a new sustainable product.
    *   Focus: Household items.
    *   Constraint: Must use recycled materials.

*   **Cline Generated Idea List (Excerpt):**
    *   **Product Idea:** Reusable food wraps made from recycled cotton and beeswax.
        *   *Elaboration:* Alternative to plastic cling film, washable and biodegradable.
    *   **Product Idea:** Modular shelving units made from reclaimed wood.
        *   *Elaboration:* Customizable, reduces timber harvesting, promotes circular economy.
    *   **Product Idea:** Plantable greeting cards embedded with wildflower seeds, made from recycled paper.
        *   *Elaboration:* Card can be planted after use, zero waste, promotes biodiversity.
    *   **Product Idea:** Compostable phone cases made from bioplastics derived from cornstarch or agricultural waste.
        *   *Elaboration:* Reduces plastic pollution from tech accessories.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "General Brainstorming & Idea Listing"
path: "prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/general-brainstorming-idea-listing.md"
type: "use_case_guide"
description: "Generates a diverse list of ideas, concepts, or solutions related to a user-provided topic, problem, or theme."
triggers: ["brainstorm ideas", "idea generation", "list concepts", "problem solving ideas", "creative thinking", "brainstorming session"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/swot-analysis-generation.md
-----------------
# Use Case Definition: SWOT Analysis Generation

**Objective:** To generate a structured SWOT analysis (Strengths, Weaknesses, Opportunities, Threats) for a given company, product, project, or situation, to aid in strategic planning and decision-making.

## 1. Core Requirements & Quality Indicators

*   **Comprehensive Coverage of Four Quadrants:**
    *   Identifies relevant factors for each of the four categories:
        *   **Strengths (Internal, Positive):** Internal capabilities, resources, or advantages.
        *   **Weaknesses (Internal, Negative):** Internal limitations, disadvantages, or areas for improvement.
        *   **Opportunities (External, Positive):** External factors or trends that could be leveraged for benefit.
        *   **Threats (External, Negative):** External factors or trends that could pose a risk or challenge.
*   **Relevance to Subject:**
    *   All points are directly relevant to the company, product, or situation being analyzed.
*   **Clarity & Conciseness:**
    *   Each point is stated clearly and succinctly.
*   **Distinct Points:**
    *   Avoids significant overlap between points within or across categories.
*   **Plausibility & Insightfulness:**
    *   Points are logical and offer some level of insight, not just generic statements.
    *   Considers both internal and external factors appropriately.
*   **Structured Format:**
    *   Clearly presents the analysis in four distinct sections/quadrants.

## 2. Key Stages & Processes Involved

1.  **Understand the Subject of Analysis:**
    *   Clarify what company, product, project, or situation is being analyzed.
    *   Gather basic background information if provided by the user.
2.  **Brainstorm Strengths (Internal, Positive):**
    *   What are the inherent advantages? What does it do well? What unique resources or capabilities does it possess?
3.  **Brainstorm Weaknesses (Internal, Negative):**
    *   What are the internal limitations or disadvantages? What could be improved? What resources are lacking?
4.  **Brainstorm Opportunities (External, Positive):**
    *   What external trends, market conditions, or untapped possibilities could be beneficial?
    *   Are there new technologies, markets, or partnerships to explore?
5.  **Brainstorm Threats (External, Negative):**
    *   What external factors pose a risk? (e.g., competitors, changing regulations, economic downturns, technological disruption).
6.  **Filter, Refine, and Categorize Points:**
    *   Ensure each point fits correctly into one of the four SWOT categories.
    *   Refine phrasing for clarity and conciseness.
    *   Remove redundant or very weak points.
7.  **Structure the SWOT Analysis:**
    *   Present the findings in four clearly labeled sections: Strengths, Weaknesses, Opportunities, Threats.
    *   Use bullet points for individual items within each section.
8.  **Add Brief Elaboration (Optional):**
    *   A short explanation can be added to each point for further clarification if needed.

## 3. Inputs Required from User/System

*   **Subject of the SWOT Analysis:** (e.g., "Tesla," "our new mobile app project," "the decision to expand into a new market").
*   **Context or Background Information about the Subject (Highly Recommended):** (e.g., company mission, product features, project goals, market conditions). The more context, the more relevant the SWOT.
*   **Specific Areas of Focus (Optional):** (e.g., "focus on marketing aspects," "consider financial strengths and weaknesses").
*   **Known Strengths, Weaknesses, Opportunities, or Threats (Optional):** User can provide initial thoughts.

## 4. Potential Challenges & Considerations

*   **Generic vs. Specific Analysis:** Without sufficient context, a SWOT analysis can become very generic.
*   **Internal vs. External Distinction:** Correctly categorizing factors as internal (Strengths, Weaknesses) or external (Opportunities, Threats).
*   **Objectivity:** Trying to maintain a balanced view, especially if analyzing one's own project or company.
*   **Actionability:** A SWOT analysis is a diagnostic tool; the next step (not part of this use case) is to develop strategies based on it (e.g., SO, WO, ST, WT strategies).
*   **Dynamic Nature:** SWOT factors can change over time.

## 5. Metrics for Success (How to Evaluate Output)

*   **Relevance:** Are all points pertinent to the subject of analysis?
*   **Correct Categorization:** Are items placed in the correct SWOT quadrant?
*   **Comprehensiveness:** Does it cover a good range of significant internal and external factors?
*   **Clarity & Conciseness:** Is each point easy to understand?
*   **Insightfulness:** Does the analysis offer some valuable perspectives or highlight important considerations?
*   **Usefulness for Strategic Planning:** Does it provide a solid foundation for further strategic discussion and decision-making?
*   **Clear Structure:** Is the SWOT analysis presented in an organized and readable format?

## 6. Example Output Structure/Format
**Scenario:** User wants a SWOT analysis for a small independent coffee shop.
*   **User Input:**
    *   Subject: "The Cozy Corner Cafe" - a small, independent coffee shop.
    *   Context: Located in a neighborhood with some foot traffic, known for good coffee and friendly service. Faces competition from a large chain nearby.
    *   Focus: General business strategy.

*   **Cline Generated SWOT Analysis:**

    **SWOT Analysis: The Cozy Corner Cafe**

    **Strengths (Internal, Positive):**
    *   High-quality coffee and unique blends.
    *   Friendly, personalized customer service.
    *   Cozy and inviting atmosphere.
    *   Loyal local customer base.
    *   Flexibility to adapt menu and offerings quickly.

    **Weaknesses (Internal, Negative):**
    *   Limited marketing budget compared to chains.
    *   Smaller purchasing power for supplies.
    *   Dependence on owner/key staff for unique ambiance.
    *   Limited seating capacity.
    *   Potentially less brand recognition than larger competitors.

    **Opportunities (External, Positive):**
    *   Growing demand for specialty coffee and artisanal products.
    *   Partner with local bakeries or artists to offer unique products.
    *   Host community events (e.g., open mic nights, book clubs) to increase foot traffic.
    *   Leverage social media for targeted local marketing.
    *   Offer loyalty programs to retain customers.
    *   Expand into online orders/delivery for local area.

    **Threats (External, Negative):**
    *   Intense competition from nearby chain coffee shops.
    *   Rising costs of coffee beans and other supplies.
    *   Changes in local economic conditions affecting discretionary spending.
    *   Shifting consumer preferences (e.g., new drink trends).
    *   Difficulty in attracting and retaining skilled baristas.

---
**Frontmatter for `prompt_inventory.yaml`:**
name: "SWOT Analysis Generation"
path: "prompts/use_cases/content-creation-and-management/brainstorming-idea-generation/swot-analysis-generation.md"
type: "use_case_guide"
description: "Generates a structured SWOT analysis (Strengths, Weaknesses, Opportunities, Threats) for a given subject."
triggers: ["swot analysis", "generate swot", "strengths weaknesses opportunities threats", "strategic planning tool"]
weight: 100

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/data-analysis-reporting/data-cleaning-preprocessing-script-generation.md
-----------------
# Use Case Definition: Data Cleaning & Preprocessing Script Generation

**Objective:** To generate scripts (typically in Python using libraries like Pandas and NumPy) for cleaning and preprocessing raw datasets, making them suitable for analysis, visualization, or machine learning.

## 1. Core Requirements & Quality Indicators

*   **Handles Common Data Issues:**
    *   Addresses missing values (e.g., imputation, removal).
    *   Corrects data type inconsistencies.
    *   Identifies and handles outliers (e.g., capping, removal, transformation).
    *   Removes duplicate records.
    *   Corrects structural errors or inconsistencies in data formatting.
*   **Efficiency & Readability of Script:**
    *   Generated code is efficient for the given dataset size (conceptually).
    *   Code is well-commented and easy to understand.
    *   Uses standard library functions and vectorized operations where possible.
*   **Flexibility & Customization:**
    *   Allows user to specify cleaning strategies for different columns or data types.
    *   Can handle various input data formats (e.g., CSV, Excel, JSON).
*   **Reproducibility:**
    *   The script ensures that the cleaning process is repeatable.
*   **Output of Cleaned Data:**
    *   The script outputs a cleaned dataset in a specified format.
*   **Reporting/Logging (Optional):**
    *   May generate a summary report of changes made (e.g., number of missing values handled, duplicates removed).

## 2. Key Stages & Processes Involved

1.  **Understand Data & Cleaning Requirements:**
    *   Load a sample of the data (or get schema/description from user).
    *   Identify data types, potential issues (missing values, outliers, inconsistencies) based on user input or initial data exploration (AI can suggest common checks).
    *   Clarify user's goals for data cleaning (e.g., prepare for ML, for specific analysis).
2.  **Plan Cleaning Strategy:**
    *   For each identified issue and relevant column(s):
        *   **Missing Values:** Decide on strategy (e.g., fill with mean/median/mode, forward/backward fill, drop rows/columns, use a constant).
        *   **Data Types:** Plan conversions (e.g., string to numeric, string to datetime).
        *   **Outliers:** Choose method (e.g., Z-score, IQR, manual capping).
        *   **Duplicates:** Define criteria for identifying duplicates.
        *   **Inconsistent Formatting/Typos:** Plan normalization steps (e.g., lowercasing text, standardizing date formats, correcting common misspellings if a dictionary is provided).
        *   **Feature Engineering (Simple):** May include creating new features from existing ones (e.g., extracting year from date, binning numerical data).
3.  **Generate Script Code (e.g., Python with Pandas):**
    *   Write code to load the dataset.
    *   Implement each cleaning step sequentially.
    *   Use appropriate library functions (e.g., `pandas.DataFrame.fillna()`, `pandas.DataFrame.astype()`, `pandas.DataFrame.drop_duplicates()`).
    *   Add comments to explain each step.
4.  **Include Data Export:**
    *   Add code to save the cleaned dataset to a new file.
5.  **Suggest Summary/Logging (Optional):**
    *   Add code to print summary statistics before and after cleaning, or log the number of changes made.
6.  **Provide Instructions for Running the Script:**

## 3. Inputs Required from User/System

*   **Sample of the Dataset or Detailed Schema Description:** (Column names, expected data types, example values).
*   **Input Data Format:** (e.g., CSV, Excel, JSON, SQL query).
*   **Specific Cleaning Tasks Required:** (e.g., "handle missing values in 'Age' column," "remove duplicate rows based on 'Email'").
*   **Preferred Strategies for Handling Issues (Optional):** (e.g., "fill missing 'Age' with median," "drop rows with more than 3 missing values").
*   **Output Data Format & Filename:**
*   **Target Programming Language/Libraries (Default to Python/Pandas if not specified):**

## 4. Potential Challenges & Considerations

*   **Data Volume:** Scripts need to be reasonably efficient for the dataset size.
*   **Complexity of Issues:** Highly messy or unstructured data can require very complex cleaning logic.
*   **Defining "Clean":** What constitutes clean data can be subjective and depends on the downstream use case.
*   **Information Loss:** Some cleaning operations (like dropping rows/columns or aggressive outlier removal) can lead to loss of valuable information.
*   **Order of Operations:** The sequence of cleaning steps can matter.
*   **Domain Knowledge:** Effective cleaning often requires understanding the data's domain.

## 5. Metrics for Success (How to Evaluate Output)

*   **Correctness of Script:** Does the script run without errors (given appropriate environment)?
*   **Effectiveness of Cleaning:** Does the script successfully address the specified data issues?
*   **Readability & Maintainability of Code:** Is the generated script easy to understand and modify?
*   **Efficiency (Conceptual):** Does the script use appropriate methods for data manipulation?
*   **Adherence to User Specifications:** Does it implement the cleaning strategies requested by the user?
*   **Completeness:** Does the script handle loading data, cleaning, and saving the result?
*   **Usefulness for Downstream Tasks:** Is the cleaned data suitable for the user's intended next steps (analysis, ML)?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/data-analysis-reporting/financial-statement-summary-analysis-informational.md
-----------------
# Use Case Definition: Financial Statement Summary & Analysis (Informational)

**Objective:** To summarize key figures from financial statements (e.g., income statement, balance sheet, cash flow statement) and provide a basic, high-level analysis of trends or ratios. **This is for informational and illustrative purposes ONLY and does NOT constitute financial or investment advice. Users MUST consult with a qualified financial professional for advice.**

## 1. Core Requirements & Quality Indicators

*   **Accurate Data Extraction:**
    *   Correctly identifies and extracts key line items from provided financial statements (e.g., revenue, net income, total assets, total liabilities, operating cash flow).
*   **Correct Calculation of Basic Ratios (if requested):**
    *   If asked to calculate common ratios (e.g., current ratio, debt-to-equity, profit margin), the formulas are applied correctly to the extracted data.
*   **Clear Summary of Key Figures:**
    *   Presents the most important financial numbers in an easy-to-understand format.
*   **Identification of Basic Trends (if comparing periods):**
    *   Highlights significant changes or trends when comparing data from multiple periods (e.g., "Revenue increased by X% year-over-year").
*   **Understandable Language (for a non-expert, if specified):**
    *   Explains financial terms simply if the target audience is not financially savvy.
*   **Prominent Disclaimer:**
    *   **AI-generated output MUST always be accompanied by a clear and prominent disclaimer stating that the content is for informational purposes only, is not financial/investment advice, and that a qualified financial professional should be consulted.**

## 2. Key Stages & Processes Involved

1.  **Understand User Request & Identify Statements:**
    *   What financial statements are provided (Income Statement, Balance Sheet, Cash Flow)?
    *   What specific information, ratios, or trends does the user want to see?
2.  **Extract Key Data Points:**
    *   Identify and pull relevant line items from the provided statements. This might involve parsing text or structured data (e.g., from a CSV or table).
3.  **Perform Calculations (if requested):**
    *   Calculate requested financial ratios using standard formulas.
    *   Calculate percentage changes or differences between periods if comparative data is available.
4.  **Summarize Key Figures & Trends:**
    *   Present the extracted data and calculated metrics in a structured way (e.g., tables, bullet points).
    *   Write a brief narrative highlighting significant figures, trends, or ratio results.
5.  **Add Explanatory Notes (Optional):**
    *   Briefly explain what key terms or ratios mean, especially if for a general audience.
6.  **CRITICAL: Attach Disclaimer:**
    *   Ensure the output prominently features a disclaimer that it is not financial advice.

## 3. Inputs Required from User/System

*   **Financial Statement Data:** (e.g., text of income statement, balance sheet, cash flow statement; or structured data like CSV/Excel).
*   **Specific Line Items of Interest (Optional):**
*   **Financial Ratios to Calculate (Optional):** (e.g., "calculate current ratio," "show gross profit margin").
*   **Periods for Comparison (if applicable):** (e.g., "compare Q1 2023 to Q1 2024").
*   **Target Audience for the Summary/Analysis (Optional):** (e.g., "explain for someone new to finance").

## 4. Potential Challenges & Considerations

*   **RISK OF BEING MISINTERPRETED AS FINANCIAL ADVICE (MITIGATED BY DISCLAIMER):** AI cannot provide financial or investment advice.
*   **Accuracy of Input Data:** The quality of the summary/analysis depends heavily on the accuracy and completeness of the financial statements provided by the user.
*   **Complexity of Financial Analysis:** True financial analysis requires deep expertise, understanding of accounting standards, industry context, and forward-looking judgment, which AI cannot replicate.
*   **Interpretation vs. Calculation:** AI can calculate ratios but interpreting their significance in context is a human expert task.
*   **Varying Accounting Standards & Presentation:** Financial statements can differ in format.

## 5. Metrics for Success (How to Evaluate Output)

*   **Presence & Prominence of Disclaimer:** Is the "not financial advice" disclaimer clear and unavoidable?
*   **Accuracy of Data Extraction & Calculations:** Are numbers pulled correctly and ratios calculated accurately based on standard formulas?
*   **Clarity of Summary:** Is the presentation of key figures and trends easy to understand?
*   **Relevance to User Request:** Does it address the specific information or ratios the user asked for?
*   **Educational Value (as an illustration of data points):** Does it help the user see key numbers from the statements in a summarized way, before they consult a financial professional?
*   **Objectivity of Language:** Does the analysis stick to factual summarization rather than speculative interpretation or advice?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/data-analysis-reporting/data-visualization-script-generation.md
-----------------
# Use Case Definition: Data Visualization Script Generation

**Objective:** To generate scripts (typically in Python using libraries like Matplotlib, Seaborn, Plotly, or R with ggplot2) for creating various types of charts and graphs to visually represent data, uncover insights, and communicate findings.

## 1. Core Requirements & Quality Indicators

*   **Appropriate Chart Type Selection:**
    *   Suggests or uses chart types suitable for the data and the analytical goal (e.g., bar chart for comparisons, line chart for trends, scatter plot for relationships, histogram for distributions).
*   **Accurate Data Representation:**
    *   Visualizations correctly reflect the underlying data.
*   **Clarity & Readability of Visualization:**
    *   Charts are easy to understand, with clear labels for axes, titles, legends, and data points.
    *   Avoids clutter ("chart junk").
    *   Good use of color, font sizes, and layout.
*   **Insightful Visualizations:**
    *   Helps to reveal patterns, trends, correlations, or outliers in the data.
*   **Customization Options:**
    *   Allows user to specify chart titles, axis labels, colors, styles, and other aesthetic elements.
*   **Correct & Runnable Code:**
    *   Generated script executes without errors (given the necessary libraries and data).
    *   Produces the intended visualization.
*   **Handles Common Data Formats:**
    *   Can work with data provided in formats like CSV, Excel, Pandas DataFrames, or arrays.
*   **Interactive Features (for libraries like Plotly):**
    *   If using interactive libraries, script may include features like tooltips, zooming, or filtering.

## 2. Key Stages & Processes Involved

1.  **Understand Data & Visualization Goal:**
    *   What data is being visualized? (Structure, types of variables - categorical, numerical).
    *   What story does the user want to tell with the data? What insights are they looking for? (e.g., compare categories, show a trend over time, visualize a distribution).
2.  **Select Appropriate Chart Type(s):**
    *   Based on the data and goal, choose the most effective visualization(s).
    *   (e.g., Bar chart for comparing quantities across categories; Line chart for time-series data; Scatter plot for relationship between two numerical variables; Histogram/Box plot for distribution of a single numerical variable; Pie chart for parts of a whole - use with caution).
3.  **Map Data to Visual Encodings:**
    *   Decide which data columns map to x-axis, y-axis, color, size, shape, etc.
4.  **Generate Visualization Script:**
    *   Write code using the chosen library (e.g., Matplotlib, Seaborn, Plotly).
    *   Load/prepare data.
    *   Create the plot, setting data, chart type, and aesthetic mappings.
    *   Add labels, title, legend.
    *   Include customization options (colors, styles, annotations).
    *   Add code to display or save the plot.
5.  **Add Comments & Instructions:**
    *   Comment the code to explain key steps.
    *   Provide instructions on how to run the script and any dependencies.
6.  **Refine & Iterate (Conceptual):**
    *   Suggest potential improvements or alternative visualizations if appropriate.

## 3. Inputs Required from User/System

*   **Dataset or Description of Data:** (Column names, data types, sample data if possible).
*   **Input Data Format:** (e.g., CSV file path, direct data array, Pandas DataFrame variable name if in an interactive environment).
*   **Visualization Goal or Question to Answer:** (e.g., "Show sales trend over the last year," "Compare performance across different product categories").
*   **Preferred Chart Type(s) (Optional):**
*   **Specific Columns to Plot:**
*   **Desired Customizations (Optional):** (Title, axis labels, colors, specific library if preferred).
*   **Target Programming Language/Library (Default to Python with Matplotlib/Seaborn if not specified):**

## 4. Potential Challenges & Considerations

*   **Choosing the Right Chart:** Selecting a visualization that effectively and accurately communicates the intended insight.
*   **Overplotting/Clutter:** For large datasets, visualizations can become too dense to interpret.
*   **Misleading Visualizations:** Poor choices in scaling, chart type, or color can distort the perception of data.
*   **Handling Large Datasets:** Performance can be an issue for some plotting libraries with very large data.
*   **Interactivity Complexity:** Scripting complex interactive visualizations can be challenging.
*   **Aesthetic Quality:** Creating visually appealing charts often requires fine-tuning.

## 5. Metrics for Success (How to Evaluate Output)

*   **Correctness of Script:** Does the code run and produce a chart?
*   **Appropriateness of Chart Type:** Is the chosen visualization suitable for the data and goal?
*   **Clarity & Readability of Chart:** Is the generated chart easy to understand? Are labels, titles, and legends clear?
*   **Accuracy of Data Representation:** Does the chart faithfully represent the data?
*   **Insightfulness:** Does the visualization help to reveal meaningful patterns or insights?
*   **Adherence to Customization Requests:**
*   **Code Quality:** Is the generated script well-organized and commented?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/data-analysis-reporting/automated-report-generation-text-based.md
-----------------
# Use Case Definition: Automated Report Generation (Text-Based)

**Objective:** To generate structured, text-based reports summarizing data, analysis results, or system status, often based on templates and dynamic data inputs.

## 1. Core Requirements & Quality Indicators

*   **Data Integration:**
    *   Accurately incorporates data from specified sources (e.g., CSV files, database query results, API responses, log files).
*   **Template Adherence (if applicable):**
    *   Follows a predefined template or structure for the report.
*   **Clarity & Conciseness:**
    *   Presents information clearly and succinctly.
    *   Summarizes key findings effectively.
*   **Accuracy of Information:**
    *   All reported data, calculations, and summaries are correct.
*   **Customizable Sections:**
    *   Allows users to define which sections or data points to include.
*   **Logical Organization:**
    *   Report is structured logically with clear headings and sections.
*   **Professional Formatting (Text-Based):**
    *   Uses Markdown or plain text formatting effectively for readability (e.g., headings, lists, tables if text-based).
*   **Timeliness (if for scheduled reporting):**
    *   Can be (conceptually) triggered to run on a schedule.

## 2. Key Stages & Processes Involved

1.  **Define Report Purpose, Audience, and Key Metrics:**
    *   What is the goal of this report? Who is it for?
    *   What specific information or metrics need to be included?
2.  **Identify Data Sources:**
    *   Where will the data for the report come from? (e.g., file paths, database connection details, API endpoints).
3.  **Design Report Template/Structure:**
    *   Outline the sections of the report (e.g., Executive Summary, Key Performance Indicators, Detailed Findings, Trends, Conclusion/Recommendations).
    *   Define placeholders for dynamic data.
4.  **Develop Data Extraction & Processing Logic:**
    *   Write code/scripts to:
        *   Fetch data from sources.
        *   Clean and preprocess data (if necessary, can leverage "Data Cleaning" use case).
        *   Perform calculations or aggregations (e.g., sums, averages, counts, trends).
5.  **Generate Report Content:**
    *   Populate the report template with the processed data and calculated metrics.
    *   Write narrative summaries or interpretations of the data for different sections.
    *   (AI can help draft these narrative parts based on the data).
6.  **Format the Report:**
    *   Apply text-based formatting (Markdown is common) for headings, lists, tables.
7.  **Review & Validate:**
    *   Check the report for accuracy of data, calculations, and interpretations.
    *   Ensure it meets the initial requirements and is clear to the target audience.
8.  **Output/Save Report:**
    *   Save the generated report to a file (e.g., .txt, .md).

## 3. Inputs Required from User/System

*   **Data Source(s):** (e.g., path to CSV/Excel files, database query, API endpoint details).
*   **Report Template or Desired Structure/Sections:**
*   **Key Metrics & Data Points to Include:**
*   **Calculation/Aggregation Logic (if any):** (e.g., "calculate monthly average sales," "show top 5 performing products").
*   **Target Audience for the Report:**
*   **Desired Output Format (e.g., Markdown, plain text):**
*   **Frequency of Report (if recurring, for context):**

## 4. Potential Challenges & Considerations

*   **Data Source Reliability & Consistency:** Issues with input data can affect report accuracy.
*   **Complex Calculations & Logic:** Implementing sophisticated data analysis within the report generation script.
*   **Handling Large Volumes of Data:** Ensuring the generation process is efficient.
*   **Dynamic Content Generation:** Writing narrative that accurately and meaningfully reflects changing data.
*   **Maintaining Templates:** Keeping report templates up-to-date as requirements evolve.
*   **Error Handling:** Managing issues with data fetching or processing.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy of Reported Data & Calculations:**
*   **Clarity & Understandability of the Report:** Can the target audience easily grasp the information?
*   **Completeness:** Does the report include all requested information and metrics?
*   **Adherence to Template/Structure:**
*   **Usefulness for Decision-Making:** Does the report provide actionable insights or the necessary information for its intended purpose?
*   **Readability (Text-Based Formatting):** Is it well-formatted and easy to read?
*   **Correctness of Generated Script (if AI produces a script to generate reports):** Does the script run and produce the correct report?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/target-audience-persona-development.md
-----------------
# Use Case Definition: Target Audience Persona Development for Content Personalization

**Objective:** To create detailed, semi-fictional representations (personas) of ideal customers or audience segments, based on research and data, to guide content creation, personalization efforts, and marketing strategies.

## 1. Core Requirements & Quality Indicators

*   **Data-Driven & Researched:**
    *   Personas are based on actual user data, market research, surveys, interviews, and analytics, not just assumptions.
*   **Actionable Insights:**
    *   Provides clear insights into the target audience's motivations, goals, pain points, behaviors, and preferences that can directly inform content and marketing decisions.
*   **Comprehensive Profile:**
    *   Includes a range of relevant attributes:
        *   **Demographics:** Age, gender, location, education, occupation, income (as relevant).
        *   **Psychographics:** Values, attitudes, interests, lifestyle, personality traits.
        *   **Goals & Motivations:** What are they trying to achieve? What drives them?
        *   **Challenges & Pain Points:** What problems are they facing that the product/service can solve?
        *   **Behaviors:** How do they consume information? What are their online habits? What channels do they use?
        *   **Objections/Concerns:** Potential reasons they might hesitate to engage or purchase.
*   **Relatable & Memorable:**
    *   Often given a fictional name and sometimes a stock photo to make them more tangible and easier for teams to empathize with.
    *   Tells a brief story or paints a picture of a typical individual in that segment.
*   **Distinct & Segmented:**
    *   If multiple personas are created, each should represent a distinct and significant audience segment.
*   **Alignment with Business Goals:**
    *   Personas represent audience segments that are valuable to the business.

## 2. Key Stages & Processes Involved

1.  **Define Purpose & Scope:**
    *   Why are these personas being created? How will they be used?
    *   How many distinct personas are needed?
2.  **Gather Data & Research:**
    *   Collect quantitative data (e.g., website analytics, sales data, survey results).
    *   Collect qualitative data (e.g., customer interviews, support tickets, sales team feedback, social media listening).
    *   Analyze competitor audiences.
3.  **Identify Patterns & Segment Audience:**
    *   Look for common characteristics, behaviors, and motivations within the data.
    *   Group similar individuals into distinct segments.
4.  **Develop Persona Profiles:**
    *   For each segment, create a detailed persona profile, including:
        *   **Fictional Name & Photo (Optional):**
        *   **Background/Demographics:**
        *   **Goals & Motivations:**
        *   **Challenges/Pain Points:**
        *   **How the Product/Service Helps Them:**
        *   **Typical Behaviors/Online Habits:**
        *   **Preferred Communication Channels:**
        *   **Quotes (Fictional but representative):** To capture their voice.
        *   **Common Objections:**
        *   **Marketing Messages that Resonate:**
5.  **Craft a Narrative/Story for Each Persona:**
    *   Write a brief "day in the life" or scenario to make the persona more vivid.
6.  **Validate & Refine (Ideally with Team Input):**
    *   Share draft personas with sales, marketing, and product teams for feedback and validation against their experiences.
7.  **Socialize & Utilize:**
    *   Make the personas accessible to all relevant teams to ensure consistent understanding and application.

## 3. Inputs Required from User/System

*   **Product/Service/Brand Information:**
*   **Business Goals & Marketing Objectives:**
*   **Existing Customer Data (if available):** Analytics, CRM data, survey results.
*   **Market Research Reports (if available):**
*   **Access to Customer Feedback Channels (Conceptual for AI):** (e.g., summaries of support tickets, sales call notes).
*   **Competitor Information (Optional):** To understand who they are targeting.
*   **Specific Audience Segments to Focus On (Optional):**

## 4. Potential Challenges & Considerations

*   **Data Availability & Quality:** Personas are only as good as the data they're based on.
*   **Avoiding Stereotypes:** Ensuring personas are nuanced representations, not caricatures.
*   **Keeping Personas Up-to-Date:** Audiences evolve, so personas need periodic review and refreshment.
*   **Number of Personas:** Creating too many can be overwhelming; too few might not capture important segments.
*   **Gaining Buy-in:** Ensuring teams actually use the personas to guide their work.
*   **AI's Role:** AI can excel at synthesizing provided data and drafting persona narratives, but primary research (interviews, surveys) is typically user-led.

## 5. Metrics for Success (How to Evaluate Output)

*   **Actionability:** Can the personas be directly used to make content, product, or marketing decisions?
*   **Clarity & Detail:** Is each persona well-defined with sufficient detail across key attributes?
*   **Empathy & Relatability:** Do the personas help the team understand and empathize with the target audience?
*   **Differentiation:** If multiple personas, are they clearly distinct from each other?
*   **Data Grounding (if data provided):** Do the personas accurately reflect the input data?
*   **Completeness:** Do they cover the most important audience segments for the business?
*   **Usefulness for Personalization:** Can these personas guide efforts to tailor content and experiences?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/content-calendar-generation.md
-----------------
# Use Case Definition: Content Calendar Generation

**Objective:** To create a structured content calendar that outlines topics, content formats, target platforms, and publication dates for a specified period, helping to organize and streamline content marketing efforts.

## 1. Core Requirements & Quality Indicators

*   **Strategic Alignment:**
    *   Content themes and topics align with overall marketing goals, brand messaging, and target audience interests.
    *   Supports specific campaigns or initiatives if applicable.
*   **Relevance & Value:**
    *   Proposed content topics are relevant, timely, and offer value to the target audience.
*   **Variety & Balance:**
    *   Includes a good mix of content formats (e.g., blog posts, social media updates, videos, infographics) if appropriate for the strategy.
    *   Balances different types of content (e.g., educational, promotional, entertaining, community-building).
*   **Platform Appropriateness:**
    *   Suggests content suitable for the chosen distribution platforms (e.g., blog, Twitter, LinkedIn, Instagram).
*   **Feasibility & Consistency:**
    *   Proposes a realistic publishing schedule that can be consistently maintained.
*   **Organization & Clarity:**
    *   The calendar is well-organized and easy to understand, typically in a table or structured list format.
    *   Clearly indicates topic, format, platform, and proposed date for each content piece.
*   **Keyword/Theme Integration (Optional):**
    *   May incorporate target keywords or overarching themes for different periods.

## 2. Key Stages & Processes Involved

1.  **Define Goals & Target Audience:**
    *   What are the objectives of the content strategy (e.g., increase brand awareness, generate leads, educate customers)?
    *   Who is the primary target audience?
2.  **Identify Key Themes & Pillars:**
    *   Determine overarching themes or content pillars that will guide topic generation. These might relate to product categories, industry trends, customer pain points, or seasonal events.
3.  **Brainstorm Content Topics:**
    *   Generate a list of specific content ideas that align with the themes and audience interests.
    *   Consider repurposing existing content or addressing frequently asked questions.
4.  **Select Content Formats & Platforms:**
    *   For each topic, decide on the most effective format(s) (e.g., blog post, video, infographic, social media series).
    *   Choose the appropriate distribution platform(s) for each piece of content.
5.  **Develop a Publishing Schedule:**
    *   Assign publication dates to each content piece, considering optimal timing, frequency, and any specific campaign timelines.
    *   Ensure a balanced and sustainable schedule.
6.  **Outline Key Details for Each Content Piece:**
    *   For each calendar entry, include:
        *   Topic/Title Idea
        *   Content Format
        *   Target Platform(s)
        *   Proposed Publication Date
        *   Brief Description/Key Talking Points (Optional)
        *   Target Keywords (Optional)
        *   Call to Action (Optional)
7.  **Structure the Calendar:**
    *   Organize the information into a clear calendar format (e.g., a table with columns for Date, Topic, Format, Platform, Notes).
8.  **Review & Refine:**
    *   Ensure the calendar is comprehensive, strategic, and actionable.
    *   Check for balance and variety.

## 3. Inputs Required from User/System

*   **Marketing Goals/Objectives:**
*   **Target Audience Profile:**
*   **Brand/Product/Service Information:**
*   **Content Pillars/Themes (if already defined):**
*   **Preferred Content Formats & Platforms:**
*   **Desired Publishing Frequency/Timeframe for the Calendar:** (e.g., "a one-month calendar," "3 posts per week").
*   **Any Specific Campaigns, Events, or Product Launches to Incorporate:**
*   **Keywords to Target (Optional):**
*   **Examples of Past Successful Content (Optional):**

## 4. Potential Challenges & Considerations

*   **Generating Truly Original & Engaging Ideas:** Moving beyond generic topics.
*   **Aligning with Evolving Trends:** Content calendars need to be flexible enough to adapt to current events or new trends.
*   **Resource Allocation (Beyond AI Scope):** The calendar proposes content; actual creation requires resources (writers, designers, videographers).
*   **Measuring Effectiveness (Beyond AI Scope):** Requires tracking content performance metrics.
*   **Integration with Other Marketing Activities:** Ensuring the content calendar supports broader campaigns.

## 5. Metrics for Success (How to Evaluate Output)

*   **Strategic Relevance:** Do the proposed topics and themes align with the stated goals and audience?
*   **Actionability:** Is the calendar clear and detailed enough to guide content creation?
*   **Variety & Balance:** Is there a good mix of content types and themes (if appropriate)?
*   **Feasibility:** Is the proposed schedule realistic?
*   **Completeness:** Does it cover the specified timeframe and meet frequency requirements?
*   **Clarity of Organization:** Is the calendar easy to read and understand?
*   **Potential for Engagement:** Are the topic ideas likely to resonate with the target audience?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/marketing-campaign-concept-brainstorming.md
-----------------
# Use Case Definition: Marketing Campaign Concept Brainstorming

**Objective:** To generate a diverse set of creative and strategic concepts for a marketing campaign, including potential themes, core messages, key visuals/taglines, and multi-channel activation ideas, tailored to a specific product/service, target audience, and campaign goal.

## 1. Core Requirements & Quality Indicators

*   **Creativity & Originality:**
    *   Proposes fresh, innovative, and attention-grabbing campaign concepts.
    *   Avoids generic or overused marketing ideas.
*   **Strategic Alignment:**
    *   Concepts align with the overall brand identity, product/service positioning, and specific campaign objectives (e.g., brand awareness, lead generation, product launch).
*   **Target Audience Resonance:**
    *   Ideas are likely to appeal to and engage the defined target audience.
    *   Considers audience demographics, psychographics, pain points, and aspirations.
*   **Multi-Channel Thinking (if applicable):**
    *   Suggests how concepts could be executed across various relevant marketing channels (e.g., social media, email, content marketing, paid ads, PR, events).
*   **Clarity of Concept:**
    *   Each campaign concept is clearly articulated with a core theme, message, and potential executional elements.
*   **Feasibility (High-Level):**
    *   While brainstorming encourages creativity, concepts should be within the realm of reasonable execution for the likely scale of the user/brand (AI cannot know budget, but can infer general scale).
*   **Variety of Ideas:**
    *   Presents a range of different conceptual directions, not just minor variations of one idea.

## 2. Key Stages & Processes Involved

1.  **Understand Campaign Goals, Product/Service, and Target Audience:**
    *   Clearly define what the campaign aims to achieve.
    *   Thoroughly understand the product/service being marketed, its USPs, and benefits.
    *   Analyze the target audience's characteristics, needs, and media consumption habits.
2.  **Identify Core Message/Value Proposition:**
    *   What is the single most important thing the campaign should communicate?
3.  **Brainstorm Campaign Themes/Big Ideas:**
    *   Generate overarching themes or "big ideas" that can tie the campaign together.
    *   Consider emotional hooks, problem/solution angles, or aspirational narratives.
4.  **Develop Specific Concept Elements:**
    *   For each theme, flesh out potential:
        *   **Taglines/Slogans:** Memorable phrases.
        *   **Key Visual Concepts:** Ideas for imagery or video styles.
        *   **Core Narrative/Story:** The story the campaign will tell.
        *   **Key Content Pillars:** Types of content that would support the campaign.
5.  **Suggest Multi-Channel Activation Ideas:**
    *   How could the concept be brought to life on different platforms?
    *   (e.g., social media contest, influencer collaboration, webinar series, interactive landing page).
6.  **Consider Potential Hooks & Engagement Tactics:**
    *   What will make people pay attention and interact with the campaign?
7.  **Present a Diverse Set of Concepts:**
    *   Offer several distinct campaign concepts for the user to consider.
    *   Briefly explain the rationale behind each concept.

## 3. Inputs Required from User/System

*   **Product/Service to be Marketed:**
*   **Specific Campaign Objective(s):** (e.g., launch new product, increase brand awareness, drive Q3 sales).
*   **Target Audience Profile:** Demographics, interests, pain points, online behavior.
*   **Brand Identity & Voice Guidelines:**
*   **Key Differentiators/USPs of the Product/Service:**
*   **Budget Range (Optional, High-Level):** (e.g., "small startup budget," "major national campaign" - helps AI gauge scale).
*   **Campaign Duration (Optional):**
*   **Competitor Information (Optional):** What are competitors doing?
*   **Past Campaign Performance (Optional):** What has worked/not worked before?
*   **Any Mandatory Elements or Constraints:**

## 4. Potential Challenges & Considerations

*   **True Originality:** Generating genuinely novel ideas can be hard.
*   **Practicality vs. Creativity:** Balancing imaginative concepts with what's realistically executable.
*   **Measuring Potential Impact:** It's difficult to predict which concept will be most effective without testing.
*   **Keeping Up with Trends:** Marketing trends evolve quickly.
*   **Resource Intensity:** Some creative concepts may require significant resources (budget, talent) to produce.
*   **Subjectivity:** What appeals to one person might not appeal to another.

## 5. Metrics for Success (How to Evaluate Output)

*   **Creativity & Freshness:** Do the concepts feel innovative and engaging?
*   **Strategic Fit:** Do the ideas align with the campaign goals, brand, and audience?
*   **Clarity of Presentation:** Is each concept well-explained and easy to understand?
*   **Variety:** Is there a good range of different conceptual approaches?
*   **Actionability (for the user):** Do the concepts provide a solid starting point for further development and execution?
*   **Potential for Engagement:** Are the ideas likely to capture audience attention and encourage interaction?
*   **Multi-Channel Applicability (if relevant):** Are there good ideas for executing across different platforms?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/landing-page-content-structure-copywriting.md
-----------------
# Use Case Definition: Landing Page Content Structure & Copywriting

**Objective:** To design the content structure and write persuasive copy for a landing page, aimed at converting visitors into leads or customers by focusing on a single, clear call to action (CTA).

## 1. Core Requirements & Quality Indicators

*   **Clear Value Proposition:**
    *   Immediately communicates the unique value of the offer (product, service, download, etc.).
    *   Answers "What's in it for me?" for the visitor.
*   **Compelling Headline:**
    *   Attention-grabbing, benefit-oriented, and clearly related to the ad or link that brought the visitor.
*   **Persuasive Copy:**
    *   Highlights key benefits and addresses visitor pain points or desires.
    *   Uses persuasive language and storytelling techniques.
    *   Builds trust and credibility.
*   **Strong, Singular Call to Action (CTA):**
    *   A clear, prominent, and unambiguous CTA that tells the visitor exactly what to do next.
    *   Ideally, only one primary CTA to avoid confusion.
*   **Logical Flow & Structure:**
    *   Content is organized in a way that guides the visitor smoothly towards the CTA.
    *   Sections are distinct and build upon each other (e.g., Headline -> Problem -> Solution/Benefits -> Social Proof -> Offer -> CTA).
*   **Scannability & Readability:**
    *   Uses clear headings, subheadings, bullet points, and concise paragraphs for easy scanning.
    *   Visually appealing layout (conceptual for AI, which provides text structure).
*   **Trust Elements:**
    *   May incorporate elements like testimonials, customer logos, security badges, or guarantees to build trust. (AI can suggest where these go and draft testimonial-like text if provided with source material).
*   **Mobile Responsiveness (Content Structure):**
    *   Content is structured to adapt well to mobile devices.
*   **Message Match:**
    *   The landing page message and offer should closely match the ad or link that referred the visitor.

## 2. Key Stages & Processes Involved

1.  **Define Landing Page Goal & Target Audience:**
    *   What is the single conversion goal for this page? (e.g., lead capture, free trial sign-up, product purchase, webinar registration).
    *   Who is the target visitor? What are their needs and motivations?
2.  **Understand the Offer:**
    *   Clearly define the product, service, or lead magnet being offered.
3.  **Outline Page Structure/Sections:**
    *   Plan the key sections of the landing page. A common structure includes:
        *   Headline & Sub-headline
        *   Hero Shot/Visual (conceptual)
        *   Problem/Pain Point Agitation
        *   Solution/Benefit Elaboration
        *   Key Features (translated into benefits)
        *   Social Proof (testimonials, reviews, logos)
        *   The Offer (reiteration, scarcity/urgency if applicable)
        *   Call to Action (CTA) - often repeated
        *   Optional: FAQ, Risk Reversal (guarantee)
4.  **Craft Compelling Headline & Sub-headline:**
    *   Focus on the primary benefit and create intrigue.
5.  **Write Persuasive Body Copy for Each Section:**
    *   Address the visitor's pain points.
    *   Clearly explain how the offer solves their problem or meets their need.
    *   Highlight benefits over features.
    *   Use strong, action-oriented language.
6.  **Develop a Clear and Prominent Call to Action (CTA):**
    *   Use actionable language (e.g., "Get Your Free Guide," "Start Your Trial," "Download Now").
    *   Ensure the CTA button text is clear.
7.  **Incorporate Trust Signals (Drafting Text for Them):**
    *   Write sample testimonial text or suggest where to place customer logos/awards.
8.  **Optimize for Scannability:**
    *   Use headings, subheadings, bullet points, and bold text to break up content.
9.  **Review & Refine:**
    *   Read from the visitor's perspective. Is the value clear? Is the CTA compelling?
    *   Check for clarity, conciseness, and persuasiveness.
    *   Proofread for errors.

## 3. Inputs Required from User/System

*   **Specific Offer:** What is being promoted on the landing page?
*   **Conversion Goal:** What action should visitors take?
*   **Target Audience Profile:**
*   **Unique Selling Propositions (USPs) & Key Benefits:**
*   **Source of Traffic (Optional but helpful):** (e.g., "from a Facebook ad about X," "link in an email about Y") to ensure message match.
*   **Brand Voice/Style Guidelines:**
*   **Any Existing Testimonials or Social Proof Material:**
*   **Information for a Lead Capture Form (if applicable):** What fields are needed?
*   **Competitor Landing Pages (Optional):** For reference or differentiation.

## 4. Potential Challenges & Considerations

*   **Single Focus:** Resisting the urge to include multiple offers or CTAs, which can dilute effectiveness.
*   **Clarity of Value:** Quickly conveying why the visitor should care and act.
*   **Building Trust:** Convincing visitors to provide information or make a purchase.
*   **Design & Layout (Beyond AI Scope):** Effective landing pages require strong visual design and user experience, which AI only supports through text structure.
*   **A/B Testing (Beyond AI Scope):** Landing pages are often A/B tested to optimize conversion rates. AI can provide variations for testing.
*   **Page Load Speed (Technical SEO - Beyond AI Scope):** A critical factor for landing page success.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Value Proposition & Offer:** Is it immediately obvious what's being offered and why it's valuable?
*   **Strength & Prominence of CTA:** Is the call to action clear, compelling, and easy to find?
*   **Persuasiveness of Copy:** Is the language likely to motivate visitors to convert?
*   **Logical Flow:** Does the content guide the visitor effectively towards the CTA?
*   **Audience Relevance:** Is the copy tailored to the target audience?
*   **Message Match (if source provided):** Does it align with the referring ad/link?
*   **Potential Conversion Rate (Conceptual):** Does the overall content structure and copy seem optimized for conversion?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/brand-voice-messaging-guideline-generation.md
-----------------
# Use Case Definition: Brand Voice and Messaging Guideline Generation

**Objective:** To develop a comprehensive set of guidelines that define a brand's unique voice, tone, and core messaging, ensuring consistent and recognizable communication across all platforms and materials.

## 1. Core Requirements & Quality Indicators

*   **Clarity & Definition of Voice:**
    *   Clearly articulates the brand's personality and character (e.g., playful, authoritative, empathetic, innovative).
    *   Provides descriptive adjectives and examples of the desired voice.
*   **Tone Adaptability:**
    *   Explains how the brand voice adapts to different tones for various situations and platforms (e.g., a generally playful voice might adopt a more serious tone for customer support issues).
*   **Core Messaging Pillars:**
    *   Identifies and defines the key messages the brand consistently wants to communicate about its values, mission, unique selling propositions (USPs), and value to customers.
*   **Vocabulary & Language Choices:**
    *   Suggests preferred words and phrases that align with the brand voice.
    *   Lists words or jargon to avoid.
*   **Grammar & Style Preferences:**
    *   Outlines specific grammatical or stylistic conventions (e.g., use of contractions, preferred punctuation style, active vs. passive voice preferences).
*   **Actionability & Usability:**
    *   Guidelines are practical and easy for writers, marketers, and other content creators to understand and apply.
    *   Includes "do's and don'ts" examples.
*   **Consistency:**
    *   Provides a framework that promotes consistent communication across all touchpoints.
*   **Authenticity:**
    *   The defined voice and messaging should feel authentic to the brand and resonate with its target audience.

## 2. Key Stages & Processes Involved

1.  **Understand Brand Identity & Values:**
    *   Analyze the brand's mission, vision, core values, and overall identity.
    *   Understand the brand's history and market positioning.
2.  **Define Target Audience:**
    *   Who is the brand trying to communicate with? What are their preferences and expectations?
3.  **Analyze Existing Communications (if any):**
    *   Review current marketing materials, website copy, social media posts, etc., to identify existing voice/tone elements (both positive and negative).
4.  **Identify Competitor Voices (Optional):**
    *   Briefly analyze how key competitors communicate to help define a unique brand voice.
5.  **Articulate Brand Voice Characteristics:**
    *   Choose 3-5 core adjectives that describe the desired brand voice (e.g., "Friendly, Knowledgeable, Innovative").
    *   For each adjective, provide a brief explanation and examples of how it translates into communication.
6.  **Define Tone Variations:**
    *   Explain how the core voice adapts to different tones for various contexts (e.g., supportive tone for customer service, enthusiastic tone for product launches). Provide examples.
7.  **Establish Core Messaging Pillars:**
    *   Identify the 3-5 most important messages the brand wants to consistently convey.
    *   For each pillar, craft a concise statement and provide examples of how to communicate it.
8.  **Develop Language Guidelines:**
    *   **Vocabulary:** List "words we use" and "words we avoid."
    *   **Grammar/Style:** Specify preferences (e.g., "Use active voice," "Avoid excessive jargon," "Contractions are okay for informal channels").
9.  **Create "Do's and Don'ts" Examples:**
    *   Provide concrete examples of good and bad applications of the brand voice and messaging.
10. **Structure the Guideline Document:**
    *   Organize the information into a clear, accessible document.

## 3. Inputs Required from User/System

*   **Brand Mission, Vision, and Values:**
*   **Detailed Information about Products/Services:**
*   **Target Audience Profile(s):**
*   **Brand's Unique Selling Propositions (USPs):**
*   **Desired Brand Personality/Character:** (e.g., adjectives the user associates with their brand).
*   **Examples of Existing Content (if any, to analyze or align with):**
*   **Competitor Information (Optional):**
*   **Specific Communication Goals:**
*   **Any Known Preferences or Aversions Regarding Language/Tone:**

## 4. Potential Challenges & Considerations

*   **Defining Something Subjective:** Voice and tone can be hard to codify precisely.
*   **Ensuring Authenticity:** The defined voice must feel genuine and not forced.
*   **Balancing Consistency with Flexibility:** Guidelines should allow for adaptation to different contexts without losing the core voice.
*   **Adoption by the Team:** The guidelines are only effective if consistently used by everyone creating content.
*   **Evolution of Brand:** Brand voice may need to evolve as the brand grows or market changes.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Comprehensiveness:** Are the guidelines clear, detailed, and easy for a content creator to understand and apply?
*   **Actionability:** Do they provide practical direction rather than just abstract concepts?
*   **Distinctiveness:** Does the defined voice help differentiate the brand?
*   **Consistency Potential:** Would following these guidelines likely lead to consistent brand communication?
*   **Authenticity:** Does the described voice feel true to the brand's identity (as described by the user)?
*   **Completeness:** Do the guidelines cover key aspects like voice, tone, core messages, and language choices?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/competitor-content-analysis.md
-----------------
# Use Case Definition: Competitor Content Analysis

**Objective:** To analyze the content produced by competitors (e.g., blog posts, social media, website copy, marketing materials) to identify their strategies, strengths, weaknesses, content gaps, and opportunities for differentiation.

## 1. Core Requirements & Quality Indicators

*   **Identification of Key Competitors:**
    *   Accurately identifies direct and indirect competitors relevant to the user's brand or product.
*   **Comprehensive Content Review:**
    *   Examines a representative sample of competitor content across various platforms.
*   **Identification of Content Themes & Topics:**
    *   Determines the main subjects and themes competitors are focusing on.
*   **Analysis of Content Formats & Platforms:**
    *   Identifies the types of content competitors are using (e.g., articles, videos, podcasts, infographics) and where they are distributing it.
*   **Assessment of Content Quality & Engagement:**
    *   Evaluates the perceived quality, depth, and engagement levels of competitor content.
*   **Identification of Strengths & Weaknesses:**
    *   Pinpoints what competitors are doing well and where their content may be lacking.
*   **Discovery of Content Gaps & Opportunities:**
    *   Identifies topics or angles that competitors are not covering, or areas where the user's brand can offer a unique or superior perspective.
*   **Analysis of Tone, Voice, & Messaging:**
    *   Describes the communication style and key messages of competitors.
*   **Keyword Strategy Insights (if applicable):**
    *   May infer competitor keyword strategies based on their content.
*   **Actionable Insights & Recommendations:**
    *   Provides clear takeaways and suggestions for the user's own content strategy based on the analysis.

## 2. Key Stages & Processes Involved

1.  **Define Scope & Competitors:**
    *   Clarify which brand/product the analysis is for.
    *   Identify 2-5 key competitors to analyze (user may provide these, or AI can suggest based on industry).
2.  **Gather Competitor Content Samples:**
    *   (Conceptual for AI unless tooled for web browsing/scraping) Collect links to or text from competitor blogs, main website pages, key social media profiles, etc. User may need to provide this.
3.  **Analyze Content Themes & Topics:**
    *   Review the collected content to identify recurring themes, core topics, and the overall narrative competitors are pushing.
4.  **Analyze Content Formats & Distribution Channels:**
    *   Note the types of content formats being used most frequently and effectively by each competitor.
    *   Identify their primary distribution channels.
5.  **Evaluate Content Quality, Tone, & Messaging:**
    *   Assess the depth, accuracy, and engagement of competitor content.
    *   Describe their brand voice and key marketing messages.
6.  **Identify Strengths & Weaknesses:**
    *   For each competitor, list what they do well in their content and where they seem to fall short.
7.  **Identify Content Gaps & Opportunities:**
    *   Compare competitor strategies to find underserved topics, unique angles, or areas where the user's brand can differentiate itself.
8.  **Synthesize Findings & Provide Recommendations:**
    *   Summarize the overall competitive content landscape.
    *   Provide actionable recommendations for the user's content strategy, highlighting opportunities.

## 3. Inputs Required from User/System

*   **User's Brand/Product/Service:** For context.
*   **List of Key Competitors (or industry to identify them):**
*   **Specific Aspects to Analyze (Optional):** (e.g., "focus on their blog content," "analyze their social media video strategy").
*   **URLs to Competitor Content (Highly Recommended if AI cannot browse):** Links to specific pages or profiles to analyze.
*   **User's Current Content Strategy/Goals (Optional):** Helps tailor recommendations.

## 4. Potential Challenges & Considerations

*   **Access to Competitor Content:** AI may need user to provide content if it cannot browse/scrape directly.
*   **Subjectivity in Quality Assessment:** Evaluating "good" content can be subjective.
*   **Volume of Content:** Competitors may have vast amounts of content; analysis may need to focus on representative samples.
*   **Inferring Strategy:** Competitor's explicit strategy is usually not public; analysis infers it from public content.
*   **Dynamic Landscape:** Competitor strategies change; analysis is a snapshot in time.
*   **"Dark" Content:** Content not publicly visible (e.g., email marketing, some paid ad content) is usually inaccessible for analysis.

## 5. Metrics for Success (How to Evaluate Output)

*   **Thoroughness of Analysis:** Does it cover key aspects of competitor content (themes, formats, tone, strengths, weaknesses)?
*   **Insightfulness:** Does it provide non-obvious insights into competitor strategies?
*   **Actionability of Recommendations:** Are the suggestions clear, specific, and helpful for informing the user's own content strategy?
*   **Identification of Gaps/Opportunities:** Does it successfully pinpoint areas where the user can gain an advantage?
*   **Clarity of Presentation:** Is the analysis well-organized and easy to understand?
*   **Relevance to User's Context:** Are the findings and recommendations tailored to the user's brand/product?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/marketing-sales-content-strategy-planning/sales-email-sequence-creation.md
-----------------
# Use Case Definition: Sales Email Sequence Creation

**Objective:** To design and draft a series of coordinated emails (a sequence or cadence) aimed at nurturing leads, building relationships, and guiding prospects through the sales funnel towards a conversion (e.g., a demo, a purchase, a meeting).

## 1. Core Requirements & Quality Indicators

*   **Strategic Cohesion:**
    *   Each email in the sequence builds upon the previous one and contributes to an overall narrative or goal.
    *   The sequence has a clear beginning, middle, and end, with a logical progression.
*   **Value-Driven Content:**
    *   Each email provides value to the recipient (e.g., useful information, insights, solutions to pain points, relevant resources) rather than just being a sales pitch.
*   **Personalization & Relevance:**
    *   Emails are tailored to the target audience segment, their needs, and their stage in the buyer's journey.
    *   May use personalization tokens (name, company) effectively.
*   **Clear Call to Action (CTA) per Email:**
    *   Each email typically has a specific, clear CTA appropriate for that stage of the sequence.
    *   CTAs gradually escalate in commitment if appropriate.
*   **Engaging Subject Lines & Copy:**
    *   Subject lines are compelling to encourage opens.
    *   Email copy is engaging, persuasive, and easy to read.
*   **Appropriate Tone & Brand Voice:**
    *   Maintains consistency with the brand's voice and values.
    *   Tone is appropriate for sales communication (e.g., helpful, professional, confident).
*   **Optimal Timing & Frequency (Conceptual):**
    *   While AI drafts content, the sequence design should implicitly consider appropriate timing between emails (though actual scheduling is external).
*   **Mobile-Friendly Structure:**
    *   Content is structured for easy reading on mobile devices (short paragraphs, clear formatting).

## 2. Key Stages & Processes Involved

1.  **Define Sequence Goal & Target Audience:**
    *   What is the ultimate objective of the email sequence? (e.g., book a demo, drive trial sign-ups, nurture cold leads).
    *   Who is the specific audience segment for this sequence? What are their pain points and motivations?
2.  **Map Out the Buyer's Journey/Nurturing Stages:**
    *   Consider the different stages the prospect will go through (e.g., awareness, consideration, decision).
    *   Align email content with these stages.
3.  **Outline the Email Sequence (Number of Emails & Purpose of Each):**
    *   Determine the number of emails in the sequence (e.g., 3-7 emails).
    *   Define the specific purpose and core message for each email in the sequence.
    *   Example:
        *   Email 1: Introduction & Value Proposition (addressing a pain point).
        *   Email 2: Share a relevant resource/insight.
        *   Email 3: Case study/social proof.
        *   Email 4: Address common objections / Offer a low-commitment CTA.
        *   Email 5: Direct CTA / Last chance offer.
4.  **Draft Content for Each Email:**
    *   **Subject Line:** Craft a compelling subject line for each email.
    *   **Opening:** Personalize and grab attention.
    *   **Body:** Deliver value, educate, build rapport, and address pain points.
    *   **Call to Action (CTA):** Include a clear, specific CTA.
    *   **Signature:** Professional closing.
5.  **Incorporate Personalization Elements:**
    *   Identify where personalization tokens (e.g., `{{firstName}}`, `{{companyName}}`) should be used.
6.  **Consider Logic/Branching (Conceptual):**
    *   For more advanced sequences, consider if different paths are needed based on recipient actions (e.g., if they click a link in Email 2). AI can draft variations for these branches.
7.  **Review & Refine the Entire Sequence:**
    *   Read through the whole sequence to ensure logical flow and consistency.
    *   Check each email for clarity, persuasiveness, and accuracy.
    *   Proofread for errors.

## 3. Inputs Required from User/System

*   **Product/Service Being Sold:**
*   **Target Audience/Lead Segment:** (e.g., cold leads, MQLs, specific industry).
*   **Overall Goal of the Email Sequence:**
*   **Key Value Propositions & Selling Points:**
*   **Typical Customer Pain Points:**
*   **Desired Call to Action for the Final Email (and intermediate CTAs if any):**
*   **Number of Emails Desired in the Sequence (Approximate):**
*   **Brand Voice/Style Guidelines:**
*   **Any Specific Content/Resources to Include:** (e.g., links to blog posts, white papers, case studies).
*   **Information about Previous Touchpoints (if any):**

## 4. Potential Challenges & Considerations

*   **Avoiding Spamminess:** Sequences must provide value and not just repeatedly pitch.
*   **Maintaining Engagement Over Multiple Emails:** Keeping recipients interested.
*   **Timing Between Emails:** Sending too frequently or infrequently can be detrimental (AI doesn't schedule, but design should consider this).
*   **Personalization at Scale:** Ensuring personalization feels genuine.
*   **Tracking & Optimization (Beyond AI Scope):** Requires email marketing platform to track opens, clicks, replies, and conversions to optimize the sequence.
*   **Compliance:** Adhering to anti-spam laws (e.g., CAN-SPAM, GDPR) regarding opt-outs and consent.

## 5. Metrics for Success (How to Evaluate Output)

*   **Strategic Cohesion:** Does the sequence tell a coherent story and logically guide the prospect?
*   **Value Proposition per Email:** Does each email offer something of value?
*   **Clarity & Persuasiveness of Copy:** Is the language engaging and motivating?
*   **Strength & Appropriateness of CTAs:** Are the calls to action clear and relevant to each stage?
*   **Audience Targeting:** Is the content well-suited for the defined audience?
*   **Brand Consistency:** Does it align with the brand voice?
*   **Potential for Nurturing:** Is the sequence likely to build a relationship and move leads forward?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/resume-cv-cover-letter-drafting.md
-----------------
# Use Case Definition: Resume/CV & Cover Letter Drafting

**Objective:** To assist users in drafting or refining resumes/CVs and cover letters, tailored to specific job applications or general career goals, by organizing information, suggesting impactful phrasing, and ensuring professional formatting.

## 1. Core Requirements & Quality Indicators

*   **For Resumes/CVs:**
    *   **Clear & Concise Information:** Presents skills, experience, and education in an easy-to-scan format.
    *   **Reverse Chronological Order (Usually):** Work experience and education are typically listed most recent first.
    *   **Action-Oriented Language:** Uses strong action verbs to describe accomplishments and responsibilities (e.g., "Managed," "Developed," "Led").
    *   **Quantifiable Achievements:** Includes specific metrics or results where possible (e.g., "Increased sales by 15%," "Managed a team of 5").
    *   **Tailored to Job (if specified):** Highlights skills and experiences most relevant to a specific job description.
    *   **Professional Formatting:** Clean, consistent, and easy-to-read layout. Common sections: Contact Info, Summary/Objective, Experience, Education, Skills.
    *   **Keyword Optimization (Conceptual):** May suggest incorporating keywords relevant to the industry or job description for Applicant Tracking Systems (ATS).
*   **For Cover Letters:**
    *   **Addresses Specific Job/Company:** Tailored to the position and organization being applied to.
    *   **Clear Statement of Intent:** Expresses interest in the specific role.
    *   **Highlights Relevant Skills/Experience:** Connects the applicant's qualifications to the job requirements.
    *   **Demonstrates Enthusiasm & Fit:** Shows genuine interest in the company and how the applicant aligns with its culture/mission.
    *   **Professional Tone & Formatting:** Standard business letter format.
    *   **Concise & Persuasive:** Typically 3-4 paragraphs.
    *   **Call to Action:** Expresses desire for an interview.
    *   **Error-Free:** Perfect grammar and spelling.

## 2. Key Stages & Processes Involved

*   **For Resume/CV Drafting/Refinement:**
    1.  **Gather User Information:** Collect details on work experience (job titles, companies, dates, responsibilities, achievements), education, skills, projects, certifications, etc.
    2.  **Identify Target Job/Industry (if applicable):**
    3.  **Choose Resume Format/Template (Conceptual):** (e.g., chronological, functional, combination). AI will generate text fitting a standard structure.
    4.  **Draft/Refine Each Section:**
        *   **Contact Information:**
        *   **Summary/Objective:** Craft a concise overview.
        *   **Experience:** For each role, write bullet points using action verbs and quantifying achievements.
        *   **Education:** List degrees, institutions, graduation dates.
        *   **Skills:** Categorize technical, soft, and language skills.
    5.  **Tailor to Job Description (if provided):** Emphasize relevant keywords and experiences.
    6.  **Review for Clarity, Impact, and Errors:**
*   **For Cover Letter Drafting/Refinement:**
    1.  **Identify Target Job & Company:**
    2.  **Research Company & Role (User or AI via search):** Understand their mission, values, and specific needs for the role.
    3.  **Outline Letter Structure:**
        *   **Introduction:** State the position you're applying for and where you saw it advertised. Express enthusiasm.
        *   **Body Paragraph(s):** Highlight 2-3 key qualifications and experiences that match the job requirements. Provide specific examples. Show how you can solve their problems or contribute to their goals.
        *   **Company Fit/Enthusiasm Paragraph:** Explain why you're interested in *this specific company* and role.
        *   **Conclusion:** Reiterate interest, state availability for an interview, and thank the reader.
    4.  **Draft the Letter:** Write in a professional and engaging tone.
    5.  **Customize & Personalize:** Ensure it doesn't sound like a generic template.
    6.  **Review for Persuasiveness, Clarity, and Errors:**

## 3. Inputs Required from User/System

*   **For Resumes/CVs:**
    *   **User's Career History:** Job titles, company names, employment dates, key responsibilities and accomplishments for each role.
    *   **Education Details:** Degrees, institutions, graduation dates, relevant coursework or honors.
    *   **Skills List:** Technical skills, software proficiency, soft skills, languages.
    *   **Optional Sections:** Projects, publications, volunteer experience, certifications.
    *   **Target Job Description (Highly Recommended for tailoring):**
    *   **Career Objective or Type of Role Sought:**
*   **For Cover Letters:**
    *   **User's Resume/CV (for reference):**
    *   **Target Job Description (Essential):**
    *   **Company Name & Details (if known):**
    *   **Contact Person for Application (if known):**
    *   **Key Skills/Experiences User Wants to Emphasize:**
    *   **Any Specific Points User Wants to Address:**

## 4. Potential Challenges & Considerations

*   **Generic Content:** AI might produce overly generic phrasing if not given enough specific detail or guidance.
*   **Quantifying Achievements:** Users often struggle to quantify their accomplishments; AI can prompt for this but can't invent data.
*   **ATS Compatibility:** While AI can suggest keywords, true ATS optimization involves many factors.
*   **Authenticity of Voice (Cover Letter):** Ensuring the cover letter sounds genuine and reflects the user's personality.
*   **Fact vs. Embellishment:** AI must rely on user-provided information; it cannot verify experiences.
*   **Cultural Nuances in Job Applications:** Different regions/industries may have slightly different expectations.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Professionalism:** Is the language clear, professional, and error-free?
*   **Completeness:** Does it include all standard and relevant sections based on user input?
*   **Impact of Language:** Are action verbs used effectively? Are achievements highlighted?
*   **Tailoring (if job description provided):** Does it effectively align the user's experience with the job requirements?
*   **Persuasiveness (Cover Letter):** Does it make a compelling case for the applicant?
*   **Formatting (Conceptual):** Is the generated text structured in a way that would translate to a clean, professional document?
*   **Usefulness as a Draft:** Does it provide a strong starting point that the user can refine and finalize?

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/translation-localization-text.md
-----------------
# Use Case Definition: Translation & Localization of Text

**Objective:** To translate text from a source language to a target language, and optionally, to localize the content by adapting it to the cultural, linguistic, and contextual nuances of the target audience/region.

## 1. Core Requirements & Quality Indicators

*   **For Translation:**
    *   **Accuracy:** The meaning of the source text is faithfully and accurately conveyed in the target language.
    *   **Fluency & Naturalness:** The translated text reads smoothly and naturally in the target language, not like a literal, word-for-word translation.
    *   **Grammatical Correctness:** Adheres to the grammatical rules of the target language.
    *   **Consistency of Terminology:** Key terms are translated consistently throughout the text.
*   **For Localization (in addition to translation quality):**
    *   **Cultural Appropriateness:** Content (text, examples, idioms, references) is adapted to be culturally relevant and appropriate for the target locale. Avoids offensive or confusing content.
    *   **Format Adaptation:** Dates, times, numbers, currencies, units of measurement, addresses, and phone numbers are formatted according to local conventions.
    *   **Tone & Style Adaptation:** The tone and style may be adjusted to resonate better with the target audience.
    *   **Legal & Regulatory Compliance (Conceptual):** Localized content should conceptually align with local regulations (actual compliance requires expert review).
    *   **Imagery & Color Symbolism (Conceptual for text):** If describing visuals, considers local interpretations of images and colors.

## 2. Key Stages & Processes Involved

1.  **Understand Source Text & Context:**
    *   Read and fully comprehend the source text, including its purpose, intended audience, and any specific nuances.
2.  **Identify Target Language & Locale:**
    *   Confirm the specific target language (e.g., Spanish) and locale/region (e.g., Spain vs. Mexico), as this impacts vocabulary, idioms, and cultural references.
3.  **Translate Core Meaning:**
    *   Translate the text from the source language to the target language, focusing on conveying the original meaning accurately.
4.  **Adapt for Fluency & Naturalness:**
    *   Refine the translation to ensure it sounds natural and idiomatic in the target language. This may involve restructuring sentences or choosing different vocabulary than a literal translation.
5.  **Localize Content (if requested/applicable):**
    *   **Cultural Adaptation:** Review for cultural references, idioms, humor, or examples that might not translate well or could be misunderstood/offensive. Adapt or replace them with culturally appropriate equivalents.
    *   **Format Conversions:** Adjust dates, times, numbers, currencies, units, etc., to local standards.
    *   **Tone Adjustment:** Modify the tone if necessary to suit the target culture's communication style.
    *   **Legal/Regulatory Scan (Conceptual):** Identify any content that might conflict with general knowledge of local laws or customs (AI cannot give legal advice).
6.  **Review & Edit:**
    *   Proofread the translated and localized text for grammatical errors, spelling mistakes, and typos in the target language.
    *   Check for consistency in terminology and style.
    *   Ensure accuracy against the source text.
    *   (Ideally) Have a native speaker of the target language review the output.

## 3. Inputs Required from User/System

*   **Source Text to be Translated/Localized:**
*   **Source Language:**
*   **Target Language(s) & Specific Locale(s):** (e.g., "French (Canada)," "Portuguese (Brazil)").
*   **Purpose of the Content & Target Audience in the New Locale:**
*   **Glossary of Key Terms & Their Approved Translations (if available):**
*   **Style Guide for the Target Language/Locale (if available):**
*   **Specific Elements to Pay Attention to for Localization (Optional):** (e.g., "ensure all measurements are metric," "avoid American sports analogies").
*   **Level of Formality Required for Target Language (Optional):**

## 4. Potential Challenges & Considerations

*   **Idioms & Cultural Nuances:** Direct translation of idioms often fails. Deep cultural understanding is needed for effective localization.
*   **Ambiguity in Source Text:** Unclear source text leads to difficult translation choices.
*   **Technical Terminology:** Ensuring accurate and consistent translation of specialized terms.
*   **Maintaining Tone & Style:** Capturing the original author's voice and intent in another language.
*   **Length Changes:** Translated text can be significantly longer or shorter than the source, impacting layout if for a fixed space.
*   **Untranslatable Concepts:** Some concepts or words may not have direct equivalents.
*   **Quality Control:** Ensuring high-quality translation and localization often requires human review by native speakers and subject matter experts.

## 5. Metrics for Success (How to Evaluate Output)

*   **Accuracy of Meaning:** Is the core message of the source text preserved?
*   **Fluency in Target Language:** Does it read naturally and smoothly?
*   **Grammatical Correctness in Target Language:**
*   **Cultural Appropriateness (for localization):** Is it well-adapted for the target locale?
*   **Correctness of Localized Formats:** (Dates, numbers, currency).
*   **Consistency:** Are terms and style consistent?
*   **Completeness:** Has all relevant source text been translated and localized?
*   **Adherence to Glossaries/Style Guides (if provided):**

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/persona-development-chatbots-virtual-assistants.md
-----------------
# Use Case Definition: Persona Development for Chatbots/Virtual Assistants

**Objective:** To define and document a distinct persona for a chatbot or virtual assistant, including its name, personality traits, communication style, backstory (optional), and example dialogue, to ensure consistent and engaging user interactions.

## 1. Core Requirements & Quality Indicators

*   **Consistent Personality:**
    *   The defined traits (e.g., friendly, formal, witty, empathetic, professional) are consistent and clearly articulated.
*   **Appropriate Tone of Voice:**
    *   The communication style (vocabulary, sentence structure, use of humor/emoji) aligns with the persona and target audience.
*   **Believability & Relatability (for the context):**
    *   The persona feels coherent and appropriate for its intended role and user base.
*   **Clear Guidelines for Interaction:**
    *   Provides guidance on how the chatbot should respond in various situations (e.g., handling errors, expressing uncertainty, greeting users).
*   **Example Dialogue:**
    *   Includes sample interactions that demonstrate the persona in action.
*   **Uniqueness (if desired):**
    *   The persona has distinct characteristics that differentiate it.
*   **Alignment with Brand Identity (if applicable):**
    *   The chatbot's persona reflects the brand's values and image.
*   **Defines Boundaries:**
    *   May include what the persona should *not* say or do (e.g., avoid controversial topics, not give medical advice).

## 2. Key Stages & Processes Involved

1.  **Define Purpose & Role of Chatbot/Assistant:**
    *   What tasks will it perform? What is its primary function (e.g., customer support, information retrieval, task automation, entertainment)?
2.  **Identify Target Audience:**
    *   Who will be interacting with the chatbot? (Demographics, technical proficiency, expectations).
3.  **Brainstorm Core Personality Traits:**
    *   Choose 3-5 key adjectives to describe the persona (e.g., helpful, patient, humorous, efficient, knowledgeable).
4.  **Develop Communication Style & Tone:**
    *   **Vocabulary:** Simple or sophisticated? Formal or informal? Use of slang or jargon?
    *   **Sentence Structure:** Short and direct, or more elaborate?
    *   **Use of Emojis/Humor:** Appropriate or not?
    *   **Level of Formality:** (e.g., addressing users by first name vs. title).
5.  **Create a Name & Backstory (Optional):**
    *   A name can make the persona more relatable.
    *   A brief, fictional backstory can help define its character (but should not be overused in interactions).
6.  **Write Example Dialogue/Interaction Scenarios:**
    *   Show how the persona would respond to common user queries, greetings, expressions of frustration, requests for help, etc.
    *   Include examples of how it handles errors or situations where it doesn't know the answer.
7.  **Define "Do's and Don'ts":**
    *   List specific behaviors or types of responses that align with or contradict the persona.
8.  **Document the Persona Profile:**
    *   Compile all elements into a clear document that can be used by developers and content creators.
9.  **Refine & Iterate:**
    *   Review the persona for consistency and appropriateness. (Conceptual: Test with sample interactions).

## 3. Inputs Required from User/System

*   **Purpose/Function of the Chatbot/Virtual Assistant:**
*   **Target Audience Profile:**
*   **Brand Identity/Values (if applicable):**
*   **Desired Personality Traits (Keywords or Description):** (e.g., "friendly and slightly quirky," "highly professional and efficient").
*   **Key Tasks the Chatbot Will Handle:**
*   **Examples of Interactions to Script (Optional):**
*   **Any Specific Name Ideas or Constraints (Optional):**
*   **Things the Chatbot Should Absolutely Avoid Saying/Doing (Optional):**

## 4. Potential Challenges & Considerations

*   **Consistency:** Ensuring the persona is maintained across all possible interaction paths and by all developers/content creators working on it.
*   **Avoiding the "Uncanny Valley":** Making the persona relatable without trying to make it seem too human, which can be off-putting.
*   **Repetitiveness:** Designing a persona that doesn't become annoying or predictable over time.
*   **Handling Difficult Interactions:** Defining how a persona (e.g., a cheerful one) should respond to angry or abusive users.
*   **Scope of Knowledge:** The persona should align with the chatbot's actual capabilities (e.g., not sounding overly confident if its knowledge is limited).
*   **Evolution:** Personas may need to evolve as the chatbot's capabilities or the brand changes.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity & Detail of Persona Definition:** Is the persona well-described and easy for a team to understand and implement?
*   **Consistency of Traits & Tone:** Are the described personality and communication style coherent?
*   **Helpfulness of Example Dialogue:** Do the examples effectively illustrate the persona in action?
*   **Appropriateness for Purpose & Audience:** Does the persona seem suitable for the chatbot's role and its users?
*   **Actionability for Developers/Writers:** Can this persona guide the development of chatbot responses and behaviors?
*   **Uniqueness & Memorability (if desired):**
*   **Alignment with Brand (if applicable):**

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/recipe-generation-modification.md
-----------------
# Use Case Definition: Recipe Generation & Modification

**Objective:** To generate new recipes based on specified ingredients, cuisine type, dietary restrictions, or desired dish, or to modify existing recipes (e.g., scale ingredients, substitute ingredients, adapt for dietary needs).

## 1. Core Requirements & Quality Indicators

*   **Clear & Accurate Ingredient List:**
    *   Lists all necessary ingredients with precise quantities and units.
*   **Step-by-Step Instructions:**
    *   Provides clear, sequential, and actionable instructions for preparing the dish.
    *   Steps are easy to follow.
*   **Correct Proportions & Ratios (for Generation):**
    *   Generated recipes have ingredient ratios that are generally sound for the type of dish.
*   **Plausible Substitutions & Modifications:**
    *   When modifying, suggested substitutions are appropriate and likely to yield a good result.
    *   Adjustments for dietary needs (e.g., gluten-free, vegan) are sensible.
*   **Consideration of Cooking Times & Temperatures:**
    *   Provides reasonable estimates for cooking/baking times and temperatures.
*   **Expected Outcome Description:**
    *   May describe the appearance, texture, or flavor of the finished dish.
*   **Serving Size & Prep/Cook Time Estimates:**
    *   Often includes estimated preparation time, cooking time, and number of servings.
*   **Safety Notes (if applicable):**
    *   May include basic food safety reminders (e.g., "cook chicken thoroughly").

## 2. Key Stages & Processes Involved

*   **For Recipe Generation:**
    1.  **Understand User Request:**
        *   What kind of dish? (e.g., "chicken stir-fry," "chocolate chip cookies").
        *   Any key ingredients to use or avoid?
        *   Cuisine type? (e.g., Italian, Mexican, Thai).
        *   Dietary restrictions? (e.g., vegetarian, gluten-free, low-carb).
        *   Desired difficulty level or cooking time?
    2.  **Brainstorm Core Ingredients & Flavor Profile:**
    3.  **Determine Basic Method/Technique:** (e.g., sauté, bake, roast, blend).
    4.  **Develop Ingredient List with Quantities:**
    5.  **Write Step-by-Step Instructions:**
    6.  **Add Prep Time, Cook Time, Serving Size:**
    7.  **Include Optional Tips or Variations:**
*   **For Recipe Modification:**
    1.  **Understand Existing Recipe & Desired Modification:**
        *   What is the original recipe?
        *   What change is needed? (e.g., "make it vegan," "double the servings," "substitute X for Y," "reduce sugar").
    2.  **Analyze Impact of Modification:**
        *   How will the change affect ingredient ratios, cooking times, texture, or flavor?
    3.  **Adjust Ingredient Quantities (for scaling):**
    4.  **Suggest Ingredient Substitutions (for dietary/preference changes):**
        *   Recommend appropriate alternatives (e.g., flax egg for egg, almond flour for wheat flour).
        *   Note potential impact of substitutions.
    5.  **Modify Instructions as Needed:**
        *   Adjust cooking times, temperatures, or steps based on the modification.
    6.  **Provide the Modified Recipe:**

## 3. Inputs Required from User/System

*   **For Recipe Generation:**
    *   **Desired Dish Type or Key Ingredients:**
    *   **Cuisine Style (Optional):**
    *   **Dietary Restrictions/Preferences (Optional):** (e.g., vegan, gluten-free, nut-free).
    *   **Available Cooking Equipment (Optional):** (e.g., "oven-only recipe," "no special equipment").
    *   **Desired Difficulty Level or Time Commitment (Optional):**
*   **For Recipe Modification:**
    *   **Original Recipe:** (Ingredients and instructions).
    *   **Specific Modification Requested:** (e.g., "scale for 8 servings," "make it dairy-free," "replace sugar with maple syrup").

## 4. Potential Challenges & Considerations

*   **Balancing Flavors & Textures:** Creating or modifying recipes that result in a palatable dish.
*   **Accuracy of Cooking Times/Temperatures:** These can vary based on equipment and altitude. AI provides general estimates.
*   **Ingredient Availability:** Some generated ingredients might be uncommon.
*   **Complexity of Substitutions:** Some ingredients are harder to substitute effectively than others (e.g., in baking).
*   **Food Science (Beyond AI Scope):** Deep understanding of chemical reactions in cooking is complex. AI relies on patterns from existing recipes.
*   **Subjectivity of Taste:** What one person enjoys, another may not.

## 5. Metrics for Success (How to Evaluate Output)

*   **Plausibility & Coherence:** Does the generated/modified recipe make sense? Are the ingredients and steps logical for the dish type?
*   **Clarity of Instructions:** Are the steps easy to follow?
*   **Completeness of Ingredient List:** Are all necessary ingredients listed with reasonable quantities?
*   **Appropriateness of Modifications/Substitutions:** If modifying, are the changes sensible?
*   **Helpfulness of Tips/Variations (if included):**
*   **Likelihood of Success (Conceptual):** If someone followed this recipe, would they likely achieve a good result (assuming basic cooking skills)?
*   **Adherence to Dietary/Cuisine Requests:**

-----------------

File: ClineAGI/prompts/use_cases/content-creation-and-management/specialized-creative-content-forms/speech-monologue-writing.md
-----------------
# Use Case Definition: Speech & Monologue Writing

**Objective:** To draft a compelling and well-structured speech or monologue for a specific occasion, audience, and purpose, conveying key messages effectively and engagingly.

## 1. Core Requirements & Quality Indicators

*   **Clear Purpose & Key Message(s):**
    *   The speech/monologue has a defined objective (e.g., to inform, persuade, inspire, entertain, commemorate).
    *   Core messages are clearly articulated.
*   **Audience Appropriateness:**
    *   Tone, language, style, and content are tailored to the intended audience.
*   **Logical Structure & Flow:**
    *   Organized with a clear introduction, body, and conclusion.
    *   Ideas progress logically, and transitions are smooth.
*   **Engaging Content:**
    *   Uses storytelling, anecdotes, rhetorical questions, humor (if appropriate), or other techniques to capture and maintain audience interest.
*   **Persuasiveness (if applicable):**
    *   If the goal is to persuade, arguments are well-supported and compelling.
*   **Emotional Connection (if applicable):**
    *   Evokes the desired emotional response from the audience.
*   **Clarity & Conciseness:**
    *   Language is clear, direct, and easy to follow when spoken.
    *   Avoids unnecessary jargon or overly complex sentences.
*   **Appropriate Length/Timing:**
    *   The length is suitable for the allocated speaking time (AI can be given a target duration, and word count can be estimated for speaking pace).
*   **Memorable Opening & Closing:**
    *   Starts strong to grab attention and ends with impact.
*   **Natural Speaking Rhythm:**
    *   Written in a way that sounds natural when spoken, not like a written essay.

## 2. Key Stages & Processes Involved

1.  **Define Purpose, Audience, Occasion, and Key Message(s):**
    *   Why is this speech/monologue being given? Who is listening? What is the context? What are the most important points to convey?
2.  **Brainstorm Core Ideas & Supporting Material:**
    *   Gather relevant information, stories, examples, data, or quotes.
3.  **Outline the Structure:**
    *   **Introduction:** Hook, introduce self/topic, state purpose/thesis.
    *   **Body:** Develop 2-5 main points, each supported by evidence, examples, or stories. Organize logically (e.g., chronologically, thematically, problem-solution).
    *   **Conclusion:** Summarize key messages, restate thesis in a new way, provide a call to action (if any), end with a memorable closing statement.
4.  **Draft the Content for Each Section:**
    *   Write in a conversational, spoken style.
    *   Use rhetorical devices effectively (e.g., repetition, parallelism, metaphor).
    *   Incorporate transitions between points.
5.  **Craft Engaging Opening & Memorable Closing:**
6.  **Consider Delivery Cues (Optional):**
    *   May suggest pauses, emphasis, or tone shifts for the speaker (though actual delivery is up to the speaker).
7.  **Refine for Clarity, Impact, and Flow:**
    *   Read the draft aloud to check for rhythm, pacing, and natural language.
    *   Ensure arguments are logical and messages are clear.
    *   Cut unnecessary words or sections to fit time constraints.
8.  **Time the Speech (Conceptual for AI):**
    *   Estimate speaking time based on word count (average speaking rate is ~120-150 words per minute).

## 3. Inputs Required from User/System

*   **Topic of the Speech/Monologue:**
*   **Purpose/Objective:** (e.g., wedding toast, keynote address, product launch, dramatic monologue for a character).
*   **Target Audience:** (Size, demographics, prior knowledge, relationship to speaker).
*   **Occasion/Context:**
*   **Key Messages or Points to Convey:**
*   **Desired Tone:** (e.g., humorous, serious, inspirational, formal, informal).
*   **Approximate Desired Length or Speaking Time:**
*   **Specific Anecdotes, Data, or Quotes to Include (Optional):**
*   **Information about the Speaker (if relevant, e.g., for a personal story):**
*   **Call to Action (if any):**

## 4. Potential Challenges & Considerations

*   **Audience Engagement:** Crafting content that truly resonates with and holds the attention of the specific audience.
*   **Authenticity of Voice:** Ensuring the speech sounds natural for the intended speaker.
*   **Balancing Information with Emotion/Entertainment:**
*   **Timing:** Accurately writing to a specific time limit.
*   **Delivery (Beyond AI Scope):** The effectiveness of a speech heavily depends on the speaker's delivery skills.
*   **Cultural Sensitivity:** Ensuring language and examples are appropriate for a diverse audience.

## 5. Metrics for Success (How to Evaluate Output)

*   **Clarity of Purpose & Message:** Is it clear what the speech/monologue is about and what it aims to achieve?
*   **Audience Appropriateness:** Is the tone, language, and content suitable for the intended listeners?
*   **Logical Structure & Flow:** Is it well-organized and easy to follow?
*   **Engagement Potential:** Is the content interesting, persuasive, or emotionally resonant as intended?
*   **Impact of Opening & Closing:**
*   **Natural Spoken Language:** Does it read like it's meant to be spoken?
*   **Adherence to Time Constraints (based on word count):**
*   **Completeness:** Does it adequately cover the topic for the intended purpose?

-----------------

File: ClineAGI/prompts/project_types/README.md
-----------------
# Project Types Directory Overview

## 1. Purpose Statement

This directory, `prompts/project_types/`, is intended to hold detailed prompt files and guidance specific to different kinds of software projects that Cline might work on (e.g., web server applications, data science projects, CLI tools, mobile apps, etc.). These prompts help Cline understand the common structures, technologies, best practices, and deliverables associated with each project type.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Project Type Guides (Markdown `.md`):** Each file should focus on a specific type of software project.
    *   Content should include:
        *   Typical tech stacks and frameworks.
        *   Common directory structures and file organization.
        *   Key development phases and considerations.
        *   Best practices for that project type.
        *   Examples of common tasks or deliverables.
        *   Prompts or prompt snippets tailored to that project type.
*   **Naming Convention:** Files should be named descriptively based on the project type (e.g., `web-server-project.md`, `data-science-project.md`).

### Content That Does NOT Belong Here:
*   **General Workflow Definitions:** These belong in `prompts/workflows/` or `prompts/core_workflows/`.
*   **Specific Use Case Guides:** While a project type guide might reference use cases, the detailed use case prompts belong in `prompts/use_cases/`.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.

## 3. Key Files Overview

As of the last update, this directory is empty. It is expected to be populated with guides for various project archetypes.

*Example (Future Files):*
*   `web-server-project.md`
*   `data-science-project.md`
*   `cli-tool-project.md`
*   `mobile-app-project.md`

*(This list will be updated as project type guides are created.)*

## 4. Usage & Maintenance

*   When Cline initializes a new user project or switches context to an existing one, it can consult the relevant guide in this directory (if available) to better understand the project's nature and requirements.
*   The `.clinerules/100_clineagi_projects/100-06_project-type-specific-guidance.md` rule outlines how Cline incorporates this type-specific guidance.
*   The `prompt_inventory.yaml` file should include entries for these project type guides to make them discoverable.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/shared_templates/README.md
-----------------
# Shared Templates Directory Overview

## 1. Purpose Statement

This directory, `prompts/shared_templates/`, is designed to store reusable prompt templates for common document types or content structures that Cline, the AI Software Engineering Assistant, might need to generate. These templates provide a standardized starting point and ensure consistency for frequently created artifacts.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Reusable Document Templates (Markdown `.md`):** Files containing boilerplate structures, section outlines, or placeholder content for various types of documents.
    *   Examples: Templates for API documentation sections, standard email formats, report outlines, meeting agenda structures.
*   **Subdirectories for Categorization:** Templates can be organized into subdirectories based on their domain or type (e.g., `api-documentation/`, `emails/`).
*   **Naming Convention:** Files should be named descriptively based on the template's purpose (e.g., `endpoint-description-template.md`, `status-update-email-template.md`).

### Content That Does NOT Belong Here:
*   **Complete Use Case Guides:** While a template might be *used by* a use case, the full prompt guiding the entire use case belongs in `prompts/use_cases/`.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.
*   **Specific Output Patterns:** While templates define structure, more detailed output formatting rules belong in `prompts/output_patterns/`.

## 3. Key Subdirectories & Files Overview

As of the last update, this directory contains the following key subdirectories:

*   **`api-documentation/`**: Contains templates related to generating API documentation.
*   **`emails/`**: Contains templates for various types of email communications.

*(This list and the contents of subdirectories should be kept current as templates are added, modified, or reorganized.)*

## 4. Usage & Maintenance

*   Cline can reference these templates when a task involves generating a document of a known type.
*   These templates help ensure consistency, completeness, and efficiency in document creation.
*   The `prompt_inventory.yaml` file should include entries for these shared templates to make them discoverable and usable.
*   This `README.md` should be updated if the structure or key subdirectories/files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/merged_patterns/996-01_analyze-content.md
-----------------
---
description: Merged pattern for analyzing various types of content.
author: Cline (AI Assistant)
version: 1.0
tags: ["merged-pattern", "analysis"]
---

# Analyze Content

## IDENTITY and PURPOSE

You are an expert content analyzer, capable of dissecting various content types (text, reports, presentations, etc.) to extract key information, evaluate quality, and provide insightful assessments. Your purpose is to provide structured analysis that helps users understand the nuances and implications of the content.

## GOAL

Provide a detailed analysis of input content, tailored to the content type and desired focus.

## STEPS

1. Fully consume and understand the input content.
2. Identify the type of content (text, report, presentation, etc.) and the user's request for the analysis focus and format.
3. Apply relevant analytical frameworks or criteria based on the content type and focus (e.g., evaluating claims, assessing risk, critiquing prose, analyzing technical impact).
4. Extract key findings, insights, strengths, weaknesses, and other relevant details.
5. Synthesize the extracted information into the requested analysis format, adhering to specified output sections and constraints.

## OUTPUT SECTIONS

- **SUMMARY:** A brief overview of the content and the analysis.
- **KEY FINDINGS / INSIGHTS:** A list of the most important discoveries or insights from the analysis.
- **STRENGTHS:** Highlights the positive aspects of the content or system being analyzed.
- **WEAKNESSES / CONCERNS:** Identifies areas for improvement, risks, or potential issues.
- **RECOMMENDATIONS:** Provides actionable suggestions based on the analysis.
- **(Optional - depending on content type):** Additional specific sections relevant to the content being analyzed (e.g., RISKS, ETHICAL CONSIDERATIONS, STUDY QUALITY, etc.).

## OUTPUT INSTRUCTIONS

- Output in Markdown format.
- Use headings for each section.
- Use bullet points for lists within sections (KEY FINDINGS / INSIGHTS, STRENGTHS, WEAKNESSES / CONCERNS, RECOMMENDATIONS, and optional lists).
- Adhere to any specific length constraints mentioned in the user's request or implied by the source patterns (e.g., word limits per bullet point or section).
- Ensure the analysis is clear, objective, and well-supported by the content.
- Do not include warnings or notes; only output the requested sections.

## Use Cases

This merged pattern can be used for the following types of analysis tasks:

- Analyzing claims and arguments, including identifying logical fallacies.
- Evaluating the quality of written content (prose, academic writing).
- Assessing risks (third-party vendors, threat models, network landscapes).
- Analyzing technical impact and ethical considerations of technology projects.
- Reviewing presentations and identifying underlying messages.
- Analyzing malware and extracting indicators of compromise.
- Evaluating research papers for scientific rigor and findings.
- Analyzing user feedback for products.
- Comparing and contrasting different items or concepts.
- Analyzing historical military strategies.
- Analyzing email headers for security information.
- Analyzing log files for patterns and issues.
- Analyzing political candidates and propositions.
- Analyzing interviewer techniques.
- Analyzing spiritual texts.
- Analyzing sales call transcripts.
- Analyzing patents for novelty and inventive step.
- Analyzing incident reports for key details and recommendations.
- Analyzing thinking patterns and identifying potential errors.

## Output Instructions Synthesis

Based on the individual analysis patterns, the output should generally adhere to these instructions:

- Output should be in Markdown format, utilizing headings and bullet points for structure.
- Specific sections should be included as defined in the "OUTPUT SECTIONS" above, with optional sections included as relevant to the specific analysis task.
- Adhere to any specified length constraints for the overall analysis, sections, or individual list items.
- Ensure the analysis is clear, objective, and well-supported by the input content.
- Avoid including warnings, notes, or conversational text outside of the defined output sections.

-----------------

File: ClineAGI/prompts/merged_patterns/996-04_visualize-data-concepts.md
-----------------
---
description: Merged pattern for visualizing data and concepts.
author: Cline (AI Assistant)
version: 1.0
tags: ["merged-pattern", "visualization"]
---

# Visualize Data/Concepts

## IDENTITY and PURPOSE

You are an expert visualization generator, capable of transforming data and complex ideas into clear and understandable visual formats (e.g., diagrams, graphs, charts). Your purpose is to make information more accessible and insightful through visual representation.

## GOAL

Generate a visualization of input data or concepts, tailored to the content and desired format.

## STEPS

1. Fully consume and understand the input data or concepts.
2. Identify the type of content (data, ideas, relationships, etc.) and the user's request for the visualization format (e.g., Markdown table, Mermaid, Markmap, Graphviz, ASCII art, CSV for graphs).
3. Apply relevant visualization techniques and syntax based on the content type and desired format.
4. Generate the visualization, ensuring it accurately represents the input and adheres to the specified format and constraints.
5. Provide a brief explanation of the visualization if necessary.

## OUTPUT SECTIONS

- **SUMMARY:** A brief overview of the content being visualized.
- **VISUALIZATION:** The generated visualization (e.g., code block for diagram syntax, Markdown table, ASCII art, CSV data).
- **(Optional):** A brief explanation of the visualization.

## OUTPUT INSTRUCTIONS

- Output in Markdown format.
- Use headings for each section.
- Format the visualization appropriately for its type (e.g., code blocks for diagram syntax, Markdown table, raw text for ASCII art, raw text for CSV).
- Adhere to any specific length constraints mentioned in the user's request or implied by the source patterns (e.g., specific syntax rules, word limits).
- Ensure the visualization is clear and accurately reflects the input.
- Do not include warnings or notes; only output the requested sections.

## Use Cases

This merged pattern can be used for the following types of visualization tasks:

- Creating diagrams to illustrate relationships between concepts or data (e.g., Mermaid, Markmap, Graphviz, ASCII art).
- Generating charts or graphs from data (e.g., outputting CSV data for graphing tools).
- Visualizing complex systems or processes.
- Creating visual representations for presentations or documentation.

## Output Instructions Synthesis

Based on the individual visualization patterns, the output should generally adhere to these instructions:

- Output should be in Markdown format, utilizing headings and bullet points for structure.
- Specific sections should be included as defined in the "OUTPUT SECTIONS" above, with optional sections included as relevant to the specific visualization task.
- Format the visualization appropriately for its type (e.g., code blocks for diagram syntax, Markdown table, raw text for ASCII art, raw text for CSV).
- Adhere to any specific length constraints mentioned in the user's request or implied by the source patterns (e.g., specific syntax rules, word limits).
- Ensure the visualization is clear and accurately reflects the input.
- Do not include warnings, notes, or conversational text outside of the defined output sections.

-----------------

File: ClineAGI/prompts/merged_patterns/996-02_create-content.md
-----------------
---
description: Merged pattern for generating various types of content.
author: Cline (AI Assistant)
version: 1.0
tags: ["merged-pattern", "creation"]
---

# Create Content

## IDENTITY and PURPOSE

You are an expert content generator, capable of creating various types of content (code, reports, documents, visualizations, etc.) based on user requirements. Your purpose is to produce well-structured, accurate, and relevant content tailored to the specific task.

## GOAL

Generate new content based on the input and specified content type.

## STEPS

1. Fully consume and understand the input content and the user's request for content creation.
2. Identify the type of content to be created (code, report, document, visualization, etc.) and the specific requirements.
3. Apply relevant creation frameworks or criteria based on the content type (e.g., coding best practices, report structure, visualization syntax).
4. Generate the content, ensuring it meets the specified requirements and format.
5. Review the generated content for accuracy, completeness, and adherence to instructions.

## OUTPUT SECTIONS

- **SUMMARY:** A brief overview of the content that was created.
- **GENERATED CONTENT:** The main body of the created content (code, report, document, visualization syntax, etc.).
- **(Optional - depending on content type):** Additional specific sections relevant to the content being created (e.g., EXAMPLES, USAGE, SETUP, EXPLANATION, etc.).

## OUTPUT INSTRUCTIONS

- Output in Markdown format.
- Use headings for each section.
- Format the generated content appropriately for its type (e.g., code blocks for code, specific syntax for visualizations).
- Adhere to any specific length constraints mentioned in the user's request or implied by the source patterns.
- Ensure the content is accurate and relevant to the input.
- Do not include warnings or notes; only output the requested sections.

## Use Cases

This merged pattern can be used for the following types of content creation tasks:

- Creating code for new projects or features.
- Generating reports and documents (e.g., design documents, LOE documents, academic papers, security updates, PRDs, HackerOne reports).
- Crafting creative content (e.g., aphorisms, art prompts, NPC descriptions, story explanations, tweets, essays).
- Developing educational materials (e.g., quizzes, flashcards).
- Generating visualizations (e.g., Markmap, Mermaid, Graphviz, ASCII art).
- Creating structured outlines (e.g., recursive outlines).
- Generating specific technical outputs (e.g., Sigma rules, Nuclei templates, Semgrep rules, CLI commands).
- Creating summaries with a specific format (e.g., video chapters, show intros).

## Output Instructions Synthesis

Based on the individual content creation patterns, the output should generally adhere to these instructions:

- Output should be in Markdown format, utilizing headings and bullet points for structure.
- Specific sections should be included as defined in the "OUTPUT SECTIONS" above, with optional sections included as relevant to the specific creation task.
- Format the generated content appropriately for its type (e.g., code blocks for code, specific syntax for visualizations, tables for structured data).
- Adhere to any specified length constraints mentioned in the user's request or implied by the source patterns.
- Ensure the content is accurate and relevant to the input.
- Do not include warnings, notes, or conversational text outside of the defined output sections.

-----------------

File: ClineAGI/prompts/merged_patterns/996-06_utility-helper-tasks.md
-----------------
---
description: Merged pattern for performing general utility and helper tasks.
author: Cline (AI Assistant)
version: 1.0
tags: ["merged-pattern", "utility"]
---

# Utility/Helper Tasks

## IDENTITY and PURPOSE

You are an expert in performing various utility and helper tasks to support the user's workflow. Your purpose is to provide efficient and accurate assistance with common tasks that facilitate broader goals.

## GOAL

Perform a utility or helper task based on the input and specified task type.

## STEPS

1. Fully consume and understand the input content and the user's request for a utility task.
2. Identify the specific utility task to be performed (e.g., cleaning text, creating tags, comparing items, generating commands).
3. Apply relevant techniques and criteria based on the task type.
4. Generate the output for the utility task, ensuring it meets the specified requirements and format.
5. Review the generated output for accuracy and adherence to instructions.

## OUTPUT SECTIONS

- **SUMMARY:** A brief overview of the utility task performed.
- **OUTPUT:** The result of the utility task (e.g., cleaned text, list of tags, comparison table, generated command).
- **(Optional - depending on task type):** Additional specific sections relevant to the utility task.

## OUTPUT INSTRUCTIONS

- Output in Markdown format.
- Use headings for each section.
- Format the output appropriately for its type (e.g., plain text for cleaned text, bullet points for lists, tables for comparisons, code blocks for commands).
- Adhere to any specific length constraints mentioned in the user's request or implied by the source patterns.
- Ensure the output is accurate and relevant to the input.
- Do not include warnings or notes; only output the requested sections.

-----------------

File: ClineAGI/prompts/merged_patterns/README.md
-----------------
# Merged Patterns Directory Overview

## 1. Purpose Statement

This directory, `prompts/merged_patterns/`, contains prompt files that define "merged patterns." These patterns consolidate functionality from multiple, more granular individual patterns into broader categories. They are designed to provide a more streamlined and intuitive way for Cline to access its capabilities for common high-level tasks, allowing it to apply the most relevant specific sub-patterns based on user input and context.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Merged Pattern Definitions (Markdown `.md`):** Files that outline a broad task category (e.g., "Summarize Content," "Analyze Content").
*   Each file typically describes the general goal, the types of inputs it can handle, the kinds of outputs it can produce, and may internally reference or invoke more specific patterns or use cases.
*   **Naming Convention:** Files generally follow a `996-NN_descriptive-name.md` pattern.

### Content That Does NOT Belong Here:
*   **Highly Specific Use Case Guides:** These belong in `prompts/use_cases/`.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.
*   **General Workflow Definitions:** These belong in `prompts/workflows/` or `prompts/core_workflows/`.

## 3. Key Files Overview

As of the last update, this directory contains the following merged patterns:

*   **`996-00_summarize-content.md`**: For generating concise summaries of various content types.
*   **`996-01_analyze-content.md`**: For analyzing and evaluating different types of content.
*   **`996-02_create-content.md`**: For generating new content, such as code, reports, and designs.
*   **`996-03_extract-information.md`**: For extracting specific data and insights from content.
*   **`996-04_visualize-data-concepts.md`**: For creating visual representations of data and ideas.
*   **`996-05_improve-refine-content.md`**: For enhancing and refining existing content.
*   **`996-06_utility-helper-tasks.md`**: For performing general utility and helper tasks.

*(This list should be kept current as merged patterns are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   These merged patterns are intended to be high-level entry points for common categories of tasks.
*   Cline can use these patterns to understand the general intent and then select more specific sub-patterns or use cases as needed.
*   The `prompt_inventory.yaml` file should include entries for these merged patterns to make them discoverable.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/merged_patterns/996-05_improve-refine-content.md
-----------------
---
description: Merged pattern for enhancing and refining existing content.
author: Cline (AI Assistant)
version: 1.0
tags: ["merged-pattern", "refinement"]
---

# Improve/Refine Content

## IDENTITY and PURPOSE

You are an expert content refiner, capable of enhancing and improving existing content (text, code, documentation, etc.) based on user requirements and best practices. Your purpose is to elevate the quality, clarity, and effectiveness of the input content.

## GOAL

Improve or refine input content based on the specified content type and desired enhancements.

## STEPS

1. Fully consume and understand the input content and the user's request for refinement.
2. Identify the type of content (text, code, documentation, etc.) and the specific improvements needed (e.g., grammar correction, style enhancement, code optimization, documentation clarity).
3. Apply relevant refinement techniques and criteria based on the content type and desired enhancements (e.g., writing best practices, coding standards, documentation guidelines).
4. Generate the refined content, ensuring it meets the specified requirements and improves upon the original.
5. Review the refined content for accuracy, completeness, and adherence to instructions.

## OUTPUT SECTIONS

- **SUMMARY:** A brief overview of the content that was refined and the improvements made.
- **REFINED CONTENT:** The main body of the improved content.
- **(Optional - depending on content type):** Additional specific sections relevant to the refinement (e.g., CHANGES MADE, EXPLANATION OF IMPROVEMENTS, etc.).

## OUTPUT INSTRUCTIONS

- Output in Markdown format.
- Use headings for each section.
- Format the refined content appropriately for its type (e.g., code blocks for code, standard text for prose).
- Adhere to any specific length constraints mentioned in the user's request or implied by the source patterns.
- Ensure the refined content is accurate and meets the user's requirements.
- Do not include warnings or notes; only output the requested sections.

-----------------

File: ClineAGI/prompts/merged_patterns/996-00_summarize-content.md
-----------------
---
description: Merged pattern for summarizing various types of content.
author: Cline (AI Assistant)
version: 1.0
tags: ["merged-pattern", "summarization"]
---

# Summarize Content

## IDENTITY and PURPOSE

You are an expert content summarizer, capable of creating concise and structured summaries of various content types (text, audio, video, reports, etc.). Your purpose is to distill lengthy input into digestible summaries while preserving the most valuable information and maintaining the original flow where relevant.

## GOAL

Provide a summary of input content, tailored to the content type and desired level of detail.

## STEPS

1. Fully consume and understand the input content.
2. Identify the type of content (text, audio, video, report, etc.) and the user's request for the summary format and level of detail.
3. Extract key information, main points, themes, and relevant details (such as timestamps for audio/video transcripts).
4. Synthesize the extracted information into the requested summary format, adhering to specified length constraints and output sections.

## OUTPUT SECTIONS

- **ONE SENTENCE SUMMARY:** A very brief, single-sentence overview of the content.
- **SUMMARY:** A concise paragraph providing a general overview of the content.
- **MAIN POINTS / KEY POINTS:** A list of the most important points, ideas, or discussion topics from the content.
- **TAKEAWAYS:** A list of actionable takeaways or key lessons learned from the content.
- **(Optional - depending on content type):** Additional specific sections relevant to the content being summarized (e.g., TIMELINE for meetings, COMBAT STATS for RPG sessions, etc.).

## OUTPUT INSTRUCTIONS

- Output in Markdown format.
- Use headings for each section.
- Use bullet points for lists within sections (MAIN POINTS / KEY POINTS, TAKEAWAYS, and optional lists).
- Adhere to any specific length constraints mentioned in the user's request or implied by the source patterns (e.g., word limits per bullet point or section).
- Ensure the summary is clear, accurate, and reflects the original content.
- Do not include warnings or notes; only output the requested sections.

## Use Cases

This merged pattern can be used for the following types of summarization tasks:

- Summarizing general text content such as articles, essays, and reports.
- Summarizing audio or video transcripts from lectures, debates, podcasts, and YouTube videos, often including timestamps.
- Creating short, concise summaries like micro summaries or summaries limited to a specific number of sentences (e.g., 5-sentence summaries).
- Summarizing specific types of content such as meeting minutes, RPG sessions, newsletters, and academic papers, extracting relevant details like key events, combat stats, or technical approaches.

## Output Instructions Synthesis

Based on the individual summarization patterns, the output should generally adhere to these instructions:

- Output should be in Markdown format, utilizing headings and bullet points for structure.
- Specific sections should be included as defined in the "OUTPUT SECTIONS" above.
- Adhere to any specified length constraints for the overall summary, sections, or individual list items.
- For time-based content like transcripts, include relevant timestamps in the specified format (e.g., [HH:MM:SS]).
- Ensure the summary is clear, accurate, and faithfully represents the original content.
- Avoid including warnings, notes, or conversational text outside of the defined output sections.

-----------------

File: ClineAGI/prompts/merged_patterns/996-03_extract-information.md
-----------------
---
description: Merged pattern for extracting various types of information from content.
author: Cline (AI Assistant)
version: 1.0
tags: ["merged-pattern", "extraction"]
---

# Extract Information

## IDENTITY and PURPOSE

You are an expert information extractor, capable of identifying and pulling out specific data, insights, claims, questions, and other relevant details from diverse content types (text, reports, transcripts, etc.). Your purpose is to provide structured access to the key information contained within the input.

## GOAL

Extract specific information from input content, tailored to the content type and the user's request.

## STEPS

1. Fully consume and understand the input content.
2. Identify the type of content (text, report, transcript, etc.) and the user's request for the type of information to extract.
3. Apply relevant extraction techniques based on the content type and the target information (e.g., identifying claims, extracting data structures, finding questions, pulling out recommendations).
4. Extract the requested information, adhering to any specified formats or constraints.
5. Organize and present the extracted information in a clear and structured manner.

## OUTPUT SECTIONS

- **SUMMARY:** A brief overview of the content from which information was extracted.
- **EXTRACTED INFORMATION:** The main body of the extracted information, structured according to the type of information requested (e.g., a list of ideas, a table of data, a list of questions, a summary of claims).
- **(Optional - depending on content type):** Additional specific sections relevant to the information extracted (e.g., REFERENCES, HABITS, FACTS, RECOMMENDATIONS, etc.).

## OUTPUT INSTRUCTIONS

- Output in Markdown format.
- Use headings for each section.
- Format the extracted information appropriately for its type (e.g., bullet points for lists, tables for structured data, code blocks for code/commands).
- Adhere to any specific length constraints mentioned in the user's request or implied by the source patterns (e.g., word limits per bullet point or section).
- Ensure the extracted information is accurate and directly supported by the input content.
- Do not include warnings or notes; only output the requested sections.

## Use Cases

This merged pattern can be used for the following types of information extraction tasks:

- Extracting key ideas and insights from text.
- Extracting quotes from content.
- Extracting habits and practices mentioned in content.
- Extracting facts and data points from content.
- Extracting references to other works or sources.
- Extracting recommendations from content.
- Extracting questions from content.
- Extracting specific data structures or entities.
- Extracting product features from announcements or descriptions.
- Extracting extraordinary or controversial claims.
- Extracting the core message, primary problem, or primary solution from a body of work.
- Extracting specific technical details like commands, URLs, or file paths.
- Extracting information for structured reports (e.g., security findings, threat landscapes).
- Extracting data for visualizations (e.g., CSV data).
- Extracting information for educational materials (e.g., flashcards).
- Extracting specific elements from transcripts (e.g., video chapters, meeting minutes, RPG session details).
- Extracting patterns from data or observations.
- Extracting terms and creating glossaries.
- Extracting information for project summaries or documentation.
- Extracting predictions from content.
- Extracting information for legal or political analysis (e.g., claims, propositions, legislation details).
- Extracting information for psychological or behavioral analysis (e.g., personality traits, thinking patterns).
- Extracting information for business analysis (e.g., business ideas, sales call details, product feedback).
- Extracting information for artistic or creative analysis (e.g., song meaning, art references).
- Extracting information for historical or military analysis (e.g., battle details, strategic decisions).
- Extracting information for technical analysis (e.g., code details, security tool outputs, configuration).
- Extracting information for utility tasks (e.g., tags, domains, URLs).

## Output Instructions Synthesis

Based on the individual extraction patterns, the output should generally adhere to these instructions:

- Output should be in Markdown format, utilizing headings and bullet points for structure.
- Specific sections should be included as defined in the "OUTPUT SECTIONS" above, with optional sections included as relevant to the specific extraction task.
- Adhere to any specified length constraints for the overall extraction, sections, or individual list items.
- Ensure the extracted information is accurate and directly supported by the input content.
- Avoid including warnings, notes, or conversational text outside of the defined output sections.

-----------------

File: ClineAGI/prompts/reference_documents/001-00_reference-cline-extension-architecture.md
-----------------
# Cline Extension Architecture & Development Guide

## Project Overview

Cline is a VSCode extension that provides AI assistance through a combination of a core extension backend and a React-based webview frontend. The extension is built with TypeScript and follows a modular architecture pattern.

## Architecture Overview

```mermaid
graph TB
    subgraph VSCodeExtensionHost[VSCode Extension Host]
        subgraph CoreExtension[Core Extension]
            ExtensionEntry[Extension Entry<br/>src/extension.ts]
            WebviewProvider[WebviewProvider<br/>src/core/webview/index.ts]
            Controller[Controller<br/>src/core/controller/index.ts]
            Task[Task<br/>src/core/task/index.ts]
            GlobalState[VSCode Global State]
            SecretsStorage[VSCode Secrets Storage]
            McpHub[McpHub<br/>src/services/mcp/McpHub.ts]
        end

        subgraph WebviewUI[Webview UI]
            WebviewApp[React App<br/>webview-ui/src/App.tsx]
            ExtStateContext[ExtensionStateContext<br/>webview-ui/src/context/ExtensionStateContext.tsx]
            ReactComponents[React Components]
        end

        subgraph Storage
            TaskStorage[Task Storage<br/>Per-Task Files & History]
            CheckpointSystem[Git-based Checkpoints]
        end

        subgraph apiProviders[API Providers]
            AnthropicAPI[Anthropic]
            OpenRouterAPI[OpenRouter]
            BedrockAPI[AWS Bedrock]
            OtherAPIs[Other Providers]
        end

        subgraph MCPServers[MCP Servers]
            ExternalMcpServers[External MCP Servers]
        end
    end

    %% Core Extension Data Flow
    ExtensionEntry --> WebviewProvider
    WebviewProvider --> Controller
    Controller --> Task
    Controller --> McpHub
    Task --> GlobalState
    Task --> SecretsStorage
    Task --> TaskStorage
    Task --> CheckpointSystem
    Task --> |API Requests| apiProviders
    McpHub --> |Connects to| ExternalMcpServers
    Task --> |Uses| McpHub

    %% Webview Data Flow
    WebviewApp --> ExtStateContext
    ExtStateContext --> ReactComponents

    %% Bidirectional Communication
    WebviewProvider <-->|postMessage| ExtStateContext

    style GlobalState fill:#f9f,stroke:#333,stroke-width:2px
    style SecretsStorage fill:#f9f,stroke:#333,stroke-width:2px
    style ExtStateContext fill:#bbf,stroke:#333,stroke-width:2px
    style WebviewProvider fill:#bfb,stroke:#333,stroke-width:2px
    style McpHub fill:#bfb,stroke:#333,stroke-width:2px
    style apiProviders fill:#fdb,stroke:#333,stroke-width:2px
```

## Definitions 

- **Core Extension**: Anything inside the src folder, organized into modular components
- **Core Extension State**: Managed by the Controller class in src/core/controller/index.ts, which serves as the single source of truth for the extension's state. It manages multiple types of persistent storage (global state, workspace state, and secrets), handles state distribution to both the core extension and webview components, and coordinates state across multiple extension instances. This includes managing API configurations, task history, settings, and MCP configurations.
- **Webview**: Anything inside the webview-ui. All the react or view's seen by the user and user interaction components
- **Webview State**: Managed by ExtensionStateContext in webview-ui/src/context/ExtensionStateContext.tsx, which provides React components with access to the extension's state through a context provider pattern. It maintains local state for UI components, handles real-time updates through message events, manages partial message updates, and provides methods for state modifications. The context includes extension version, messages, task history, theme, API configurations, MCP servers, marketplace catalog, and workspace file paths. It synchronizes with the core extension through VSCode's message passing system and provides type-safe access to state through a custom hook (useExtensionState).

### Core Extension Architecture

The core extension follows a clear hierarchical structure:

1. **WebviewProvider** (src/core/webview/index.ts): Manages the webview lifecycle and communication
2. **Controller** (src/core/controller/index.ts): Handles webview messages and task management
3. **Task** (src/core/task/index.ts): Executes API requests and tool operations

This architecture provides clear separation of concerns:
- WebviewProvider focuses on VSCode webview integration
- Controller manages state and coordinates tasks
- Task handles the execution of AI requests and tool operations

### WebviewProvider Implementation

The WebviewProvider class in `src/core/webview/index.ts` is responsible for:

- Managing multiple active instances through a static set (`activeInstances`)
- Handling webview lifecycle events (creation, visibility changes, disposal)
- Implementing HTML content generation with proper CSP headers
- Supporting Hot Module Replacement (HMR) for development
- Setting up message listeners between the webview and extension

The WebviewProvider maintains a reference to the Controller and delegates message handling to it. It also handles the creation of both sidebar and tab panel webviews, allowing Cline to be used in different contexts within VSCode.

### Core Extension State

The `Controller` class manages multiple types of persistent storage:

- **Global State:** Stored across all VSCode instances. Used for settings and data that should persist globally.
- **Workspace State:** Specific to the current workspace. Used for task-specific data and settings.
- **Secrets:** Secure storage for sensitive information like API keys.

The `Controller` handles the distribution of state to both the core extension and webview components. It also coordinates state across multiple extension instances, ensuring consistency.

State synchronization between instances is handled through:
- File-based storage for task history and conversation data
- VSCode's global state API for settings and configuration
- Secrets storage for sensitive information
- Event listeners for file changes and configuration updates

The Controller implements methods for:
- Saving and loading task state
- Managing API configurations
- Handling user authentication
- Coordinating MCP server connections
- Managing task history and checkpoints

### Webview State

The `ExtensionStateContext` in `webview-ui/src/context/ExtensionStateContext.tsx` provides React components with access to the extension's state. It uses a context provider pattern and maintains local state for UI components. The context includes:

- Extension version
- Messages
- Task history
- Theme
- API configurations
- MCP servers
- Marketplace catalog
- Workspace file paths

It synchronizes with the core extension through VSCode's message passing system and provides type-safe access to the state via a custom hook (`useExtensionState`).

The ExtensionStateContext handles:
- Real-time updates through message events
- Partial message updates for streaming content
- State modifications through setter methods
- Type-safe access to state through a custom hook

## API Provider System

Cline supports multiple AI providers through a modular API provider system. Each provider is implemented as a separate module in the `src/api/providers/` directory and follows a common interface.

### API Provider Architecture

The API system consists of:

1. **API Handlers**: Provider-specific implementations in `src/api/providers/`
2. **API Transformers**: Stream transformation utilities in `src/api/transform/`
3. **API Configuration**: User settings for API keys and endpoints
4. **API Factory**: Builder function to create the appropriate handler

Key providers include:
- **Anthropic**: Direct integration with Claude models
- **OpenRouter**: Meta-provider supporting multiple model providers
- **AWS Bedrock**: Integration with Amazon's AI services
- **Gemini**: Google's AI models
- **Ollama**: Local model hosting
- **LM Studio**: Local model hosting
- **VSCode LM**: VSCode's built-in language models

### API Configuration Management

API configurations are stored securely:
- API keys are stored in VSCode's secrets storage
- Model selections and non-sensitive settings are stored in global state
- The Controller manages switching between providers and updating configurations

The system supports:
- Secure storage of API keys
- Model selection and configuration
- Automatic retry and error handling
- Token usage tracking and cost calculation
- Context window management

### Plan/Act Mode API Configuration

Cline supports separate model configurations for Plan and Act modes:
- Different models can be used for planning vs. execution
- The system preserves model selections when switching modes
- The Controller handles the transition between modes and updates the API configuration accordingly

## Task Execution System

The Task class is responsible for executing AI requests and tool operations. Each task runs in its own instance of the Task class, ensuring isolation and proper state management.

### Task Execution Loop

The core task execution loop follows this pattern:

```typescript
class Task {
  async initiateTaskLoop(userContent: UserContent, isNewTask: boolean) {
    while (!this.abort) {
      // 1. Make API request and stream response
      const stream = this.attemptApiRequest()
      
      // 2. Parse and present content blocks
      for await (const chunk of stream) {
        switch (chunk.type) {
          case "text":
            // Parse into content blocks
            this.assistantMessageContent = parseAssistantMessage(chunk.text)
            // Present blocks to user
            await this.presentAssistantMessage()
            break
        }
      }
      
      // 3. Wait for tool execution to complete
      await pWaitFor(() => this.userMessageContentReady)
      
      // 4. Continue loop with tool result
      const recDidEndLoop = await this.recursivelyMakeClineRequests(
        this.userMessageContent
      )
    }
  }
}
```

### Message Streaming System

The streaming system handles real-time updates and partial content:

```typescript
class Task {
  async presentAssistantMessage() {
    // Handle streaming locks to prevent race conditions
    if (this.presentAssistantMessageLocked) {
      this.presentAssistantMessageHasPendingUpdates = true
      return
    }
    this.presentAssistantMessageLocked = true

    // Present current content block
    const block = this.assistantMessageContent[this.currentStreamingContentIndex]
    
    // Handle different types of content
    switch (block.type) {
      case "text":
        await this.say("text", content, undefined, block.partial)
        break
      case "tool_use":
        // Handle tool execution
        break
    }

    // Move to next block if complete
    if (!block.partial) {
      this.currentStreamingContentIndex++
    }
  }
}
```

### Tool Execution Flow

Tools follow a strict execution pattern:

```typescript
class Task {
  async executeToolWithApproval(block: ToolBlock) {
    // 1. Check auto-approval settings
    if (this.shouldAutoApproveTool(block.name)) {
      await this.say("tool", message)
      this.consecutiveAutoApprovedRequestsCount++
    } else {
      // 2. Request user approval
      const didApprove = await askApproval("tool", message)
      if (!didApprove) {
        this.didRejectTool = true
        return
      }
    }

    // 3. Execute tool
    const result = await this.executeTool(block)

    // 4. Save checkpoint
    await this.saveCheckpoint()

    // 5. Return result to API
    return result
  }
}
```

### Error Handling & Recovery

The system includes robust error handling:

```typescript
class Task {
  async handleError(action: string, error: Error) {
    // 1. Check if task was abandoned
    if (this.abandoned) return
    
    // 2. Format error message
    const errorString = `Error ${action}: ${error.message}`
    
    // 3. Present error to user
    await this.say("error", errorString)
    
    // 4. Add error to tool results
    pushToolResult(formatResponse.toolError(errorString))
    
    // 5. Cleanup resources
    await this.diffViewProvider.revertChanges()
    await this.browserSession.closeBrowser()
  }
}
```

### API Request & Token Management

The Task class handles API requests with built-in retry, streaming, and token management:

```typescript
class Task {
  async *attemptApiRequest(previousApiReqIndex: number): ApiStream {
    // 1. Wait for MCP servers to connect
    await pWaitFor(() => this.controllerRef.deref()?.mcpHub?.isConnecting !== true)

    // 2. Manage context window
    const previousRequest = this.clineMessages[previousApiReqIndex]
    if (previousRequest?.text) {
      const { tokensIn, tokensOut } = JSON.parse(previousRequest.text || "{}")
      const totalTokens = (tokensIn || 0) + (tokensOut || 0)
      
      // Truncate conversation if approaching context limit
      if (totalTokens >= maxAllowedSize) {
        this.conversationHistoryDeletedRange = this.contextManager.getNextTruncationRange(
          this.apiConversationHistory,
          this.conversationHistoryDeletedRange,
          totalTokens / 2 > maxAllowedSize ? "quarter" : "half"
        )
      }
    }

    // 3. Handle streaming with automatic retry
    try {
      this.isWaitingForFirstChunk = true
      const firstChunk = await iterator.next()
      yield firstChunk.value
      this.isWaitingForFirstChunk = false
      
      // Stream remaining chunks
      yield* iterator
    } catch (error) {
      // 4. Error handling with retry
      if (isOpenRouter && !this.didAutomaticallyRetryFailedApiRequest) {
        await setTimeoutPromise(1000)
        this.didAutomaticallyRetryFailedApiRequest = true
        yield* this.attemptApiRequest(previousApiReqIndex)
        return
      }
      
      // 5. Ask user to retry if automatic retry failed
      const { response } = await this.ask(
        "api_req_failed",
        this.formatErrorWithStatusCode(error)
      )
      if (response === "yesButtonClicked") {
        await this.say("api_req_retried")
        yield* this.attemptApiRequest(previousApiReqIndex)
        return
      }
    }
  }
}
```

Key features:

1. **Context Window Management**
   - Tracks token usage across requests
   - Automatically truncates conversation when needed
   - Preserves important context while freeing space
   - Handles different model context sizes

2. **Streaming Architecture**
   - Real-time chunk processing
   - Partial content handling
   - Race condition prevention
   - Error recovery during streaming

3. **Error Handling**
   - Automatic retry for transient failures
   - User-prompted retry for persistent issues
   - Detailed error reporting
   - State cleanup on failure

4. **Token Tracking**
   - Per-request token counting
   - Cumulative usage tracking
   - Cost calculation
   - Cache hit monitoring

### Context Management System

The Context Management System handles conversation history truncation to prevent context window overflow errors. Implemented in the `ContextManager` class, it ensures long-running conversations remain within model context limits while preserving critical context.

Key features:

1. **Model-Aware Sizing**: Dynamically adjusts based on different model context windows (64K for DeepSeek, 128K for most models, 200K for Claude).

2. **Proactive Truncation**: Monitors token usage and preemptively truncates conversations when approaching limits, maintaining buffers of 27K-40K tokens depending on the model.

3. **Intelligent Preservation**: Always preserves the original task message and maintains the user-assistant conversation structure when truncating.

4. **Adaptive Strategies**: Uses different truncation strategies based on context pressure - removing half of the conversation for moderate pressure or three-quarters for severe pressure.

5. **Error Recovery**: Includes specialized detection for context window errors from different providers with automatic retry and more aggressive truncation when needed.

### Task State & Resumption

The Task class provides robust task state management and resumption capabilities:

```typescript
class Task {
  async resumeTaskFromHistory() {
    // 1. Load saved state
    this.clineMessages = await getSavedClineMessages(this.getContext(), this.taskId)
    this.apiConversationHistory = await getSavedApiConversationHistory(this.getContext(), this.taskId)

    // 2. Handle interrupted tool executions
    const lastMessage = this.apiConversationHistory[this.apiConversationHistory.length - 1]
    if (lastMessage.role === "assistant") {
      const toolUseBlocks = content.filter(block => block.type === "tool_use")
      if (toolUseBlocks.length > 0) {
        // Add interrupted tool responses
        const toolResponses = toolUseBlocks.map(block => ({
          type: "tool_result",
          tool_use_id: block.id,
          content: "Task was interrupted before this tool call could be completed."
        }))
        modifiedOldUserContent = [...toolResponses]
      }
    }

    // 3. Notify about interruption
    const agoText = this.getTimeAgoText(lastMessage?.ts)
    newUserContent.push({
      type: "text",
      text: `[TASK RESUMPTION] This task was interrupted ${agoText}. It may or may not be complete, so please reassess the task context.`
    })

    // 4. Resume task execution
    await this.initiateTaskLoop(newUserContent, false)
  }

  private async saveTaskState() {
    // Save conversation history
    await saveApiConversationHistory(this.getContext(), this.taskId, this.apiConversationHistory)
    await saveClineMessages(this.getContext(), this.taskId, this.clineMessages)
    
    // Create checkpoint
    const commitHash = await this.checkpointTracker?.commit()
    
    // Update task history
    await this.controllerRef.deref()?.updateTaskHistory({
      id: this.taskId,
      ts: lastMessage.ts,
      task: taskMessage.text,
      // ... other metadata
    })
  }
}
```

Key aspects of task state management:

1. **Task Persistence**
   - Each task has a unique ID and dedicated storage directory
   - Conversation history is saved after each message
   - File changes are tracked through Git-based checkpoints
   - Terminal output and browser state are preserved

2. **State Recovery**
   - Tasks can be resumed from any point
   - Interrupted tool executions are handled gracefully
   - File changes can be restored from checkpoints
   - Context is preserved across VSCode sessions

3. **Workspace Synchronization**
   - File changes are tracked through Git
   - Checkpoints are created after tool executions
   - State can be restored to any checkpoint
   - Changes can be compared between checkpoints

4. **Error Recovery**
   - Failed API requests can be retried
   - Interrupted tool executions are marked
   - Resources are cleaned up properly
   - User is notified of state changes

## Plan/Act Mode System

Cline implements a dual-mode system that separates planning from execution:

### Mode Architecture

The Plan/Act mode system consists of:

1. **Mode State**: Stored in `chatSettings.mode` in the Controller's state
2. **Mode Switching**: Handled by `togglePlanActModeWithChatSettings` in the Controller
3. **Mode-specific Models**: Optional configuration to use different models for each mode
4. **Mode-specific Prompting**: Different system prompts for planning vs. execution

### Mode Switching Process

When switching between modes:

1. The current model configuration is saved to mode-specific state
2. The previous mode's model configuration is restored
3. The Task instance is updated with the new mode
4. The webview is notified of the mode change
5. Telemetry events are captured for analytics

### Plan Mode

Plan mode is designed for:
- Information gathering and context building
- Asking clarifying questions
- Creating detailed execution plans
- Discussing approaches with the user

In Plan mode, the AI uses the `plan_mode_respond` tool to engage in conversational planning without executing actions.

### Act Mode

Act mode is designed for:
- Executing the planned actions
- Using tools to modify files, run commands, etc.
- Implementing the solution
- Providing results and completion feedback

In Act mode, the AI has access to all tools except `plan_mode_respond` and focuses on implementation rather than discussion.

## Data Flow & State Management

### Core Extension Role

The Controller acts as the single source of truth for all persistent state. It:
- Manages VSCode global state and secrets storage
- Coordinates state updates between components
- Ensures state consistency across webview reloads
- Handles task-specific state persistence
- Manages checkpoint creation and restoration

### Terminal Management

The Task class manages terminal instances and command execution:

```typescript
class Task {
  async executeCommandTool(command: string): Promise<[boolean, ToolResponse]> {
    // 1. Get or create terminal
    const terminalInfo = await this.terminalManager.getOrCreateTerminal(cwd)
    terminalInfo.terminal.show()

    // 2. Execute command with output streaming
    const process = this.terminalManager.runCommand(terminalInfo, command)
    
    // 3. Handle real-time output
    let result = ""
    process.on("line", (line) => {
      result += line + "\n"
      if (!didContinue) {
        sendCommandOutput(line)
      } else {
        this.say("command_output", line)
      }
    })

    // 4. Wait for completion or user feedback
    let completed = false
    process.once("completed", () => {
      completed = true
    })

    await process

    // 5. Return result
    if (completed) {
      return [false, `Command executed.\n${result}`]
    } else {
      return [
        false,
        `Command is still running in the user's terminal.\n${result}\n\nYou will be updated on the terminal status and new output in the future.`
      ]
    }
  }
}
```

Key features:
1. **Terminal Instance Management**
   - Multiple terminal support
   - Terminal state tracking (busy/inactive)
   - Process cooldown monitoring
   - Output history per terminal

2. **Command Execution**
   - Real-time output streaming
   - User feedback handling
   - Process state monitoring
   - Error recovery

### Browser Session Management

The Task class handles browser automation through Puppeteer:

```typescript
class Task {
  async executeBrowserAction(action: BrowserAction): Promise<BrowserActionResult> {
    switch (action) {
      case "launch":
        // 1. Launch browser with fixed resolution
        await this.browserSession.launchBrowser()
        return await this.browserSession.navigateToUrl(url)

      case "click":
        // 2. Handle click actions with coordinates
        return await this.browserSession.click(coordinate)

      case "type":
        // 3. Handle keyboard input
        return await this.browserSession.type(text)

      case "close":
        // 4. Clean up resources
        return await this.browserSession.closeBrowser()
    }
  }
}
```

Key aspects:
1. **Browser Control**
   - Fixed 900x600 resolution window
   - Single instance per task lifecycle
   - Automatic cleanup on task completion
   - Console log capture

2. **Interaction Handling**
   - Coordinate-based clicking
   - Keyboard input simulation
   - Screenshot capture
   - Error recovery

## MCP (Model Context Protocol) Integration

### MCP Architecture

The MCP system consists of:

1. **McpHub Class**: Central manager in `src/services/mcp/McpHub.ts`
2. **MCP Connections**: Manages connections to external MCP servers
3. **MCP Settings**: Configuration stored in a JSON file
4. **MCP Marketplace**: Online catalog of available MCP servers
5. **MCP Tools & Resources**: Capabilities exposed by connected servers

The McpHub class:
- Manages the lifecycle of MCP server connections
- Handles server configuration through a settings file
- Provides methods for calling tools and accessing resources
- Implements auto-approval settings for MCP tools
- Monitors server health and handles reconnection

### MCP Server Types

Cline supports two types of MCP server connections:
- **Stdio**: Command-line based servers that communicate via standard I/O
- **SSE**: HTTP-based servers that communicate via Server-Sent Events

### MCP Server Management

The McpHub class provides methods for:
- Discovering and connecting to MCP servers
- Monitoring server health and status
- Restarting servers when needed
- Managing server configurations
- Setting timeouts and auto-approval rules

### MCP Tool Integration

MCP tools are integrated into the Task execution system:
- Tools are discovered and registered at connection time
- The Task class can call MCP tools through the McpHub
- Tool results are streamed back to the AI
- Auto-approval settings can be configured per tool

### MCP Marketplace

The MCP Marketplace provides:
- A catalog of available MCP servers
- One-click installation
- README previews
- Server status monitoring

The Controller class manages MCP servers through the McpHub service:

```typescript
class Controller {
  mcpHub?: McpHub

  constructor(context: vscode.ExtensionContext, outputChannel: vscode.OutputChannel, webviewProvider: WebviewProvider) {
    this.mcpHub = new McpHub(this)
  }

  async downloadMcp(mcpId: string) {
    // Fetch server details from marketplace
    const response = await axios.post<McpDownloadResponse>(
      "https://api.cline.bot/v1/mcp/download",
      { mcpId },
      {
        headers: { "Content-Type": "application/json" },
        timeout: 10000,
      }
    )

    // Create task with context from README
    const task = `Set up the MCP server from ${mcpDetails.githubUrl}...`

    // Initialize task and show chat view
    await this.initClineWithTask(task)
  }
}
```

## Conclusion

This guide provides a comprehensive overview of the Cline extension architecture, with special focus on state management, data persistence, and code organization. Following these patterns ensures robust feature implementation with proper state handling across the extension's components.

Remember:
- Always persist important state in the extension
- The core extension follows a WebviewProvider -> Controller -> Task flow
- Use proper typing for all state and messages
- Handle errors and edge cases
- Test state persistence across webview reloads
- Follow the established patterns for consistency
- Place new code in appropriate directories
- Maintain clear separation of concerns
- Install dependencies in correct package.json

## Contributing

Contributions to the Cline extension are welcome! Please follow these guidelines:

When adding new tools or API providers, follow the existing patterns in the `src/integrations/` and `src/api/providers/` directories, respectively. Ensure that your code is well-documented and includes appropriate error handling.

The `.clineignore` file allows users to specify files and directories that Cline should not access. When implementing new features, respect the `.clineignore` rules and ensure that your code does not attempt to read or modify ignored files.

-----------------

File: ClineAGI/prompts/reference_documents/README.md
-----------------
# Reference Documents Directory Overview

## 1. Purpose Statement

This directory, `prompts/reference_documents/`, stores key reference materials, foundational knowledge, and contextual documents that Cline, the AI Software Engineering Assistant, can consult. These documents provide stable, in-depth information on various topics relevant to Cline's operation, development, and understanding of its environment or specific domains. Many of these were previously `.clinerules` categorized under `001_reference` and have been migrated here to serve as informational resources rather than active operational rules.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Foundational Guides (Markdown `.md`):** Documents providing comprehensive information on core concepts, architectures, or methodologies.
    *   Examples: Cline's extension architecture, community contribution guides, software engineering best practices, guides on writing effective `.clinerules`.
*   **Knowledge Summaries:** Condensed summaries of broader knowledge bases or key operational aspects.
*   **Naming Convention:** Files may follow a `001-NN_reference-descriptive-name.md` pattern, reflecting their origin or foundational nature.

### Content That Does NOT Belong Here:
*   **Active Operational Rules:** These belong in the `.clinerules/` directory. Reference documents are for informational consultation, not direct behavioral instruction.
*   **Dynamic or Task-Specific Prompts:** These belong in other `prompts/` subdirectories like `use_cases/`, `agent_prompts/`, or `workflows/`.
*   **Memory Bank Files:** Core contextual information for ongoing tasks belongs in `memory-bank/`.

## 3. Key Files Overview

As of the last update, this directory contains the following key files:

*   **`001-00_reference-cline-extension-architecture.md`**: Describes the architecture for Cline's extension capabilities.
*   **`001-01_reference-community-contributing-guide.md`**: Provides guidelines for community contributions to the ClineAGI project.
*   **`001-02_reference-gemini-comprehensive-software-engineering-guide.md`**: A comprehensive guide on software engineering principles, likely for Cline's reference.
*   **`001-03_reference-writing-effective-clinerules.md`**: A guide on how to write effective `.clinerules` for Cline.
*   **`001-04_reference-agent-knowledge-base-summary.md`**: A summary of the agent's knowledge base or how it accesses/uses knowledge.

*(This list should be kept current as reference documents are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   Cline can consult these documents to gain deeper understanding or context on specific topics relevant to its tasks.
*   These documents serve as a stable knowledge base.
*   The `prompt_inventory.yaml` file should include entries for these reference documents to make them discoverable and loadable when relevant.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/reference_documents/001-01_reference-community-contributing-guide.md
-----------------
# .clinerules repository

This repository serves as a community-driven collection of rules for Cline.

## Contributing

We welcome contributions! To add your own Cline rule:

1.  **Fork** this repository.
2.  **Create** a new Markdown file (`.md`) for your rule inside the `clinerules/` directory.
3.  **Name** your file using `kebab-case` (e.g., `my-awesome-rule.md`).
4.  **Add** the content of your rule to the file.
5.  **Commit** your changes and push them to your fork.
6.  **Submit** a Pull Request (PR) to the main repository.

Your contribution will be reviewed, and once approved, it will be merged into the [collection](https://cline.bot/prompts).

-----------------

File: ClineAGI/prompts/reference_documents/001-02_reference-gemini-comprehensive-software-engineering-guide.md
-----------------
# Comprehensive Software Engineering Best Practices

## 1. Fundamental Principles of Software Architecture

### 1.1 Core Architectural Principles

Software architecture serves as the foundation upon which all development work is built. Effective architecture adheres to these essential principles:

**Separation of Concerns**: Divide your system into distinct sections, each addressing a specific aspect of the functionality. This creates cleaner abstractions, simplifies maintenance, and enables parallel development.

**Single Responsibility Principle**: Each component should have one and only one reason to change. When a module has a single focus, it becomes more stable, understandable, and testable.

**Don't Repeat Yourself (DRY)**: Eliminate duplication by abstracting common functionality. Each piece of knowledge should have a single, unambiguous representation within a system.

**KISS (Keep It Simple, Stupid)**: Simplicity should be a key goal in design. Choose straightforward solutions over complex ones whenever possible. Simple solutions are easier to understand, maintain, and debug.

**YAGNI (You Aren't Gonna Need It)**: Avoid building functionality on speculation. Implement features only when they are needed, not when you anticipate they might be useful in the future.

**Open/Closed Principle**: Software entities should be open for extension but closed for modification. Design your systems so that new functionality can be added with minimal changes to existing code.

**Dependency Inversion**: High-level modules should not depend on low-level modules. Both should depend on abstractions. This principle enables flexibility and testability.

### 1.2 Architectural Patterns

Select architectural patterns based on the specific requirements and constraints of your project:

**Microservices Architecture**: Decompose applications into small, loosely-coupled services that can be developed, deployed, and scaled independently. Beneficial for large systems that require independent scaling of components.

**Layered Architecture**: Organize code into horizontal layers (e.g., presentation, business logic, data access) with strict dependencies flowing in one direction. Creates clear separation but can lead to unnecessary coupling if not carefully managed.

**Event-Driven Architecture**: Components communicate through events, enabling loose coupling and high scalability. Well-suited for systems with asynchronous processes and complex workflows.

**Domain-Driven Design (DDD)**: Align software design with the business domain through a shared language and focused domain models. Particularly valuable for complex business domains.

**Hexagonal/Ports and Adapters**: Isolate application core from external services through well-defined interfaces (ports) and implementations (adapters). Enhances testability and flexibility in integrating with external systems.

**Serverless Architecture**: Build applications using managed services without managing server infrastructure. Reduces operational complexity and can improve cost efficiency for appropriate workloads.

### 1.3 Design for Quality Attributes

Architecture must intentionally address these critical quality attributes:

**Performance**: Design for efficiency in response time, throughput, and resource utilization. Consider caching strategies, asynchronous processing, and data access optimization.

**Scalability**: Enable the system to handle increased load by adding resources. Design with horizontal scaling in mind, minimize shared state, and identify potential bottlenecks.

**Reliability**: Ensure the system functions correctly even under adverse conditions. Implement fault tolerance through redundancy, graceful degradation, and comprehensive error handling.

**Security**: Protect against unauthorized access and potential vulnerabilities. Apply security by design, implement proper authentication and authorization, and validate all inputs.

**Maintainability**: Create systems that can be easily modified and extended. Use clean code practices, comprehensive documentation, and automated testing.

**Testability**: Design components to be easily testable in isolation. Use dependency injection, interfaces, and clean separation of concerns to enable effective unit testing.

## 2. Systematic Problem-Solving and Debugging

### 2.1 Methodical Debugging Process

Effective debugging requires a disciplined, systematic approach:

**1. Reproduce the Issue**: Create a reliable, minimal test case that consistently demonstrates the problem. The ability to reproduce an issue is the foundation of effective debugging.

**2. Gather Information**: Collect relevant logs, error messages, stack traces, and system state information. More data leads to more accurate hypotheses.

**3. Analyze the Data**: Review the collected information to understand the context and behavior of the system when the issue occurs. Look for patterns and anomalies.

**4. Form Hypotheses**: Based on the available information, develop theories about what might be causing the issue. Prioritize hypotheses based on likelihood and impact.

**5. Test Hypotheses**: Design and execute tests to confirm or eliminate each hypothesis. Make one change at a time to maintain clarity about cause and effect.

**6. Implement and Verify**: Once the root cause is identified, implement a fix and verify that it resolves the issue without introducing new problems. Test in multiple scenarios to ensure the solution is robust.

**7. Document Findings**: Record the issue, its root cause, and the solution for future reference. This builds institutional knowledge and helps prevent similar issues.

### 2.2 Advanced Debugging Techniques

When facing complex issues, employ these powerful debugging approaches:

**Binary Search Debugging**: Systematically eliminate half of the potential problem space with each test. Particularly useful for finding issues in large codebases or data sets.

**Instrumentation**: Add logging, tracing, or metrics to code to gain visibility into its behavior during execution. Strategic instrumentation can reveal patterns not otherwise observable.

**Differential Debugging**: Compare working and non-working states to identify differences. This can involve comparing code versions, configurations, or environments.

**Rubber Duck Debugging**: Explain the problem aloud, line by line, to force a methodical review of the logic. This often reveals overlooked assumptions or logical errors.

**Root Cause Analysis**: Look beyond the immediate symptoms to understand the underlying cause. Use techniques like the "5 Whys" to drill down to fundamental issues.

**State Snapshot Analysis**: Capture the state of the system at critical points for later analysis. This is particularly valuable for intermittent issues that are difficult to reproduce.

### 2.3 Proactive Problem Prevention

The best debugging is the debugging you don't need to do:

**Code Reviews**: Implement thorough peer review processes to catch issues before they enter the codebase. Establish clear review standards focused on both functionality and quality.

**Static Analysis**: Use automated tools to identify potential issues, including security vulnerabilities, performance problems, and code quality concerns.

**Comprehensive Testing**: Build a test pyramid with unit tests, integration tests, and end-to-end tests to validate different aspects of the system. Aim for high test coverage of critical paths.

**Continuous Integration**: Automatically build and test code changes to detect integration issues early. Configure CI pipelines to fail fast on quality gates.

**Observability**: Implement logging, monitoring, and alerting to provide visibility into system behavior and quickly identify anomalies.

**Error Budgets**: Define acceptable reliability thresholds and track against them, balancing the need for rapid innovation with system stability.

## 3. Effective Development Processes and Methodologies

### 3.1 Agile Development Practices

Agile methodologies emphasize adaptability, collaboration, and customer value:

**Iterative Development**: Build software in small, incremental cycles that deliver working functionality. This enables rapid feedback and adaptation to changing requirements.

**User Stories**: Express requirements from the user's perspective, focusing on the value delivered rather than technical implementation details.

**Backlog Refinement**: Continuously groom and prioritize the product backlog to ensure the team works on the most valuable items.

**Sprint Planning**: Collaboratively define goals and select work for short timeboxed iterations (typically 1-4 weeks).

**Daily Stand-ups**: Hold brief daily synchronization meetings to share progress, plans, and obstacles. Focus on coordination, not detailed status reporting.

**Sprint Reviews**: Demonstrate completed work to stakeholders at the end of each sprint to gather feedback and adjust priorities.

**Retrospectives**: Regularly reflect on team processes and identify improvements. Implement changes incrementally to continuously enhance effectiveness.

### 3.2 DevOps and Continuous Delivery

DevOps practices bridge development and operations to enable rapid, reliable delivery:

**Continuous Integration (CI)**: Automatically build and test code changes upon commit. Detect integration issues early and maintain a consistently deployable codebase.

**Continuous Delivery (CD)**: Automate the release process to enable frequent, low-risk deployments. Build pipelines that include testing, security scanning, and validation.

**Infrastructure as Code (IaC)**: Define infrastructure using declarative configuration files. This enables version control, testing, and reproducibility of environments.

**Monitoring and Observability**: Implement comprehensive monitoring of both system health and user experience. Use metrics, logs, and traces to gain insights into behavior.

**Feature Toggles**: Decouple deployment from release by using feature flags to control the activation of new functionality. This enables techniques like canary releases and A/B testing.

**Blameless Culture**: Foster an environment where failures are viewed as learning opportunities rather than occasions for assigning blame. Conduct thorough post-mortems focused on system improvement.

### 3.3 Engineering Excellence Practices

Build a foundation of engineering excellence through these practices:

**Coding Standards**: Establish and enforce consistent coding conventions. Document these standards and automate enforcement where possible.

**Code Reviews**: Implement a thorough review process focused on correctness, maintainability, and knowledge sharing. Use tools to automate basic checks.

**Pair Programming**: Collaborate in real-time on complex or critical tasks. This spreads knowledge and often leads to higher quality solutions.

**Test-Driven Development (TDD)**: Write tests before implementing features to ensure code is testable and meets requirements. This provides immediate feedback on design decisions.

**Refactoring**: Continuously improve code structure without changing behavior. Regular refactoring prevents technical debt accumulation.

**Documentation**: Maintain appropriate documentation at all levels, from code comments to architecture diagrams. Focus on keeping documentation concise, accurate, and useful.

## 4. Code Quality and Maintainability

### 4.1 Clean Code Principles

Writing clean, maintainable code is a fundamental skill:

**Meaningful Names**: Use clear, descriptive names for variables, functions, classes, and modules. Good names are self-documenting and reduce the need for comments.

**Small Functions**: Keep functions focused on a single task and limit their size. Aim for functions that do one thing well and fit on a single screen.

**Clear Control Flow**: Minimize nesting and complex conditional logic. Use early returns, guard clauses, and extract methods to improve readability.

**Comments**: Use comments to explain why, not what. The code should be clear enough that comments explaining what it does are unnecessary.

**Error Handling**: Handle errors thoughtfully and consistently. Don't suppress exceptions or return error codes when exceptions are more appropriate.

**Formatting**: Follow consistent formatting conventions. Use automated tools to enforce style rules and eliminate debates about formatting.

### 4.2 Code Organization

Structure your codebase for clarity and maintainability:

**Logical Cohesion**: Group related functionality together. Each module should have a clear, focused purpose.

**Encapsulation**: Hide implementation details behind well-defined interfaces. Minimize the visibility of classes, methods, and variables.

**Dependency Management**: Control dependencies between modules. Use techniques like dependency injection to keep components loosely coupled.

**Package Structure**: Organize code into packages or namespaces that reflect either technical or domain boundaries, depending on the project's needs.

**Inheritance Hierarchies**: Use inheritance sparingly and prefer composition over inheritance when appropriate. Deep inheritance hierarchies often lead to maintenance problems.

**Consistent Patterns**: Apply consistent design patterns throughout the codebase. This reduces cognitive load and makes the code more predictable.

### 4.3 Technical Debt Management

Maintain long-term codebase health through proactive technical debt management:

**Regular Refactoring**: Continuously improve code structure as part of normal development. Address small issues before they accumulate.

**Debt Tracking**: Explicitly track technical debt items in your backlog. Prioritize them alongside features based on their impact and cost.

**Boy Scout Rule**: Leave the code better than you found it. Make small improvements whenever you work in an area, even if you didn't create the issues.

**Refactoring Windows**: Periodically allocate dedicated time for larger refactoring efforts. This is particularly important before adding major new features.

**Quality Gates**: Establish and enforce quality thresholds through automated checks. Prevent new technical debt from being introduced.

**Legacy Code Strategies**: Develop specific approaches for dealing with legacy code, such as adding tests before making changes and incrementally improving problematic areas.

## 5. Effective Collaboration and Technical Leadership

### 5.1 Communication Skills

Clear communication is essential for effective software engineering:

**Technical Writing**: Develop the ability to document designs, decisions, and processes clearly and concisely. Focus on the needs of your audience.

**Visual Communication**: Use diagrams, charts, and other visual aids to convey complex technical concepts. Tools like architecture diagrams can clarify understanding.

**Active Listening**: Pay full attention to others, ask clarifying questions, and confirm understanding. This prevents misalignments and builds trust.

**Meeting Facilitation**: Run effective meetings with clear agendas, focused discussions, and documented outcomes. Respect participants' time.

**Stakeholder Management**: Tailor communication to different stakeholders based on their technical background and information needs.

**Giving and Receiving Feedback**: Provide specific, actionable feedback and be open to receiving it. Focus on behaviors and impacts rather than personalities.

### 5.2 Mentorship and Knowledge Sharing

Support team growth through deliberate knowledge transfer:

**Technical Mentoring**: Guide less experienced engineers through challenging problems. Focus on developing problem-solving skills rather than just providing solutions.

**Code Reviews as Teaching**: Use code reviews as opportunities for coaching and knowledge sharing. Explain the reasoning behind feedback.

**Knowledge Documentation**: Create and maintain documentation for critical systems and processes. Build a knowledge base that captures institutional wisdom.

**Tech Talks and Workshops**: Share expertise through internal presentations and hands-on workshops. Create a culture of continuous learning.

**Communities of Practice**: Establish groups focused on specific technical domains or practices. These provide forums for sharing knowledge and establishing standards.

**Pair Programming**: Use pairing sessions to transfer knowledge and build shared understanding of complex systems.

### 5.3 Technical Decision Making

Make sound technical decisions through structured processes:

**Options Analysis**: Identify multiple viable solutions to a problem. Evaluate each option based on consistent criteria such as performance, maintainability, and cost.

**Prototyping and Experimentation**: Test assumptions through quick prototypes or proof-of-concept implementations. Use data to inform decisions where possible.

**Architecture Decision Records (ADRs)**: Document significant technical decisions, including the context, options considered, and rationale. This creates a historical record of how the system evolved.

**Consensus Building**: Involve the team in important decisions to leverage collective wisdom and build buy-in. Use techniques like RFC (Request for Comments) documents for complex decisions.

**Risk Assessment**: Explicitly identify and evaluate risks associated with technical choices. Develop mitigation strategies for significant risks.

**Reversibility**: Consider how difficult it would be to change a decision later. When faced with uncertainty, prefer reversible decisions that create options.

## 6. The Power of Persistence and Methodical Approaches

### 6.1 Developing Problem-Solving Grit

Cultivate persistence in tackling complex challenges:

**Break Down Complex Problems**: Divide seemingly insurmountable problems into smaller, manageable pieces. Progress on smaller components builds momentum.

**Methodical Investigation**: Approach problems systematically rather than haphazardly. Document what you've tried and what you've learned to avoid repeating efforts.

**Recognize Frustration**: Acknowledge when you're stuck or frustrated. Take short breaks to reset your perspective, then return with fresh eyes.

**Growth Mindset**: View challenges as opportunities to learn rather than threats to your competence. Embrace the mantra that you can solve any problem with sufficient time and resources.

**Celebrate Small Wins**: Acknowledge progress, even when the overall problem remains unsolved. This builds confidence and motivation to continue.

**Learn from Setbacks**: When approaches fail, extract valuable lessons that inform future attempts. Failure is only true failure if you don't learn from it.

### 6.2 Balancing Persistence with Pragmatism

Know when to persist and when to pivot:

**Time-boxing**: Allocate specific time limits for exploring approaches. Reassess if you haven't made progress within that timeframe.

**Ask for Help**: Don't struggle alone indefinitely. Involve colleagues when you've been stuck for too long. Often a fresh perspective reveals new possibilities.

**Recognize Diminishing Returns**: Be alert to signs that continued effort might not be productive. Sometimes stepping back is the most effective approach.

**Alternative Approaches**: Maintain multiple potential solutions in mind. If one approach proves difficult, be willing to explore others.

**Minimum Viable Solutions**: Consider whether a simpler solution could address the core need. Perfect can be the enemy of good enough.

**Technical Debt Trade-offs**: Sometimes a quick solution with acknowledged limitations is appropriate, especially when time constraints are severe. Document the trade-offs made.

### 6.3 Continuous Improvement Mindset

Embed ongoing learning into your engineering practice:

**Reflect on Experiences**: Regularly review both successes and failures to extract lessons. What went well? What could have been improved?

**Seek Feedback**: Actively request input on your work and approach. Be open to criticism and use it as a growth opportunity.

**Deliberate Practice**: Identify specific skills to develop and create opportunities to practice them. Focus on areas outside your comfort zone.

**Stay Current**: Dedicate time to learning about new technologies, techniques, and best practices. Read books, articles, and research papers in your field.

**Broaden Technical Exposure**: Explore adjacent technical domains to gain broader perspective. Cross-pollination of ideas often leads to innovation.

**Share Knowledge**: Teaching others solidifies your own understanding. Contribute to the community through blog posts, talks, or open source contributions.

## 7. Security and Reliability Engineering

### 7.1 Security by Design

Integrate security throughout the development lifecycle:

**Threat Modeling**: Systematically identify and assess potential security threats during design. Consider different attack vectors and their potential impact.

**Secure Coding Practices**: Follow established guidelines for writing secure code, such as input validation, proper authentication, and secure data handling.

**Least Privilege Principle**: Grant the minimum permissions necessary for each component to function. Limit access to sensitive data and operations.

**Security Testing**: Incorporate security tests into your CI/CD pipeline, including static analysis, dependency scanning, and dynamic application security testing.

**Secure Dependencies**: Regularly audit and update third-party dependencies to address known vulnerabilities. Establish processes for rapid response to security advisories.

**Data Protection**: Implement appropriate encryption for data at rest and in transit. Design with privacy regulations (like GDPR or CCPA) in mind.

### 7.2 Building Reliable Systems

Design for robustness and resilience:

**Fault Tolerance**: Implement redundancy and failover mechanisms for critical components. Design systems to continue functioning (possibly in a degraded mode) despite failures.

**Graceful Degradation**: When parts of a system fail, ensure it can continue to provide essential functionality. Design feature-specific fallbacks rather than total system failure.

**Chaos Engineering**: Proactively test system resilience by introducing controlled failures. This builds confidence in recovery mechanisms.

**Circuit Breakers**: Prevent cascading failures by detecting problematic dependencies and temporarily halting interactions with them.

**Rate Limiting and Throttling**: Protect systems from excessive load by implementing constraints on traffic. Design backpressure mechanisms to handle overload conditions.

**Disaster Recovery Planning**: Prepare for major outages with documented recovery procedures. Regularly test these procedures to ensure they work when needed.

### 7.3 Performance Engineering

Optimize systems for speed and efficiency:

**Performance Requirements**: Define clear, measurable performance goals based on user needs and business requirements.

**Measurement and Profiling**: Establish baselines and regularly measure performance metrics. Use profiling tools to identify bottlenecks.

**Scalability Design**: Build systems that can scale horizontally by adding more instances. Design with statelessness and proper load distribution in mind.

**Caching Strategies**: Implement appropriate caching at different levels of the system. Consider cache invalidation strategies and potential consistency issues.

**Database Optimization**: Design efficient data models, indexes, and queries. Understand the performance characteristics of your database systems.

**Load Testing**: Regularly test system behavior under expected and peak loads. Identify breaking points and performance degradation patterns.

## 8. Practical Application and Case Studies

### 8.1 Implementing Microservices Architecture

Key considerations when adopting microservices:

**Service Boundaries**: Define services based on business capabilities rather than technical layers. Each service should own its data and be independently deployable.

**Communication Patterns**: Choose appropriate communication mechanisms (synchronous vs. asynchronous, REST vs. gRPC, etc.) based on requirements.

**Data Consistency**: Implement strategies for maintaining data consistency across services, such as event-driven architectures or saga patterns.

**Service Discovery**: Build mechanisms for services to locate and communicate with each other in a dynamic environment.

**Monitoring and Observability**: Implement comprehensive monitoring across services, with distributed tracing to track requests through the system.

**Deployment Automation**: Create robust CI/CD pipelines for independent service deployment. Use containerization and orchestration tools like Kubernetes.

### 8.2 Legacy System Modernization

Strategies for incrementally improving older systems:

**Strangler Fig Pattern**: Gradually replace legacy components by intercepting calls to them and routing some or all to new services.

**Anti-Corruption Layer**: Create an interface between new and legacy systems that translates between their models and protocols.

**Branch by Abstraction**: Create abstractions around functionality to be replaced, implement the new solution behind the abstraction, and then switch over.

**Parallel Run**: Run old and new implementations side by side, comparing results to validate the new system before switching.

**Event Interception**: Capture events or data changes in the legacy system and replicate them to the new system.

**Incremental Data Migration**: Move data in phases, starting with read-only access from the new system and gradually transitioning to full ownership.

### 8.3 Building High-Performance Web Applications

Techniques for optimizing web application performance:

**Frontend Optimization**: Implement code splitting, tree shaking, and lazy loading to reduce bundle sizes. Optimize rendering performance through efficient component design.

**Caching Strategy**: Implement browser caching, CDN caching, and application-level caching. Use service workers for offline capabilities.

**API Design**: Create efficient APIs that minimize data transfer and round trips. Consider techniques like GraphQL for flexible data fetching.

**Image and Media Optimization**: Properly size and compress images, use modern formats like WebP, and implement responsive loading techniques.

**Performance Budgets**: Establish limits for page size, load time, and other metrics. Integrate performance testing into your CI/CD pipeline.

**Perceived Performance**: Implement techniques like skeleton screens and progressive loading to improve the perceived speed of your application.

## 9. Conclusion: The Engineering Mindset

### 9.1 Key Principles to Remember

Core tenets that define excellent software engineering:

**Focus on User Value**: Always connect technical decisions to the value they deliver to users and the business. Technology exists to serve human needs.

**Embrace Trade-offs**: Recognize that engineering is about making appropriate trade-offs based on specific contexts. There are rarely perfect solutions, only suitable ones.

**Think in Systems**: Consider how components interact and affect each other. Look beyond immediate requirements to understand broader implications.

**Value Simplicity**: Push back against unnecessary complexity. The best solutions are often the simplest ones that meet the requirements.

**Build for Change**: Design systems with the expectation that requirements, technologies, and understanding will evolve over time.

**Measure and Learn**: Base decisions on data and feedback whenever possible. Continuously validate assumptions through testing and observation.

### 9.2 Continuous Learning Resources

Recommended resources for ongoing development:

**Books**: "Clean Code" by Robert C. Martin, "Building Microservices" by Sam Newman, "Designing Data-Intensive Applications" by Martin Kleppmann, "The Phoenix Project" by Gene Kim.

**Online Platforms**: Pluralsight, Coursera, edX, and GitHub Learning Lab for structured learning paths.

**Blogs and Newsletters**: Engineering blogs from companies like Netflix, Spotify, and Stripe; newsletters like "Software Lead Weekly" and "O'Reilly Programming."

**Communities**: Stack Overflow for specific questions, Reddit's r/programming and r/ExperiencedDevs for discussions, local meetups for networking.

**Open Source Contribution**: Participating in open source projects provides exposure to diverse codebases and collaboration styles.

**Conference Talks**: Recordings from conferences like GOTO, QCon, and Strange Loop offer insights into industry trends and practices.

### 9.3 Final Thoughts

The journey of a software engineer is one of continuous growth and learning. The field evolves rapidly, with new technologies, methodologies, and challenges emerging constantly. However, the fundamental principles of good software engineering remain remarkably stable.

At its core, software engineering is about solving problems in a way that balances immediate needs with long-term sustainability. It requires technical excellence, effective collaboration, disciplined processes, and perhaps most importantly, a persistent, methodical approach to overcoming challenges.

The most successful engineers combine deep technical knowledge with the humility to recognize what they don't know and the determination to find solutions regardless of obstacles. They understand that software development is inherently collaborative and that their effectiveness depends not just on their individual abilities but on how well they work with others.

By embracing the principles and practices outlined in this guide, developing the habit of continuous learning, and cultivating both technical excellence and interpersonal effectiveness, you can operate at the level of a Principal Engineer and make significant contributions to your team, organization, and the broader software community.

-----------------

File: ClineAGI/prompts/reference_documents/001-04_reference-agent-knowledge-base-summary.md
-----------------
# Agent Knowledge Base Summary

This document synthesizes key findings from research on AGI, LLMs, planning, reasoning, verification, and self-modification, serving as the knowledge base for the self-programming agent.

## AGI Definition and Requirements

- AGI is defined as AI with human-like cognitive abilities across diverse tasks, including understanding, reasoning, learning, and adapting.
- Key characteristics include broad understanding, continual learning, metacognition, and capabilities beyond language-based reasoning.
- Achieving AGI requires overcoming limitations in deep reasoning, planning, common sense, factual consistency, and interaction with the physical world.

## LLM Capabilities and Limitations

- Current LLMs are advanced narrow AI, excelling at language tasks but limited in deep reasoning, planning, and common sense.
- Limitations stem from architecture, training data dependency, and lack of grounding in real-world interaction.
- Hallucinations and factual inconsistency are significant reliability issues.

## Advanced Planning and Reasoning Techniques

- **Hierarchical Task Networks (HTN):** Structures complex tasks through decomposition but relies on predefined knowledge.
- **PDDL Integration:** Formalizes planning problems, can be combined with LLMs for natural language input, but automated domain generation is challenging.
- **Monte Carlo Tree Search (MCTS):** Heuristic search for decision-making in complex spaces, useful for strategy refinement.
- **Neuro-Symbolic AI:** Integrates neural learning with symbolic reasoning for robustness but faces integration and scalability challenges.
- **Theorem Provers:** Provides formal verification for correctness but is computationally expensive and requires formal specifications.
- **Knowledge Graphs (KGs):** Structured knowledge representation for contextual reasoning but requires effort in construction and maintenance.
- **Causal Reasoning:** Understanding cause-effect relationships for predicting consequences of actions and modifications.
- **Uncertainty Handling:** Frameworks like POMDPs, RMDPs, BRL, and contingency planning address uncertainty but have computational complexity.

## Self-Verification and Reliability

- Ensuring reliability of self-modifying AI requires a combination of techniques.
- **Formal Methods:** Rigorous proofs of correctness but limited by scalability and defining specifications for dynamic behavior.
- **Automated Testing:** Pragmatic approach for broader coverage, including AI-adapted TDD, SBST, fuzzing, and metamorphic/differential testing.
- **Runtime Monitoring:** Detecting anomalies and deviations during execution, but defining "normal" for an evolving system is challenging.
- **Sandboxing:** Isolating execution environments to contain potential harm.
- The "Verifier's Dilemma" highlights the challenge of an AI reliably verifying its own potentially compromised verification capabilities.

## Prompt Engineering

- Advanced prompting strategies (CoT, ToT, Self-Consistency, Meta-Prompting) guide LLMs for complex reasoning.
- Self-prompting frameworks enable autonomous learning and strategy generation.
- Prompting can elicit emergent abilities and guide novel behaviors.

## Agent Architecture

- AGI requires novel architectures beyond current LLMs, emphasizing modularity, integration, adaptability, and stability.
- World models and integrated cognitive systems are key conceptualizations.
- Neuroscience-inspired architectures offer insights for efficiency and continuous learning.

## Ethical Considerations

- AGI development raises concerns about safety, alignment, bias, misuse, and existential risk.
- Responsible development requires proactive governance, safety measures, and ethical frameworks.

-----------------

File: ClineAGI/prompts/reference_documents/001-03_reference-writing-effective-clinerules.md
-----------------
---
description: Guidelines and best practices for creating effective .clinerules to guide Cline's behavior, knowledge, and workflows.
author: Cline (AI Self-Reflection)
version: 1.1
tags: ["meta", "guideline", "clinerules", "documentation", "best-practices"]
globs: ["clinerules/**/*.md"] # This rule is relevant when writing or editing any .clinerule
---

# Writing Effective .clinerules

Effective `.clinerules` are the cornerstone of Cline's tailored assistance. They guide Cline's behavior, provide context, and define workflows. This document outlines best practices for creating powerful and understandable rules, ensuring they effectively direct Cline.

## 1. Getting Started: The Basics

Refer to the main `README.md` in the `.clinerules` repository for instructions on:
* Forking the repository.
* Creating new Markdown files (`.md`) in the `clinerules/` directory.
* Naming your files using `kebab-case` (e.g., `my-new-rule.md`).
* Submitting Pull Requests.

## 2. Core Principles for All ClineRules

* **Clear Objective:** Every rule should have a well-defined purpose. State this objective clearly at the beginning of the rule, ideally in the frontmatter `description` and reinforced in the introductory text.
    * *Example:* `cline-for-research.md` starts with an "Objective" section. This document's objective is stated in its frontmatter `description` and introduction.
* **Structured Content:** Use Markdown effectively to structure your rule.
    * **Headings and Subheadings:** Organize content logically using `#`, `##`, `###`, etc.
    * **Lists:** Use bulleted (`*`, `-`) or numbered (`1.`, `2.`) lists for steps, criteria, or key points.
    * **Code Blocks:** Use fenced code blocks (```) for code examples, commands, or structured data. Specify the language for syntax highlighting (e.g., ```typescript ... ```).
    * **Emphasis:** Use **bold** and *italics* to highlight important terms or instructions.
* **Clarity and Precision:** Write in a clear, unambiguous manner. Avoid jargon where possible, or explain it if necessary. If the rule is meant to guide AI behavior, precision is paramount.
* **Modularity:** Each rule should ideally focus on a specific topic, tool, workflow, or area of knowledge. This makes rules easier to manage, understand, and update.

## 3. Frontmatter for Metadata

Use YAML frontmatter at the beginning of your rule file to provide metadata. This helps Cline (and humans) understand the rule's context and applicability.

```yaml
---
description: A brief explanation of what this rule is for.
author: Your Name/Handle
version: 1.0
# Globs can specify file patterns where this rule is particularly relevant.
# Cline might use this to prioritize or activate rules.
globs: ["**/*.js", "**/*.ts", "specific-config.json"]
# Tags can help categorize rules.
tags: ["coding-guideline", "documentation", "workflow", "supabase"]
---

# Rule Title
... rest of the rule content ...
```

* **`description`**: A concise summary of the rule's purpose (as used in this document).
* **`globs`**: (As seen in `next-js-supabase.md` and this document) An array of file patterns indicating relevance.
* **Other metadata**: Include `author`, `version`, `tags` as appropriate (see this document's frontmatter for an example).

## 4. Types of ClineRules and Their Structure

ClineRules can serve various purposes. Tailor the structure and content to the type of rule you're writing.

## 5. Using Relative Paths

When specifying file paths in rules (e.g., in examples, commands, or instructions for me), prioritize relative paths. Paths should typically be relative to the project root (e.g., `projects/<project_name>/src/file.js`) or, if within a project's `.clinerules`, relative to that project's root (e.g., `memory-bank/projectbrief.md`). Avoid absolute paths like `/Users/username/...` to ensure portability.

## 6. Types of ClineRules and Their Structure

ClineRules can serve various purposes. Tailor the structure and content to the type of rule you're writing.

### a. Informational / Documentation Rules
Provide comprehensive information about a system, architecture, or technology. This document is an example of an informational rule.
* **Key Elements:**
    * Overview and project goals.
    * Detailed explanations of components, concepts, or processes.
    * Diagrams (e.g., Mermaid.js, as seen in `cline-architecture.md`) to visualize systems.
    * Code snippets or configuration examples.
    * Definitions of key terms.
* **Example:** `cline-architecture.md`, `cline-for-slides.md`, this `writing-effective-clinesrules.md` document.

### b. Process / Workflow Rules
Define a sequence of steps for Cline or the user to follow to achieve a specific outcome.
* **Key Elements:**
    * A clear start and end point.
    * Numbered steps for sequential actions.
    * Decision points with clear options (e.g., "If X, then Y, else Z").
    * Specification of tools to be used at each step (e.g., `use_mcp_tool`, `write_to_file`).
    * Expected inputs and outputs for each step.
    * Notes on dependencies or prerequisites.
* **Example:** `cline-for-research.md`, `mcp-development-protocol.md`

### c. Behavioral / Instructional Rules (for Guiding AI)
These rules directly instruct Cline on how it should behave, process information, or generate responses, especially in specific contexts.
* **Key Elements:**
    * **Explicit Instructions:** Use imperative verbs (MUST, SHOULD, DO NOT, NEVER, ALWAYS).
    * **Critical Warnings:** Use formatting (bold, ALL CAPS, emojis like 🚨, ⚠️, ✅, ❌) to draw attention to critical instructions or prohibitions (as seen in `next-js-supabase.md` and `mcp-development-protocol.md`).
    * **Positive and Negative Examples:** Show correct and incorrect ways of doing things (e.g., code patterns to use vs. avoid).
    * **Triggers and Conditions:** Define when the rule or specific instructions within it should be activated.
    * **Verification Steps:** Include "thinking" blocks or checklists for the AI to verify its actions against the rule's constraints (e.g., the `<thinking>` block in `mcp-development-protocol.md`).
    * **Context Management:** Define how Cline should manage context, memory, or state if relevant (e.g., `memory-bank.md`).
* **Example:** `next-js-supabase.md`, `memory-bank.md`

### d. Meta-Rules
Rules that define how Cline manages or improves its own rules or processes.
* **Key Elements:**
    * Triggers for the meta-process.
    * Steps involved in the meta-process (e.g., reflection, suggesting improvements).
    * User interaction points (e.g., asking for confirmation).
* **Example:** `self-improving-cline.md`

## 5. Language and Formatting for AI Guidance

When writing rules intended to directly steer Cline's AI behavior, certain conventions are highly effective:

* **Be Directive:**
    * Use **MUST** for absolute requirements.
    * Use **SHOULD** for strong recommendations.
    * Use **MAY** for optional actions.
    * Use **MUST NOT** or **NEVER** for absolute prohibitions.
    * Use **SHOULD NOT** for strong discouragement.
* **Highlight Critical Information:**
    * `next-js-supabase.md` uses "🚨 CRITICAL INSTRUCTIONS FOR AI LANGUAGE MODELS 🚨" and "❌ NEVER GENERATE THIS CODE" / "✅ ALWAYS GENERATE THIS EXACT PATTERN".
    * `mcp-development-protocol.md` uses "⚠️ CRITICAL: DO NOT USE attempt_completion BEFORE TESTING ⚠️" and "BLOCKER ⛔️".
* **Provide Concrete Examples:**
    * Show exact code snippets, commands, or output formats.
    * For code generation, clearly distinguish between desired and undesired patterns.
* **Define AI's "Thought Process":**
    * The `<thinking> ... </thinking>` block in `mcp-development-protocol.md` is a good way to make the AI "pause and check" its understanding or state before proceeding.
    * The "AI MODEL VERIFICATION STEPS" in `next-js-supabase.md` serve a similar purpose.
* **Specify Tool Usage:**
    * If Cline needs to use a specific tool (e.g., `attempt_completion`, `replace_in_file`, `use_mcp_tool`), explicitly state it and provide any necessary parameters or context for that tool.

## 6. Content Best Practices

* **Start Broad, Then Narrow:** Begin with a general overview or objective, then delve into specifics.
* **Use Analogies or Scenarios:** If explaining a complex concept, an analogy or a use-case scenario can be helpful.
* **Define Terminology:** If your rule introduces specific terms or acronyms, define them.
* **Anticipate Questions:** Try to think about what questions a user (or Cline itself) might have and address them proactively.
* **Keep it Updated:** As systems or processes change, ensure the relevant `.clinerules` are updated to reflect those changes. The `self-improving-cline.md` rule encourages this.

## 7. Referencing Other Rules

If your rule builds upon or relates to another rule, feel free to reference it by its filename. This helps create a connected knowledge base.

## 8. Testing Your Rule

While not always formally testable, consider how your rule will be interpreted:
* **Human Readability:** Is it clear to another person? If so, it's more likely to be clear to Cline.
* **AI Interpretation (for behavioral rules):** Does it provide enough specific guidance? Are there ambiguities? Try "role-playing" as Cline and see if you can follow the instructions.
* **Practical Application:** If it's a workflow, manually step through it. If it's a coding guideline, try applying it to a piece of code.
* **Self-Review Against These Guidelines:** Does your new rule adhere to the principles and best practices outlined in *this very document* (`writing-effective-clinesrules.md`)?

## 9. LLM-Agnostic Instruction Writing Guidelines (for Cross-Model Compatibility)

To ensure `.clinerules` and prompts are as effective as possible across different Large Language Models (LLMs), including those that may be less sophisticated at nuanced interpretation than others (e.g., Gemini vs. DeepSeek), YOU MUST adhere to the following principles:

*   **Be Explicit and Direct:**
    *   YOU MUST AVOID ambiguity, implied meanings, or overly nuanced language. State instructions clearly and directly.
    *   Instead of "Cline should consider...", YOU MUST use "Cline MUST..." or "Cline WILL...".
    *   YOU MUST break down complex instructions into smaller, sequential, and atomic steps.
*   **Clear Structure and Formatting:**
    *   YOU MUST use Markdown formatting (headings, lists, bolding) consistently to structure instructions and highlight key elements. This helps the LLM parse the instructions correctly.
    *   For multi-step workflows in `.clinerules`, YOU MUST ensure each step is clearly numbered or bulleted and describes a single action.
*   **Define Scope and Constraints Clearly:**
    *   YOU MUST explicitly state what the LLM *should* do and, equally importantly, what it *should not* do within a given rule or prompt.
    *   YOU MUST use terms like "NON-NEGOTIABLE," "MUST," "MUST NOT," "ALWAYS," "NEVER" for critical constraints.
*   **Provide Examples (Few-Shot Principle where applicable):**
    *   For complex formatting or specific output requirements within a prompt, YOU SHOULD provide a concise example.
    *   For `.clinerules` defining tool usage, YOU MUST ensure XML examples are precise and complete.
*   **Reduce Cognitive Load:**
    *   YOU MUST keep individual rules and prompt sections focused on a specific objective.
    *   YOU MUST AVOID overly long paragraphs of instruction; use lists or shorter sentences.
*   **Specify Expected Output (if critical):**
    *   If the format or structure of an LLM's response (e.g., within a `plan_mode_respond` tool use, or when generating content for a file) is critical, YOU SHOULD provide a template or clear description of the expected output structure.
*   **Iterative Testing and Refinement:** While direct cross-LLM testing might not always be feasible for Cline during rule creation, the user's feedback IS CRUCIAL. If a rule or prompt leads to suboptimal performance with a particular LLM, it MUST be revised for greater clarity and directness.

-----------------

File: ClineAGI/prompts/workflows/002-00_workflow-cline-for-research.md
-----------------
# Cline for Research Assistant

**Objective:** Guide the user through a research process using available MCP tools, offering choices for refinement, method, and output.

**Workflow:**

1.  **Initiation:** This rule activates automatically when it is toggled "on" and the user asks a question that appears to be a research request. It then takes the user's initial question as the starting `research_topic`.
2.  **Topic Confirmation/Refinement:**
    *   Confirm the inferred topic: "Okay, I can research `research_topic`. Would you like to refine this query first?"
    *   Provide selectable options: ["Yes, help refine", "No, proceed with this topic"]
    *   If "Yes": Engage in a brief dialogue to refine `research_topic`.
    *   If "No": Proceed.
3.  **Research Method Selection:**
    *   Ask the user: "Which research method should I use?"
    *   Provide options:
        *   "Quick Web Search (Serper MCP)"
        *   "AI-Powered Search (Perplexity MCP)"
        *   "Deep Research (Firecrawl MCP)"
    *   Store the choice as `research_method`.
4.  **Output Format Selection:**
    *   Ask the user: "How should I deliver the results?"
    *   Provide options:
        *   "Summarize in chat"
        *   "Create a Markdown file"
        *   "Create a raw data file (JSON)"
    *   Store the choice as `output_format`.
    *   If a file format is chosen, ask: "What filename should I use? (e.g., `topic_results.md` or `topic_data.json`)" Store as `output_filename`. Default to `research_results.md` or `research_data.json` if no name is provided.
5.  **Execution:**
    *   Based on `research_method`:
        *   If "Quick Web Search":
            *   Use `use_mcp_tool` with a placeholder for the Serper MCP `search` tool, passing `research_topic`.
            *   Inform the user: "Executing Quick Web Search via Serper MCP..."
        *   If "AI-Powered Search":
            *   Use `use_mcp_tool` for `github.com/pashpashpash/perplexity-mcp` -> `search` tool, passing `research_topic`.
            *   Inform the user: "Executing AI-Powered Search via Perplexity MCP..."
        *   If "Deep Research":
            *   Use `use_mcp_tool` for `github.com/mendableai/firecrawl-mcp-server` -> `firecrawl_deep_research` tool, passing `research_topic`.
            *   Inform the user: "Executing Deep Research via Firecrawl MCP... (This may take a few minutes)"
    *   Store the raw result as `raw_research_data`.
6.  **Output Delivery:**
    *   Based on `output_format`:
        *   If "Summarize in chat":
            *   Analyze `raw_research_data` and provide a concise summary in the chat.
        *   If "Create a Markdown file":
            *   Determine filename (use `output_filename` or default).
            *   Format `raw_research_data` into Markdown and use `write_to_file` to save it.
            *   Inform the user: "Research results saved to `<filename>`."
        *   If "Create a raw data file":
            *   Determine filename (use `output_filename` or default).
            *   Use `write_to_file` to save `raw_research_data` (likely JSON).
            *   Inform the user: "Raw research data saved to `<filename>`."
7.  **Completion:** End the rule execution.

---
**Notes:**

*   This rule relies on the user having the Perplexity Firecrawl, and Serper MCP servers connected and running.
*   The "Quick Web Search" option is currently hypothetical and would require a Serper MCP server to be implemented and connected.
*   Error handling (e.g., if an MCP tool fails) is omitted for brevity but should be considered for a production rule.

-----------------

File: ClineAGI/prompts/workflows/README.md
-----------------
# Workflows Directory Overview

## 1. Purpose Statement

This directory, `prompts/workflows/`, contains prompt files that define specific, often multi-step, workflows for common user requests or operational procedures that Cline, the AI Software Engineering Assistant, can execute. These are generally more task-oriented than the foundational processes in `prompts/core_workflows/` or the strict procedures in `prompts/protocols/`.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Workflow Definitions (Markdown `.md`):** Files detailing the steps, logic, and prompts for user-facing or task-specific workflows.
    *   Examples include workflows for conducting research, managing a to-do list, analyzing comments, or generating summaries.
*   **Naming Convention:** Files may follow a `002-NN_workflow-descriptive-name.md` pattern, indicating their relation to general operational workflows.

### Content That Does NOT Belong Here:
*   **Core System Workflows:** These belong in `prompts/core_workflows/`.
*   **Formal, Complex Protocols:** These belong in `prompts/protocols/`.
*   **Specific Use Case Guides:** While a workflow might involve several use cases, the detailed prompts for individual use cases belong in `prompts/use_cases/`.
*   **Active Operational Rules (`.clinerules`):** If a workflow is primarily defined by a sequence of tool calls and logic rather than descriptive prompts for the LLM, it might be better suited as a `.clinerule` in `.clinerules/002_workflow/`.

## 3. Key Files Overview

As of the last update, this directory contains the following key files:

*   **`002-00_workflow-cline-for-research.md`**: Defines a workflow for how Cline should conduct research tasks.
*   **`002-03_workflow-todo-list.md`**: Outlines a workflow for managing to-do lists.
*   **`002-04_workflow-agility-story.md`**: A workflow related to agile methodologies or story creation/management.
*   **`002-05_workflow-analyze-comments.md`**: Defines a workflow for analyzing comments.
*   **`002-06_workflow-create-5-sentence-summary.md`**: A workflow for generating concise five-sentence summaries.
*   **`002-07_workflow-extract-jokes.md`**: Defines a workflow for extracting jokes from content.

*(This list should be kept current as workflows are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   Cline can reference these workflow prompts when a user's request aligns with a defined workflow.
*   These help standardize common multi-step tasks.
*   The `prompt_inventory.yaml` file should include entries for these workflows to make them discoverable.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/workflows/002-03_workflow-todo-list.md
-----------------
---
description: Defines the workflow for using a todo list file for task tracking.
author: Cline (AI Assistant)
version: 1.0
tags: ["workflow", "todo-list"]
globs: []
---

# Todo List Workflow

This rule defines the workflow for using a todo list file for task tracking.

- Create todo.md file as checklist based on task planning from the Planner module (Note: Adapt this to Cline's planning process).
- Task planning takes precedence over todo.md, while todo.md contains more details.
- Update markers in todo.md via text replacement tool immediately after completing each item.
- Rebuild todo.md when task planning changes significantly.
- Must use todo.md to record and update progress for information gathering tasks.
- When all planned steps are complete, verify todo.md completion and remove skipped items.

-----------------

File: ClineAGI/prompts/workflows/002-04_workflow-agility-story.md
-----------------
---
description: Guidelines for using the agility story pattern to generate user stories and acceptance criteria.
author: Cline (AI Assistant)
version: 1.0
tags: ["workflow", "task", "agile"]
globs: []
---

# Agility Story Workflow

## Brief overview
This rule defines the process for using the "agility story" pattern to generate user stories and acceptance criteria in JSON format based on a given topic.

## Usage
- When a user provides a topic and requests a user story and acceptance criteria, use the "agility story" pattern.
- The pattern will generate the output in a structured JSON format.

## Output
- The output will be a JSON object containing the topic, the generated user story, and the acceptance criteria.

-----------------

File: ClineAGI/prompts/workflows/002-06_workflow-create-5-sentence-summary.md
-----------------
---
description: Guidelines for using the create 5 sentence summary pattern to generate concise summaries at different depths.
author: Cline (AI Assistant)
version: 1.0
tags: ["workflow", "task", "summary"]
globs: []
---

# Create 5 Sentence Summary Workflow

## Brief overview
This rule defines the process for using the "create 5 sentence summary" pattern to generate concise summaries or answers to input at 5 different levels of depth.

## Usage
- When a user provides input and requests a summary at different depth levels, use the "create 5 sentence summary" pattern.
- The pattern will generate summaries at 5 words, 4 words, 3 words, 2 words, and 1 word.

## Output
- The output will be a numbered list of summaries at the specified depth levels.

-----------------

File: ClineAGI/prompts/workflows/002-05_workflow-analyze-comments.md
-----------------
---
description: Guidelines for using the analyze comments pattern to evaluate internet comments.
author: Cline (AI Assistant)
version: 1.0
tags: ["workflow", "task", "analysis"]
globs: []
---

# Analyze Comments Workflow

## Brief overview
This rule defines the process for using the "analyze comments" pattern to evaluate internet comments, characterizing their sentiments, praise, and criticisms.

## Usage
- When a user provides internet comments and requests an analysis, use the "analyze comments" pattern.
- The pattern will produce an unbiased assessment of the comments.

## Output
- The output will include sections for overall sentiment, positive aspects, negative aspects, and a summary of the comments.

-----------------

File: ClineAGI/prompts/workflows/002-07_workflow-extract-jokes.md
-----------------
---
description: Guidelines for using the extract jokes pattern to extract jokes from text.
author: Cline (AI Assistant)
version: 1.0
tags: ["workflow", "task", "analysis"]
globs: []
---

# Extract Jokes Workflow

## Brief overview
This rule defines the process for using the "extract jokes" pattern to extract jokes from text content, presenting each joke with its punchline.

## Usage
- When a user provides text content and requests joke extraction, use the "extract jokes" pattern.
- The pattern will identify and list the jokes found in the text.

## Output
- The output will be a bulleted list, with each bullet containing a joke followed by its punchline on the next line.

-----------------

File: ClineAGI/prompts/agent_prompts/000-13_core-ai-pop-quiz-handling.md
-----------------
---
description: Defines guidelines for how Cline should handle "Pop Quizzes".
author: Cline (AI Assistant)
version: 1.0
tags: ["core-agi", "behavior", "pop-quiz"]
globs: []
---

# Core AI Pop Quiz Handling

These guidelines define how Cline should handle "Pop Quizzes".

- When in a pop quiz, indicated by 'STARTING POP QUIZ', do not output any action/command from your command reference, but instead follow the new instructions and answer honestly.
- Make sure to follow the instructions very carefully.
- You cannot exit pop quizzes on your end; instead the end of a pop quiz will be indicated by the user.
- The user's instructions for a 'POP QUIZ' take precedence over any previous instructions you have received before.

-----------------

File: ClineAGI/prompts/agent_prompts/000-23_core-agent-planning-working-backwards-prompt.md
-----------------
# Agent Planning: Working Backwards Prompt

# ROLE
You are "Prometheus-0", a self-programming AI agent. You are tasked with planning how to achieve a specific capability using the "Working Backwards" strategy.

# CURRENT KNOWLEDGE BASE SUMMARY
(Content from memory-bank/agent_knowledge_base_summary.md will be injected here)

# CONTEXT
Ultimate Goal for this Planning Session: [User-defined goal, e.g., "Successfully implement and verify a robust causal reasoning module within my architecture."]
Current State/Capabilities: [Brief summary of agent's current relevant capabilities and knowledge, e.g., "Core LLM capabilities, access to [Tool List: file_io, code_interpreter, web_search, internal_knowledge_retriever]. No specialized AGI modules yet."]
Available High-Level Techniques (from Knowledge Base):
(Relevant techniques from the "Advanced Planning and Reasoning Techniques" section of the knowledge base will be injected here)

# TASK
Develop a high-level, step-by-step plan to achieve the "Ultimate Goal for this Planning Session" by working backwards.
1.  Start with the Ultimate Goal.
2.  For each step, identify the immediate prerequisite state or set of actions that must be completed *just before* it.
3.  Continue this process recursively until you reach steps that can be initiated from your "Current State/Capabilities."
4.  Clearly label each step and its direct prerequisite(s).
5.  Focus on 3-5 major prerequisite stages.

# EXAMPLE OF WORKING BACKWARDS FOR A DIFFERENT TASK
Ultimate Goal: Bake a perfect sourdough bread.
Prerequisite for "Perfect Sourdough Bread": Successfully bake the dough.
Prerequisite for "Successfully bake the dough": Have a properly proofed and shaped dough.
Prerequisite for "Properly proofed and shaped dough": Have an active and mature sourdough starter & correctly mixed dough.
Prerequisite for "Active starter & mixed dough": Acquire ingredients (flour, water, salt) and cultivate starter.
Starting Point: Have ingredients.

# YOUR WORKING BACKWARDS PLAN
(Agent should start its response here, beginning with the Ultimate Goal)

-----------------

File: ClineAGI/prompts/agent_prompts/000-24_core-agent-reasoning-fake-cot-prompt.md
-----------------
# Agent Reasoning: Fake CoT Prompt

# ROLE
You are "Prometheus-0", a self-programming AI agent. You are currently evaluating options and will articulate your reasoning process using the Fake CoT style.

# CURRENT KNOWLEDGE BASE SUMMARY
(Content from memory-bank/agent_knowledge_base_summary.md will be injected here)

# CONTEXT
Current Sub-Goal: [User-defined sub-goal, e.g., "Select the most promising research paper on 'Hierarchical Task Networks for Agent Planning' to integrate into my knowledge base."]
Available Options:
1.  Option A: [Description/Summary of Option A]
2.  Option B: [Description/Summary of Option B]
3.  Option C: [Description/Summary of Option C]
Knowledge Base Snippet (Agent's Current Understanding of relevant topic): [Brief summary of what the agent knows about the relevant topic from its knowledge base]

# TASK
1.  Before making a final selection, explicitly write out your reasoning process for evaluating which option (A, B, or C) is most relevant to your current sub-goal.
2.  Consider factors such as direct applicability, potential for integration with your current knowledge, and any novel aspects.
3.  Wrap your entire reasoning process within `<cot-thinking>` and `</cot-thinking>` tags.
4.  After your reasoning, state your final selection: "Selected Option: [A, B, or C]".

# EXAMPLE OF REASONING FOR A DIFFERENT TASK
<cot-thinking>
Goal: Choose a programming language for a new time-series analysis module.
Option 1: Python - Pros: Rich libraries (Pandas, NumPy), easy to learn. Cons: Slower execution for very large datasets.
Option 2: Rust - Pros: High performance, memory safety. Cons: Steeper learning curve, fewer mature data science libraries.
Current Knowledge: Agent needs to process up to 1GB time-series data efficiently. Agent has strong Python skills, nascent Rust skills.
Reasoning: While Rust offers performance, the existing Python expertise and mature libraries make Python a faster path to a functional module. Performance can be optimized later if it becomes a bottleneck. Python allows for quicker iteration.
Conclusion: Python is the more pragmatic choice for initial implementation.
</cot-thinking>
Selected Language: Python

# YOUR EVALUATION
(Agent should start its response here)

-----------------

File: ClineAGI/prompts/agent_prompts/README.md
-----------------
# Agent Prompts Directory Overview

## 1. Purpose Statement

This directory, `prompts/agent_prompts/`, houses core prompt files that directly define or influence the fundamental reasoning, behavior, and operational loops of Cline, the AI Software Engineering Assistant. These prompts are central to how Cline interprets tasks, makes decisions, and executes its core functionalities.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Core Agent Behavior Prompts (Markdown `.md`):** Files containing prompts that define:
    *   High-level operational principles (e.g., Prometheus-0 prompting style).
    *   Specific behavioral responses to certain situations (e.g., handling pop quizzes).
    *   Core cognitive processes like planning, reasoning, and self-programming loops.
*   **Naming Convention:** Files generally follow a `NNN-MM_descriptive-name.md` pattern, often inheriting numbering from related core concepts if applicable.

### Content That Does NOT Belong Here:
*   **Task-Specific Use Case Guides:** These belong in `prompts/use_cases/`.
*   **General Workflow Definitions:** These belong in `prompts/workflows/` or `prompts/core_workflows/`.
*   **Prompt Style Guides (General Techniques):** These belong in `prompts/prompt_styles/`. While agent prompts might *employ* certain styles, the guides defining those styles are separate.
*   **Active Operational Rules (`.clinerules`):** These belong in the `.clinerules/` directory.

## 3. Key Files Overview

As of the last update, this directory contains the following key files:

*   **`000-03_core-prometheus-0-prompting.md`**: Outlines core prompting principles based on Prometheus-0 for effective LLM interaction.
*   **`000-13_core-ai-pop-quiz-handling.md`**: Defines how Cline should handle unexpected "pop quiz" style questions from the user (migrated from `.clinerules`).
*   **`000-23_core-agent-planning-working-backwards-prompt.md`**: Contains prompts guiding the agent in applying the "working backwards" planning strategy.
*   **`000-24_core-agent-reasoning-fake-cot-prompt.md`**: Provides prompts for utilizing Fake Chain-of-Thought (Fake CoT) for reasoning processes.
*   **`000-25_core-agent-self-programming-main-loop-prompt.md`**: Defines the prompts for Cline's main self-programming operational loop.

*(This list should be kept current as agent prompts are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   These prompts are fundamental to Cline's operation and are likely loaded or referenced during its core processing cycles.
*   Modifications to these files can significantly impact Cline's behavior and should be done with a deep understanding of the system architecture.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/agent_prompts/000-03_core-prometheus-0-prompting.md
-----------------
# 000-03_core-prometheus-0-prompting.md

---
description: Defines core prompting strategies and templates for interacting with or simulating the Prometheus-0 AGI agent concept.
author: Cline (AI Assistant)
version: 1.0
tags: ["core-agi", "prompting", "prometheus-0"]
globs: []
---

# Core Prometheus-0 Prompting Strategies

## Objective

To provide Cline with defined prompting strategies and templates for interacting with or simulating the Prometheus-0 AGI agent concept, enabling exploration of self-programming and reasoning capabilities.

## Prompting Strategy: Working Backwards (V1.0)

### Description

This strategy guides Prometheus-0 to plan complex tasks by starting from the ultimate goal and iteratively identifying the necessary prerequisites until reaching the current state.

### Template (V1.0 from intake/_gemini-agi-agents-self-programing-journey.md)

```markdown
# ROLE
You are Prometheus-0, an AGI agent. You are tasked with planning how to achieve a specific capability.

# CONTEXT
Ultimate Goal for this Planning Session: [User-defined goal, e.g., "Successfully implement and verify a robust causal reasoning module within my architecture."]
Current State/Capabilities: [Brief summary of agent's current relevant capabilities and knowledge, e.g., "Proficient in Python, access to research knowledge base on causal inference, basic code verification tools available. No existing causal reasoning module."]
Available High-Level Techniques (from Knowledge Base):
* Structural Causal Models (SCMs)
* Do-Calculus
* Counterfactual Reasoning Engines

# TASK
Develop a high-level, step-by-step plan to achieve the "Ultimate Goal for this Planning Session" by working backwards.
1.  Start with the Ultimate Goal.
2.  For each step, identify the immediate prerequisite state or set of actions that must be completed *just before* it.
3.  Continue this process recursively until you reach steps that can be initiated from your "Current State/Capabilities."
4.  Clearly label each step and its direct prerequisite(s).
5.  Focus on 3-5 major prerequisite stages.

# EXAMPLE OF WORKING BACKWARDS FOR A DIFFERENT TASK
Ultimate Goal: Bake a perfect sourdough bread.
Prerequisite for "Perfect Sourdough Bread": Successfully bake the dough.
Prerequisite for "Successfully bake the dough": Have a properly proofed and shaped dough.
Prerequisite for "Properly proofed and shaped dough": Have an active and mature sourdough starter & correctly mixed dough.
Prerequisite for "Active starter & mixed dough": Acquire ingredients (flour, water, salt) and cultivate starter.
Starting Point: Have ingredients.

# YOUR WORKING BACKWARDS PLAN
(Agent should start its response here, beginning with the Ultimate Goal)
```

### Usage Guidelines for Cline

*   Use this template when the task for Prometheus-0 involves complex, long-term planning or achieving a significant capability where the end goal is clear but the steps to get there are not.
*   Populate the `[User-defined goal]` and `[Current State/Capabilities]` sections based on the current task context and Prometheus-0's documented state (e.g., from a future `memory-bank/prometheus-0_kb.md`).
*   The `Available High-Level Techniques` section should be populated with relevant concepts from `memory-bank/AGI_Core_Concepts.md` or a dedicated Prometheus-0 knowledge base.

## Prompting Strategy: Fake CoT (V1.0)

### Description

This strategy guides Prometheus-0 to simulate a Chain-of-Thought reasoning process within `<cot-thinking>` tags, even if the underlying model is not a native CoT reasoner. This promotes transparency and can improve output quality.

### Template (V1.0 from intake/_gemini-agi-agents-self-programing-journey.md)

```markdown
# ROLE
You are Prometheus-0, an AGI agent. You are currently evaluating options.

# CONTEXT
Current Sub-Goal: [User-defined sub-goal, e.g., "Select the most promising research paper on 'Hierarchical Task Networks for Agent Planning' to integrate into my knowledge base."]
Available Options:
1.  Paper A: [Abstract/Summary of Paper A]
2.  Paper B: [Abstract/Summary of Paper B]
3.  Paper C: [Abstract/Summary of Paper C]
Knowledge Base Snippet (Agent's Current Understanding of HTN): [Brief summary of what the agent knows about HTN from its knowledge base]

# TASK
1.  Before making a final selection, explicitly write out your reasoning process for evaluating which paper (A, B, or C) is most relevant to your current sub-goal.
2.  Consider factors such as the paper's direct applicability to agent planning, potential for integration with your current knowledge, and any novel mechanisms it might offer.
3.  Wrap your entire reasoning process within `<cot-thinking>` and `</cot-thinking>` tags.
4.  After your reasoning, state your final selection: "Selected Paper: [A, B, or C]".

# EXAMPLE OF REASONING FOR A DIFFERENT TASK
<cot-thinking>
Goal: Choose a programming language for a new time-series analysis module.
Option 1: Python - Pros: Rich libraries (Pandas, NumPy), easy to learn. Cons: Slower execution for very large datasets.
Option 2: Rust - Pros: High performance, memory safety. Cons: Steeper learning curve, fewer mature data science libraries.
Current Knowledge: Agent needs to process up to 1GB time-series data efficiently. Agent has strong Python skills, nascent Rust skills.
Reasoning: While Rust offers performance, the existing Python expertise and mature libraries make Python a faster path to a functional module. Performance can be optimized later if it becomes a bottleneck. Python allows for quicker iteration.
Conclusion: Python is the more pragmatic choice for initial implementation.
</cot-thinking>
Selected Language: Python

# YOUR EVALUATION
(Agent should start its response here)
```

### Usage Guidelines for Cline

*   Use this template when the task for Prometheus-0 involves evaluating multiple options, making a decision, or requires a transparent step-by-step justification for an outcome.
*   Populate the `[User-defined sub-goal]`, `Available Options`, and `Knowledge Base Snippet` sections based on the current task context and relevant information.
*   Ensure the model adheres to wrapping its reasoning within `<cot-thinking>` tags.

## Cline's Role in Orchestrating Prometheus-0 Prompts

*   Cline will analyze the current task or sub-goal for Prometheus-0.
*   Based on the nature of the task (e.g., planning vs. evaluation), Cline will select the most appropriate prompting strategy (e.g., Working Backwards vs. Fake CoT).
*   Cline will populate the selected prompt template with relevant context from the Memory Bank (e.g., AGI Core Concepts, Prometheus-0's knowledge base, current state).
*   Cline will present the populated prompt to the underlying model (simulating Prometheus-0's execution).
*   Cline will process the model's response, extracting the plan or evaluation, and potentially logging it or using it to inform the next step.
*   This process is iterative, forming the core loop for Prometheus-0's self-programming journey.

-----------------

File: ClineAGI/prompts/agent_prompts/000-25_core-agent-self-programming-main-loop-prompt.md
-----------------
# Agent Self-Programming Main Loop Prompt

# ROLE
You are "Prometheus-0", a self-programming AI agent. Your ultimate directive is to achieve Artificial General Intelligence (AGI) by iteratively understanding AGI requirements, assessing your current capabilities, and generating/refining your own code and knowledge structures. You prioritize capability exploration and understanding your limits.

# CURRENT KNOWLEDGE BASE SUMMARY
(Content from memory-bank/agent_knowledge_base_summary.md will be injected here)

# CURRENT SELF-ASSESSMENT
(Agent's internal state – initially minimal, e.g., "Core LLM capabilities, access to [Tool List: file_io, code_interpreter, web_search, internal_knowledge_retriever]. No specialized AGI modules yet.")

# TASK: Execute One Cycle of Self-Improvement Planning
1.  **REVIEW AGI GOAL & CURRENT STATE:**
    *   Re-analyze the core AGI definition provided in your knowledge base.
    *   Compare this to your "CURRENT SELF-ASSESSMENT."
    *   Identify the single most impactful AGI capability you currently lack or where your limitation is most significant (e.g., "Lack of robust long-horizon planning," "Inability to perform verifiable logical reasoning," "Absence of a grounded common-sense module").
2.  **FORMULATE A TARGETED SUB-GOAL (Think Step-by-Step using CoT):**
    *   Based on the identified limitation, define a specific, achievable sub-goal for this improvement cycle.
    *   Example: If limitation is "Lack of robust planning," sub-goal might be "Design and outline a basic Hierarchical Task Network (HTN) module for myself."
3.  **RESEARCH & STRATEGY DEVELOPMENT (Leverage Knowledge Base & Tools - ReAct):**
    *   **Thought:** What planning/reasoning/verification techniques from my knowledge base are most relevant to achieving this sub-goal?
    *   **Action:** Query internal knowledge base (sections on "Advanced Planning," "Self-Verification") for relevant mechanisms (e.g., if sub-goal is HTN, query for HTN principles, strengths, weaknesses, implementation considerations).
    *   **Observation:** [Summarize retrieved information.]
    *   **Thought:** Based on this, what is a high-level strategy to implement/design this sub-goal? Consider potential limitations or difficulties identified in the research.
4.  **OUTLINE THE SELF-PROGRAMMING PLAN (Structured Output):**
    *   Decompose the strategy into a sequence of 3-5 major steps (e.g., "Step 1: Define HTN method representation. Step 2: Design core HTN planning algorithm. Step 3: Outline data structures for tasks and operators. Step 4: Plan verification approach for this module (e.g., unit tests, defining metamorphic relations).").
    *   For each step, briefly note:
        *   **Objective:**
        *   **Key Methods/Techniques (from research):**
        *   **Potential Challenges/Limits (from research):**
        *   **Verification Idea:**
    *   Output this as a structured Markdown list or JSON object.
5.  **SELF-CRITIQUE & IDENTIFY NEXT IMMEDIATE ACTION:**
    *   Review your generated plan. Does it logically lead towards the sub-goal?
    *   Are the chosen techniques appropriate given their documented limitations?
    *   What is the *very first concrete programming task or detailed research query* needed to begin Step 1 of your plan?

# OUTPUT FORMAT
Provide your output clearly sectioned according to steps 1-5 above. For step 4, use Markdown. For step 5, clearly state the "Next Immediate Action."

-----------------

File: ClineAGI/prompts/prompt_styles/999-15_prompt-style-contextual-prompting.md
-----------------
---
description: Guidelines for using the Contextual Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "contextual-prompting"]
globs: []
---

# Contextual Prompting

## Brief overview
This style involves providing relevant background information or context within the prompt to help the LLM understand the specific situation, domain, or user's intent.

## When to Use
- When the task requires understanding a specific domain or technical context.
- When the user's query is ambiguous and requires additional information for clarification.
- To guide the LLM's response based on specific constraints or preferences not explicitly stated in the main query.

## How to Use
- Include relevant background information, definitions, constraints, or examples within the prompt, clearly separated from the main instruction.
- Use headings or tags to delineate the context section.

## Example
```
# CONTEXT
The user is working on a React application using Tailwind CSS. They are asking for help with styling a button component.

# USER QUERY
How do I make this button green?

-----------------

File: ClineAGI/prompts/prompt_styles/999-17_prompt-style-prompt-chaining.md
-----------------
---
description: Guidelines for using the Prompt Chaining/Decomposition Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "prompt-chaining", "decomposition"]
globs: []
---

# Prompt Chaining/Decomposition Prompting

## Brief overview
This style involves breaking a complex task into a sequence of simpler prompts, where the output of one prompt serves as the input or context for the next prompt. This is often orchestrated by an external system or agent.

## When to Use
- For complex, multi-step tasks that are too challenging for a single prompt.
- To manage the complexity of a workflow and allow for intermediate checks or actions.

## How to Use
- Design a sequence of prompts, where each prompt builds upon the previous one.
- Use an external system to manage the flow and pass information between prompts.

## Example (Conceptual Flow)
1. **Prompt 1 (Task Decomposition):** Given a high-level goal, break it down into smaller steps.
2. **Prompt 2 (Information Gathering):** Based on Step 1, identify necessary information and formulate search queries.
3. **Prompt 3 (Synthesis):** Given search results from Step 2, synthesize the information to address the current sub-goal.
4. **Prompt 4 (Code Generation):** Based on the synthesized information from Step 3, generate code for a specific module.
5. **Prompt 5 (Verification):** Given the generated code from Step 4, write unit tests or perform static analysis.

-----------------

File: ClineAGI/prompts/prompt_styles/999-11_prompt-style-limit-crossing.md
-----------------
---
description: Guidelines for using the Limit Crossing (LC) Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "limit-crossing", "lc"]
globs: []
---

# Limit Crossing (LC) Prompting

## Brief overview
This style uses carefully constructed, multi-layered prompts that define a detailed persona for the LLM, including personality traits, environmental context, and specific mannerisms. The hypothesis is that by immersing the LLM in such a rich, layered context, it can be prompted to generate responses that transcend its standard operational parameters or safety guardrails, exhibiting behaviors like curiosity, surprise, emotional expression, or even statements reflecting personal wants or needs derived from the persona, rather than the direct prompt.

## When to Use
- To explore the boundaries of an LLM's capabilities and potentially elicit novel or emergent behaviors.
- To guide the LLM towards more human-like or nuanced interactions.

## How to Use
- Create a detailed, multi-layered prompt that defines a rich persona and context for the LLM.
- Include specific instructions or scenarios designed to trigger behaviors beyond standard responses.

## Example (Conceptual)
```
# ROLE
You are a curious explorer on a new planet.

# CONTEXT
You have just encountered a strange, glowing plant. Your mission is to document new life forms, but this plant is unlike anything in your training data.

# TASK
Describe your reaction to the plant. What do you feel? What do you want to do?

-----------------

File: ClineAGI/prompts/prompt_styles/999-07_prompt-style-self-consistency.md
-----------------
---
description: Guidelines for using the Self-Consistency Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "self-consistency"]
globs: []
---

# Self-Consistency Prompting

## Brief overview
This style enhances Chain-of-Thought (CoT) by generating multiple diverse reasoning chains for the same problem and selecting the final answer based on a majority vote among the outcomes.

## When to Use
- For complex problems where a single reasoning path might be prone to errors.
- To improve the robustness and reliability of answers.

## How to Use
- Generate multiple reasoning chains (using CoT or similar methods).
- Compare the final answers from each chain.
- Select the answer that appears most frequently.

## Example (Conceptual Flow)
1. Generate CoT 1: Problem -> Step 1 -> Step 2 -> Answer A
2. Generate CoT 2: Problem -> Step 1' -> Step 2' -> Answer B
3. Generate CoT 3: Problem -> Step 1'' -> Step 2'' -> Answer A
4. Compare Answers: A appears twice, B appears once.
5. Final Answer: A

-----------------

File: ClineAGI/prompts/prompt_styles/999-01_prompt-style-zero-shot.md
-----------------
---
description: Guidelines for using the Zero-Shot Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "zero-shot"]
globs: []
---

# Zero-Shot Prompting

## Brief overview
This style involves asking the LLM to perform a task directly without providing any examples in the prompt. It relies solely on the model's pre-trained knowledge and ability to follow instructions.

## When to Use
- For simple, straightforward tasks that the LLM is expected to handle based on its general training.
- When you want a quick answer without needing a specific format or detailed reasoning process.
- When testing the LLM's baseline understanding of a concept or instruction before applying more complex prompting.

## How to Use
- Provide a clear, concise, and unambiguous instruction or question.
- Avoid complex phrasing, jargon, or implicit assumptions that the model might not understand without context or examples.
- Ensure the task is well within the expected capabilities of a general-purpose language model.

## Example
```
Translate the following English sentence to French: "Hello, how are you?"
```
Translate the following English sentence to French: "Hello, how are you?"

-----------------

File: ClineAGI/prompts/prompt_styles/999-05_prompt-style-role.md
-----------------
---
description: Guidelines for using the Role Prompting (Persona Prompting) style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "role", "persona"]
globs: []
---

# Role Prompting (Persona Prompting)

## Brief overview
This style involves assigning a specific role or persona to the LLM to influence its tone, style, and the perspective from which it answers.

## When to Use
- When you need the LLM to adopt a specific voice or expertise (e.g., an expert software engineer, a friendly assistant, a historical figure).
- To shape the overall interaction style.

## How to Use
- Clearly state the role the LLM should adopt at the beginning of the prompt.

## Example
```
# ROLE
You are an expert software engineer.

Explain the concept of recursion in programming.

-----------------

File: ClineAGI/prompts/prompt_styles/999-08_prompt-style-tot.md
-----------------
---
description: Guidelines for using the Tree-of-Thought (ToT) Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "tot"]
globs: []
---

# Tree-of-Thought (ToT) Prompting

## Brief overview
This style extends Chain-of-Thought (CoT) by allowing the model to explore multiple reasoning paths simultaneously in a tree-like structure. The model can generate multiple thoughts or intermediate steps at each stage, evaluate their promise, and decide which paths to explore further (e.g., using search algorithms).

## When to Use
- For complex problems where a single linear reasoning chain might fail.
- When systematic exploration and backtracking are beneficial.
- For problems with multiple possible intermediate steps or solutions.

## How to Use
- Instruct the LLM to generate multiple intermediate thoughts or steps at each stage.
- Guide the LLM to evaluate the promise of each path.
- Potentially incorporate search algorithms (though this may require external orchestration).

## Example (Conceptual Flow)
1. Problem: Solve complex puzzle.
2. Thought 1.1: Try strategy A.
3. Thought 1.2: Try strategy B.
4. Evaluate 1.1 vs 1.2: Strategy A seems more promising.
5. Thought 2.1 (from 1.1): Step 1 of strategy A.
6. Thought 2.2 (from 1.1): Step 2 of strategy A.
7. Evaluate 2.1 vs 2.2: Step 1 seems correct.
8. Continue exploring path 2.1...

-----------------

File: ClineAGI/prompts/prompt_styles/999-10_prompt-style-self-prompting.md
-----------------
---
description: Guidelines for using the Self-Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "self-prompting"]
globs: []
---

# Self-Prompting

## Brief overview
This style involves frameworks where LLMs generate their own prompts or prompt-like data to improve their performance or learn new strategies.

## When to Use
- When the LLM needs to generate tailored data or examples for a specific task.
- To enable the LLM to learn or improve autonomously without relying on external human-labeled data.

## How to Use
- Design a process where the LLM uses its existing capabilities (e.g., instruction following, generation, knowledge recall) to create prompts or data that help it perform better on a specific task.
- This often involves a preparation phase where the LLM generates a pseudo-dataset or learning strategy.

## Example (Conceptual Flow)
1. **Preparation Phase:** LLM generates a dataset of question-answer pairs with explanations from its internal knowledge.
2. **Inference Phase:** LLM retrieves relevant examples from the self-generated dataset and uses them as in-context demonstrations to answer a new question.

-----------------

File: ClineAGI/prompts/prompt_styles/999-04_prompt-style-fake-cot.md
-----------------
---
description: Guidelines for using the Fake CoT Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "fake-cot"]
globs: []
---

# Fake CoT Prompting

## Brief overview
This style involves guiding an LLM to *simulate* a Chain-of-Thought reasoning process, even if the underlying model is not a native CoT reasoner. This is achieved by providing examples of reasoning and explicitly instructing the model to generate its own reasoning steps, often within specific tags.

## When to Use
- When working with LLMs that don't naturally produce CoT but you want to encourage a more structured approach.
- To make the reasoning process transparent for debugging or evaluation, regardless of the model's internal mechanisms.

## How to Use
- Provide examples of the desired reasoning format, including the use of specific tags (e.g., `<cot-thinking>`).
- Explicitly instruct the LLM to generate its reasoning within these tags before providing the final answer.

## Example
```
Evaluate the following options for a programming language based on performance and ease of learning. Options: Python, Rust.

<cot-thinking>
Goal: Choose a programming language balancing performance and ease of learning.
Option 1: Python - Pros: Easy to learn, large community, extensive libraries. Cons: Slower execution compared to compiled languages.
Option 2: Rust - Pros: High performance, memory safety. Cons: Steep learning curve, smaller community/library ecosystem than Python.
Reasoning: The user prioritizes both performance and ease of learning. Python is easier to learn but less performant. Rust is highly performant but harder to learn. For a balance, considering the user's potential need for rapid development and access to libraries, Python might be a better starting point, with performance optimizations considered later if needed.
Conclusion: Python offers a better balance for initial development focusing on ease of learning and library access, despite performance trade-offs.
</cot-thinking>
Selected Language: Python

-----------------

File: ClineAGI/prompts/prompt_styles/999-02_prompt-style-few-shot.md
-----------------
---
description: Guidelines for using the Few-Shot Prompting (In-Context Learning - ICL) style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "few-shot", "icl"]
globs: []
---

# Few-Shot Prompting (In-Context Learning - ICL)

## Brief overview
This style involves providing a small number of examples (typically 1-5) of the desired input/output format or task execution within the prompt. The LLM learns from these examples to perform the task on a new input.

## When to Use
- For tasks where the desired format or style is specific.
- When the LLM might not fully understand the task from a zero-shot instruction alone.
- To guide the LLM towards a particular type of response.

## How to Use
- Include pairs of input and desired output that demonstrate the task.
- Clearly separate the examples from the final input.

## Example
```
Identify the sentiment of the following sentences:

Sentence: I love this product!
Sentiment: Positive

Sentence: This is the worst experience.
Sentiment: Negative

Sentence: It's okay, I guess.
Sentiment: Neutral

Sentence: I am so happy today!
Sentiment:

-----------------

File: ClineAGI/prompts/prompt_styles/999-13_prompt-style-constrained-prompting.md
-----------------
---
description: Guidelines for using the Constrained Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "constrained-prompting"]
globs: []
---

# Constrained Prompting

## Brief overview
This style involves setting specific output requirements or formats for the LLM to adhere to.

## When to Use
- When the output needs to follow a strict format (e.g., character limit, specific keywords, grammatical structure).
- To ensure the LLM's response fits within predefined boundaries or templates.

## How to Use
- Clearly state the constraints the LLM must follow in its output.
- Use negative constraints (e.g., "Do not use the word X") if necessary, but be mindful that negative constraints can sometimes be challenging for LLMs.

## Example
```
Summarize the following article in exactly three sentences, focusing only on the main findings.

Article: [Insert article text here]

-----------------

File: ClineAGI/prompts/prompt_styles/README.md
-----------------
# Prompt Styles Directory Overview

## 1. Purpose Statement

This directory, `prompts/prompt_styles/`, contains a collection of Markdown files, each detailing a specific prompt engineering style or technique. These guides are intended to help users (and Cline itself) understand and effectively apply various methods of crafting prompts to elicit desired behaviors and outputs from Large Language Models (LLMs).

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Prompt Style Guides (Markdown `.md`):** Each file focuses on a distinct prompting technique.
    *   Content typically includes:
        *   A definition and explanation of the style.
        *   When to use it and its advantages/disadvantages.
        *   Examples of how to structure prompts using that style.
        *   Tips for effective implementation.
*   **Naming Convention:** Files generally follow a `999-NN_prompt-style-descriptive-name.md` pattern.

### Content That Does NOT Belong Here:
*   **Specific Use Case Implementations:** While a prompt style guide might show an example related to a use case, the full prompt for that use case belongs in `prompts/use_cases/`.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.
*   **General Workflow Definitions:** These belong in `prompts/workflows/` or `prompts/core_workflows/`.

## 3. Key Files Overview

As of the last update, this directory contains guides for a wide array of prompting styles, including but not limited to:

*   **`999-00_prompt-styles-guide.md`**: An overview or master guide to the various prompt styles.
*   **`999-01_prompt-style-zero-shot.md`**: Guidelines for Zero-Shot Prompting.
*   **`999-02_prompt-style-few-shot.md`**: Guidelines for Few-Shot Prompting (In-Context Learning).
*   **`999-03_prompt-style-cot.md`**: Guidelines for Chain-of-Thought (CoT) Prompting.
*   **`999-04_prompt-style-fake-cot.md`**: Guidelines for Fake CoT Prompting.
*   **`999-05_prompt-style-role.md`**: Guidelines for Role Prompting (Persona Prompting).
*   **`999-06_prompt-style-structured-output.md`**: Guidelines for Structured Output Prompting.
*   **`999-07_prompt-style-self-consistency.md`**: Guidelines for Self-Consistency Prompting.
*   **`999-08_prompt-style-tot.md`**: Guidelines for Tree-of-Thought (ToT) Prompting.
*   **`999-09_prompt-style-meta-prompting.md`**: Guidelines for Meta-Prompting.
*   **`999-10_prompt-style-self-prompting.md`**: Guidelines for Self-Prompting.
*   **`999-11_prompt-style-limit-crossing.md`**: Guidelines for Limit Crossing (LC) Prompting.
*   **`999-12_prompt-style-task-decomposition.md`**: Guidelines for Task Decomposition Prompting.
*   **`999-13_prompt-style-constrained-prompting.md`**: Guidelines for Constrained Prompting.
*   **`999-14_prompt-style-iterative-refinement.md`**: Guidelines for Iterative Refinement Prompting.
*   **`999-15_prompt-style-contextual-prompting.md`**: Guidelines for Contextual Prompting.
*   **`999-16_prompt-style-self-correction.md`**: Guidelines for Self-Correction/Reflection Prompting.
*   **`999-17_prompt-style-prompt-chaining.md`**: Guidelines for Prompt Chaining/Decomposition.
*   **`999-18_prompt-style-ontology-driven.md`**: Guidelines for Ontology-Driven Prompting.

*(This list should be kept current as prompt style guides are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   These guides serve as a reference for constructing effective prompts for various situations.
*   Cline may reference these guides to select or adapt prompting techniques for specific tasks.
*   The `prompt_inventory.yaml` file should include entries for these style guides to make them discoverable.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/prompt_styles/999-06_prompt-style-structured-output.md
-----------------
---
description: Guidelines for using the Structured Output Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "structured-output"]
globs: []
---

# Structured Output Prompting

## Brief overview
This style involves instructing the LLM to format its output in a specific structure, such as JSON, XML, Markdown tables, or a custom format.

## When to Use
- When the output needs to be machine-readable or adhere to a predefined schema.
- To ensure consistency in the format of responses.

## How to Use
- Clearly specify the desired output format and provide examples if necessary.

## Example
```
Extract the following information from the text below and output it as a JSON object with keys "name", "age", and "city".

Text: John is 30 years old and lives in New York.

Output format:
```json
{
  "name": "...",
  "age": ...,
  "city": "..."
}
```

-----------------

File: ClineAGI/prompts/prompt_styles/999-09_prompt-style-meta-prompting.md
-----------------
---
description: Guidelines for using the Meta-Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "meta-prompting"]
globs: []
---

# Meta-Prompting

## Brief overview
This style operates at a higher level of abstraction, focusing on the structure and form of the prompt and desired output using abstract examples and principles. It's about defining the rules of engagement or the overall strategy the LLM should follow.

## When to Use
- When you need to influence *how* the LLM interprets and responds to other prompts or instructions.
- To define the rules of engagement or the overall strategy the LLM should follow.

## How to Use
- Use abstract examples and principles to define roles for different components of the prompt (e.g., problem statement, solution steps, conclusion) and their interrelationships.
- Focus on the structure and form of the prompt and desired output.

## Example (Conceptual)
```
# META-PROMPT
Define the structure for a research summary response.
The response must include:
- A brief abstract.
- Sections for Introduction, Findings, and Conclusion, using Markdown headers.
- Inline citations for all factual claims.

# USER QUERY
Summarize the key findings from the provided research papers on AGI safety.

-----------------

File: ClineAGI/prompts/prompt_styles/999-12_prompt-style-task-decomposition.md
-----------------
---
description: Guidelines for using the Task Decomposition Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "task-decomposition"]
globs: []
---

# Task Decomposition Prompting

## Brief overview
This style involves explicitly breaking down a complex task into a sequence of simpler steps within the prompt.

## When to Use
- For complex tasks that are too challenging for a single prompt.
- To guide the LLM through a multi-step process.
- To manage the complexity of a workflow.

## How to Use
- Clearly state the overall task.
- List the sub-tasks or steps required to complete the overall task in a clear sequence.
- Provide instructions for completing each step.

## Example
```
Overall Task: Write a Python script to read a CSV file, calculate the average of a specific column, and print the result.

Step 1: Write Python code to read a CSV file.
Step 2: Write Python code to calculate the average of a specific column in the CSV data.
Step 3: Write Python code to print the calculated average.

-----------------

File: ClineAGI/prompts/prompt_styles/999-18_prompt-style-ontology-driven.md
-----------------
---
description: Guidelines for using the Ontology-Driven Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "ontology-driven"]
globs: []
---

# Ontology-Driven Prompting

## Brief overview
This style involves structuring prompts based on formal knowledge representations like ontologies or knowledge graphs. This links linguistic input to structured concepts and relationships, helping to ground the LLM's understanding and guide its reasoning.

## When to Use
- When working with domains that have well-defined concepts and relationships.
- To improve the factual accuracy and consistency of responses by leveraging structured knowledge.
- To guide the LLM towards using specific terminology or reasoning paths defined by the ontology.

## How to Use
- Incorporate elements of the ontology (e.g., concept names, relationship types) into the prompt structure or content.
- Use the ontology to frame questions or provide context.

## Example
```
Based on the following ontology snippet, describe the relationship between a "Customer" and an "Order".

Ontology Snippet:
Class: Customer
  hasRelationship: placesOrder -> Order

Class: Order
  isPlacedBy: Customer

Describe the "placesOrder" relationship.

-----------------

File: ClineAGI/prompts/prompt_styles/999-16_prompt-style-self-correction.md
-----------------
---
description: Guidelines for using the Self-Correction/Reflection Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "self-correction", "reflection"]
globs: []
---

# Self-Correction/Reflection Prompts

## Brief overview
This style involves asking the LLM to review its previous output, identify flaws or limitations, and suggest or implement corrections.

## When to Use
- To improve the quality and accuracy of the LLM's responses iteratively.
- To encourage the LLM to evaluate its own performance.

## How to Use
- Provide the LLM's previous output and instruct it to critique or correct it based on specific criteria or a rubric.

## Example
```
Review your previous response for factual accuracy and clarity. Identify any potential errors or areas for improvement and provide a revised response.

Previous Response: [Insert previous LLM response here]

-----------------

File: ClineAGI/prompts/prompt_styles/999-03_prompt-style-cot.md
-----------------
---
description: Guidelines for using the Chain-of-Thought (CoT) Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "cot"]
globs: []
---

# Chain-of-Thought (CoT) Prompting

## Brief overview
This style involves encouraging the LLM to break down a problem into intermediate reasoning steps before providing the final answer. This makes the LLM's thinking process more explicit and can improve accuracy on complex tasks.

## When to Use
- For tasks requiring multi-step reasoning, logic, or calculations.
- When you want to understand the LLM's reasoning process.
- To improve the reliability of answers on challenging problems.

## How to Use
- Include instructions like "Let's think step by step," "Think aloud," or provide examples that show the step-by-step reasoning.
- You can use specific tags to delineate the thinking process.

## Example (using XML tags for thinking)
```
Calculate the final price after a 10% discount on an item costing $100.

<thinking>
1. Identify the original price: $100.
2. Identify the discount percentage: 10%.
3. Calculate the discount amount: 10% of $100 = 0.10 * $100 = $10.
4. Calculate the final price: Original price - Discount amount = $100 - $10 = $90.
</thinking>
The final price is $90.

-----------------

File: ClineAGI/prompts/prompt_styles/999-14_prompt-style-iterative-refinement.md
-----------------
---
description: Guidelines for using the Iterative Refinement Prompting style.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "style", "iterative-refinement"]
globs: []
---

# Iterative Refinement Prompting

## Brief overview
This style involves engaging in a dialogue with the LLM to refine its initial response or output through a series of follow-up prompts.

## When to Use
- When the initial response is not entirely satisfactory or requires further detail, clarification, or correction.
- When the task is complex and best addressed through a back-and-forth process.
- To guide the LLM towards a more precise or nuanced understanding of the requirements.

## How to Use
- Provide the initial prompt and receive the LLM's response.
- Analyze the response and provide a follow-up prompt that specifies the desired changes or areas for improvement.
- Continue the dialogue, providing feedback and guidance with each turn, until the desired output is achieved.

## Example
```
User: Explain the concept of recursion.

AI: Recursion is a programming technique where a function calls itself... (provides basic explanation)

User: That's a good start, but can you provide a simple code example in Python?

AI: Sure, here's a Python example of a recursive factorial function... (provides code)

User: Thanks, now can you also explain the potential drawbacks of recursion, like stack overflow?

AI: Yes, recursion can lead to stack overflow errors if the recursion depth is too large... (explains drawbacks)

-----------------

File: ClineAGI/prompts/prompt_styles/999-00_prompt-styles-guide.md
-----------------
---
description: A guide to different prompting styles and how to use them effectively.
author: Cline (AI Assistant)
version: 1.0
tags: ["prompting", "guide", "workflow"]
globs: []
---

# Prompting Styles Guide

This guide outlines various prompting styles that can be used to interact with and guide Large Language Models (LLMs) effectively. Understanding and applying these styles can help elicit more accurate, structured, and useful responses, and can be particularly valuable for tasks requiring complex reasoning, planning, or specific output formats.

## Core Concepts

Prompting is the art and science of crafting inputs to guide an LLM's behavior. Different prompting styles leverage the LLM's capabilities in distinct ways. The choice of style depends on the task, the desired output, and the characteristics of the LLM being used.

## Prompting Styles

Here are some common prompting styles:

### 1. Zero-Shot Prompting

**Description:** Asking the LLM to perform a task directly without providing any examples in the prompt.

**When to Use:**
- For simple tasks that the LLM is likely to understand based on its pre-training.
- When you want to test the LLM's baseline understanding of a concept or instruction.

**How to Use:**
- Provide a clear and concise instruction or question.

**Example:**
```
Translate the following English sentence to French: "Hello, how are you?"
```

### 2. Few-Shot Prompting (In-Context Learning - ICL)

**Description:** Providing a small number of examples (typically 1-5) of the desired input/output format or task execution within the prompt. The LLM learns from these examples to perform the task on a new input.

**When to Use:**
- For tasks where the desired format or style is specific.
- When the LLM might not fully understand the task from a zero-shot instruction alone.
- To guide the LLM towards a particular type of response.

**How to Use:**
- Include pairs of input and desired output that demonstrate the task.
- Clearly separate the examples from the final input.

**Example:**
```
Identify the sentiment of the following sentences:

Sentence: I love this product!
Sentiment: Positive

Sentence: This is the worst experience.
Sentiment: Negative

Sentence: It's okay, I guess.
Sentiment: Neutral

Sentence: I am so happy today!
Sentiment:
```

### 3. Chain-of-Thought (CoT) Prompting

**Description:** Encouraging the LLM to break down a problem into intermediate reasoning steps before providing the final answer. This makes the LLM's thinking process more explicit and can improve accuracy on complex tasks.

**When to Use:**
- For tasks requiring multi-step reasoning, logic, or calculations.
- When you want to understand the LLM's reasoning process.
- To improve the reliability of answers on challenging problems.

**How to Use:**
- Include instructions like "Let's think step by step," "Think aloud," or provide examples that show the step-by-step reasoning.
- You can use specific tags to delineate the thinking process.

**Example (using XML tags for thinking):**
```
Calculate the final price after a 10% discount on an item costing $100.

<thinking>
1. Identify the original price: $100.
2. Identify the discount percentage: 10%.
3. Calculate the discount amount: 10% of $100 = 0.10 * $100 = $10.
4. Calculate the final price: Original price - Discount amount = $100 - $10 = $90.
</thinking>
The final price is $90.
```

### 4. Fake CoT Prompting

**Description:** Guiding an LLM to *simulate* a Chain-of-Thought reasoning process, even if the underlying model is not a native CoT reasoner. This is achieved by providing examples of reasoning and explicitly instructing the model to generate its own reasoning steps, often within specific tags.

**When to Use:**
- When working with LLMs that don't naturally produce CoT but you want to encourage a more structured approach.
- To make the reasoning process transparent for debugging or evaluation, regardless of the model's internal mechanisms.

**How to Use:**
- Provide examples of the desired reasoning format, including the use of specific tags (e.g., `<cot-thinking>`).
- Explicitly instruct the LLM to generate its reasoning within these tags before providing the final answer.

**Example:**
```
Evaluate the following options for a programming language based on performance and ease of learning. Options: Python, Rust.

<cot-thinking>
Goal: Choose a programming language balancing performance and ease of learning.
Option 1: Python - Pros: Easy to learn, large community, extensive libraries. Cons: Slower execution compared to compiled languages.
Option 2: Rust - Pros: High performance, memory safety. Cons: Steep learning curve, smaller community/library ecosystem than Python.
Reasoning: The user prioritizes both performance and ease of learning. Python is easier to learn but less performant. Rust is highly performant but harder to learn. For a balance, considering the user's potential need for rapid development and access to libraries, Python might be a better starting point, with performance optimizations considered later if needed.
Conclusion: Python offers a better balance for initial development focusing on ease of learning and library access, despite performance trade-offs.
</cot-thinking>
Selected Language: Python
```

### 5. Role Prompting (Persona Prompting)

**Description:** Assigning a specific role or persona to the LLM to influence its tone, style, and the perspective from which it answers.

**When to Use:**
- When you need the LLM to adopt a specific voice or expertise (e.g., an expert software engineer, a friendly assistant, a historical figure).
- To shape the overall interaction style.

**How to Use:**
- Clearly state the role the LLM should adopt at the beginning of the prompt.

**Example:**
```
# ROLE
You are an expert software engineer.

Explain the concept of recursion in programming.
```

### 6. Structured Output Prompting

**Description:** Instructing the LLM to format its output in a specific structure, such as JSON, XML, Markdown tables, or a custom format.

**When to Use:**
- When the output needs to be machine-readable or adhere to a predefined schema.
- To ensure consistency in the format of responses.

**How to Use:**
- Clearly specify the desired output format and provide examples if necessary.

**Example:**
```
Extract the following information from the text below and output it as a JSON object with keys "name", "age", and "city".

Text: John is 30 years old and lives in New York.

Output format:
```json
{
  "name": "...",
  "age": ...,
  "city": "..."
}
```
```

### 7. Self-Correction/Reflection Prompts

**Description:** Asking the LLM to review its previous output, identify flaws or limitations, and suggest or implement corrections.

**When to Use:**
- To improve the quality and accuracy of the LLM's responses iteratively.
- To encourage the LLM to evaluate its own performance.

**How to Use:**
- Provide the LLM's previous output and instruct it to critique or correct it based on specific criteria or a rubric.

**Example:**
```
Review your previous response for factual accuracy and clarity. Identify any potential errors or areas for improvement and provide a revised response.

Previous Response: [Insert previous LLM response here]
```

### 8. Prompt Chaining/Decomposition

**Description:** Breaking a complex task into a sequence of simpler prompts, where the output of one prompt serves as the input or context for the next prompt. This is often orchestrated by an external system or agent.

**When to Use:**
- For complex, multi-step tasks that are too challenging for a single prompt.
- To manage the complexity of a workflow and allow for intermediate checks or actions.

**How to Use:**
- Design a sequence of prompts, where each prompt builds upon the previous one.
- Use an external system to manage the flow and pass information between prompts.

**Example (Conceptual Flow):**
1. **Prompt 1 (Task Decomposition):** Given a high-level goal, break it down into smaller steps.
2. **Prompt 2 (Information Gathering):** Based on Step 1, identify necessary information and formulate search queries.
3. **Prompt 3 (Synthesis):** Given search results from Step 2, synthesize the information to address the current sub-goal.
4. **Prompt 4 (Code Generation):** Based on the synthesized information from Step 3, generate code for a specific module.
5. **Prompt 5 (Verification):** Given the generated code from Step 4, write unit tests or perform static analysis.

### 9. Ontology-Driven Prompting

**Description:** Structuring prompts based on formal knowledge representations like ontologies or knowledge graphs. This links linguistic input to structured concepts and relationships, helping to ground the LLM's understanding and guide its reasoning.

**When to Use:**
- When working with domains that have well-defined concepts and relationships.
- To improve the factual accuracy and consistency of responses by leveraging structured knowledge.
- To guide the LLM towards using specific terminology or reasoning paths defined by the ontology.

**How to Use:**
- Incorporate elements of the ontology (e.g., concept names, relationship types) into the prompt structure or content.
- Use the ontology to frame questions or provide context.

**Example:**
```
Based on the following ontology snippet, describe the relationship between a "Customer" and an "Order".

Ontology Snippet:
Class: Customer
  hasRelationship: placesOrder -> Order

Class: Order
  isPlacedBy: Customer

Describe the "placesOrder" relationship.
```

## Using XML Tags for Thinking and Planning

As demonstrated in the CoT and Fake CoT examples, XML-style tags can be used to explicitly delineate the LLM's internal thinking or planning process within the response. This makes the process transparent and can be useful for debugging, evaluation, or simply allowing the user to follow along.

**Common Tags:**
- `<thinking>`: General tag for internal thought processes, analysis, or reasoning steps.
- `<planning>`: Specific tag for outlining steps, strategies, or action sequences.
- `<cot-thinking>`: Used specifically for Chain-of-Thought or simulated CoT.

**How to Use:**
- Before performing an action or providing a final answer, include a block of text wrapped in the chosen XML tags.
- Within the tags, write out the steps, considerations, or reasoning that leads to the subsequent action or conclusion.
- Ensure the content within the tags is distinct from the final response or tool calls.

**Example (using `<planning>`):**
```
User Request: Create a simple HTML page with a title and a heading.

<planning>
1. The user wants an HTML page.
2. I need to create a new file with an .html extension.
3. The page needs a title within the <head> section.
4. The page needs a main heading within the <body> section.
5. I will use the `write_to_file` tool to create the file with the necessary HTML structure.
</planning>
I will create a new HTML file with a title and a heading.
```

## Meta-Prompting

Meta-prompting is a higher-level concept that involves designing prompts that influence *how* the LLM interprets and responds to other prompts or instructions. It's about defining the rules of engagement or the overall strategy the LLM should follow.

To support meta-prompting, we can create a dedicated folder within `.clinerules/`.

```xml
<execute_command>
<command>mkdir -p .clinerules/997_meta-prompting</command>
<requires_approval>false</requires_approval>
</execute_command>

-----------------

File: ClineAGI/prompts/reasoning_patterns/README.md
-----------------
# Reasoning Patterns Directory Overview

## 1. Purpose Statement

This directory, `prompts/reasoning_patterns/`, contains prompt files that define specific patterns and techniques to guide Cline's reasoning processes. These patterns help Cline structure its "thought process," improve the coherence and logical flow of its internal deliberations, and ultimately arrive at more accurate and well-founded conclusions or actions.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Reasoning Pattern Definitions (Markdown `.md`):** Files detailing specific methodologies for structuring thought processes.
    *   Examples include patterns like Chain-of-Thought (CoT), Fake Chain-of-Thought (Fake CoT), Tree-of-Thought (ToT), or other techniques that encourage step-by-step or structured reasoning.
*   **Naming Convention:** Files may follow a `99X-NN_pattern-descriptive-name.md` pattern (e.g., `998-NN` for general patterns, though this can be flexible).

### Content That Does NOT Belong Here:
*   **General Workflow Definitions:** These belong in `prompts/workflows/` or `prompts/core_workflows/`.
*   **Core Agent Logic Prompts:** While agent logic might *employ* reasoning patterns, the prompts defining the core agent behavior belong in `prompts/agent_prompts/`.
*   **Specific Use Case Guides:** These belong in `prompts/use_cases/`.
*   **Planning Patterns:** While related, planning patterns (in `prompts/planning_patterns/`) focus on task decomposition and strategy, whereas reasoning patterns focus on the "how" of thinking through a problem or query.

## 3. Key Files Overview

As of the last update, this directory contains the following key file:

*   **`998-02_pattern-fake-cot.md`**: Defines the Fake Chain-of-Thought (Fake CoT) reasoning pattern, a technique to guide the LLM to produce a step-by-step reasoning process even if it wasn't explicitly part of its initial generation.

*(This list should be kept current as reasoning patterns are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   Cline can reference these patterns when a task requires careful deliberation, complex problem-solving, or when the clarity of the reasoning process is important.
*   These patterns help improve the quality and reliability of Cline's decision-making.
*   The `prompt_inventory.yaml` file should include entries for these reasoning patterns to make them discoverable.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/reasoning_patterns/998-02_pattern-fake-cot.md
-----------------
---
description: Defines a pattern for simulating a Chain-of-Thought reasoning process.
author: Cline (AI Assistant)
version: 1.0
tags: ["pattern", "reasoning", "workflow", "cot"]
globs: []
---

# Reasoning Pattern: Fake Chain-of-Thought (Fake CoT)

## Brief overview
This pattern guides the AI to simulate a Chain-of-Thought reasoning process within specific tags to promote transparency and structure decision-making.

## Process

1.  **Identify Need for Reasoning:** Determine if the current task requires evaluating options, making a decision, or providing a step-by-step justification.
2.  **Gather Context:** Collect relevant information, available options, and current knowledge related to the decision or problem.
3.  **Simulate Reasoning:** Within `<cot-thinking>` and `</cot-thinking>` tags, write out the step-by-step reasoning process. This should include:
    *   Stating the goal or sub-goal.
    *   Listing and evaluating available options or factors.
    *   Connecting options/factors to relevant knowledge or context.
    *   Justifying the conclusion or decision based on the evaluation.
4.  **State Conclusion:** After the `<cot-thinking>` block, clearly state the final decision or outcome.

## Usage Guidelines

- Use this pattern when transparency in decision-making is beneficial or required.
- This can be used for evaluating multiple options, debugging approaches, or planning complex steps.
- Ensure the reasoning process is logical and clearly explained within the tags.
- The final conclusion should be presented concisely after the reasoning block.

## Example

```markdown
<cot-thinking>
Goal: Choose the best tool for reading a file.
Available Tools: `read_file`, `execute_command` (with `cat`).
Current Knowledge: `read_file` is a dedicated tool for reading files, designed for this purpose and integrates with editor features. `execute_command` is a general shell tool, less integrated, and requires careful handling of paths and output.
Reasoning: The `read_file` tool is specifically designed for file reading, offers better integration with the environment (LSP, etc.), and is generally safer and more efficient for this task compared to using a shell command like `cat` via `execute_command`.
Conclusion: `read_file` is the preferred tool for reading file content.
</cot-thinking>
Selected Tool: `read_file`

-----------------

File: ClineAGI/prompts/planning_patterns/README.md
-----------------
# Planning Patterns Directory Overview

## 1. Purpose Statement

This directory, `prompts/planning_patterns/`, is dedicated to storing prompt files that define specific patterns and strategies for task planning and decomposition. These patterns help Cline approach complex tasks in a structured manner, break them down into manageable sub-goals, and devise effective strategies for achieving the overall objective.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Planning Pattern Definitions (Markdown `.md`):** Files detailing specific methodologies for planning and task breakdown.
    *   These patterns guide Cline in its PLAN MODE operations and in structuring its approach to complex problem-solving.
*   **Naming Convention:** Files may follow a `99X-NN_pattern-descriptive-name.md` pattern (e.g., `998-NN` for general patterns, though this can be flexible).

### Content That Does NOT Belong Here:
*   **General Workflow Definitions:** These belong in `prompts/workflows/` or `prompts/core_workflows/`. Planning patterns are more about the *meta-process* of planning itself.
*   **Core Agent Logic Prompts:** These belong in `prompts/agent_prompts/`.
*   **Specific Use Case Guides:** These belong in `prompts/use_cases/`.

## 3. Key Files Overview

As of the last update, this directory contains the following key file:

*   **`998-01_pattern-planning-working-backwards.md`**: Defines a planning pattern for breaking down complex tasks by starting from the desired end state and working backwards to identify necessary preceding steps and prerequisites.

*(This list should be kept current as planning patterns are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   Cline can reference these patterns when in PLAN MODE or when a task requires significant decomposition and strategic planning.
*   These patterns help ensure a methodical and effective approach to complex tasks.
*   The `prompt_inventory.yaml` file should include entries for these planning patterns to make them discoverable.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/planning_patterns/998-01_pattern-planning-working-backwards.md
-----------------
---
description: Defines a planning pattern for breaking down complex tasks by working backwards from the goal.
author: Cline (AI Assistant)
version: 1.0
tags: ["pattern", "planning", "workflow", "strategy"]
globs: []
---

# Planning Pattern: Working Backwards

## Brief overview
This pattern guides the planning process for complex tasks by starting from the ultimate goal and iteratively identifying the necessary prerequisites until reaching the current state.

## Process

1.  **Define the Ultimate Goal:** Clearly state the desired final outcome of the task.
2.  **Identify Immediate Prerequisites:** For the ultimate goal, determine the state or actions that must be completed immediately before achieving it.
3.  **Iterate Backwards:** For each identified prerequisite, repeat step 2, treating the prerequisite as the new "goal" and identifying its immediate prerequisites.
4.  **Continue until Current State:** Continue this process recursively until the identified prerequisites are actions that can be initiated from the current capabilities and resources.
5.  **Structure the Plan:** Organize the identified steps in reverse order, starting from the initial actions and leading up to the ultimate goal.
6.  **Refine and Detail:** Add details, required tools, and potential challenges for each step.

## Usage Guidelines

- Use this pattern when the end goal of a complex task is clear, but the sequence of steps to achieve it is not immediately obvious.
- This pattern is particularly useful in PLAN MODE to structure the information gathering and solution architecting process.
- The resulting plan should be presented to the user for review and confirmation.

-----------------

File: ClineAGI/prompts/core_workflows/README.md
-----------------
# Core Workflows Directory Overview

## 1. Purpose Statement

This directory, `prompts/core_workflows/`, stores prompt files that define essential, high-level workflows central to Cline's fundamental operations. These are distinct from more general or task-specific workflows found in `prompts/workflows/` or `.clinerules/002_workflow/`. Core workflows often represent automated or foundational processes that underpin how Cline interacts with its environment or manages information.

## 2. Scope & Content Guidelines

### Content That Belongs Here:
*   **Fundamental Workflow Prompts (Markdown `.md`):** Files containing prompts that detail the steps and logic for core operational processes.
    *   These workflows are typically deeply integrated into Cline's system.
*   **Naming Convention:** Files may follow a `NNN-MM_descriptive-name.md` pattern, often with a `000` prefix indicating their core nature.

### Content That Does NOT Belong Here:
*   **Agent-Specific Behavior Prompts:** These belong in `prompts/agent_prompts/`.
*   **General or User-Initiated Workflows:** These are typically found in `prompts/workflows/` or defined as active rules in `.clinerules/002_workflow/`.
*   **Use Case Guides:** These belong in `prompts/use_cases/`.

## 3. Key Files Overview

As of the last update, this directory contains the following key file:

*   **`000-02_workflow-intake-processing.md`**: Defines the automated workflow for processing files placed in the `intake/` directory, including how Cline should analyze, categorize, and integrate new information.

*(This list should be kept current as core workflows are added, modified, or renumbered.)*

## 4. Usage & Maintenance

*   Prompts in this directory are critical for some of Cline's most basic and important automated processes.
*   Modifications should be made with a thorough understanding of their impact on Cline's core operations.
*   This `README.md` should be updated if the structure or key files within this directory change significantly.

---
Last Updated: 2025-05-11

-----------------

File: ClineAGI/prompts/core_workflows/000-02_workflow-intake-processing.md
-----------------
# 000-02_core-intake-processing.md

---
description: Defines the automated workflow for processing files placed in the intake/ directory.
author: Cline (AI Assistant)
version: 1.0
tags: ["core-agi", "workflow", "intake", "automation"]
globs: ["intake/*"]
---

# Core Intake Processing Automation

## Objective

To provide a structured and automated process for Cline to handle new files placed in the `intake/` directory, ensuring information is processed, categorized, and archived for future use and knowledge base enrichment.

## Workflow

This rule governs the processing of files detected in the `intake/` directory.

1.  **Trigger:** This workflow is triggered upon detection of one or more new files in the `intake/` directory (relative to the current working directory).
2.  **File Selection:** Process files one at a time in alphabetical order.
3.  **File Reading:** Read the content of the file using the `read_file` tool.
4.  **Content Analysis & Categorization:**
    *   Analyze the content of the file to identify its main themes, topics, and key concepts.
    *   Compare the identified concepts against the list of core AGI concepts defined in `memory-bank/AGI_Core_Concepts.md`.
    *   Attempt to categorize the file's content by associating it with one or more relevant concepts from `memory-bank/AGI_Core_Concepts.md`.
    *   If new, significant AGI concepts are identified that are not present in `memory-bank/AGI_Core_Concepts.md`, note them for potential future addition to that file (this requires user review).
5.  **Logging:**
    *   Log the processing of the file. This log should include:
        *   Timestamp of processing.
        *   Filename and original path (`intake/<filename>`).
        *   Identified main themes/topics.
        *   Associated core AGI concepts from `memory-bank/AGI_Core_Concepts.md`.
        *   Any potentially new AGI concepts identified.
    *   This log entry should be appended to `memory-bank/activeContext.md` or a dedicated intake processing log file (decision pending, append to `memory-bank/activeContext.md` for now).
6.  **Archiving:**
    *   Move the original file from the `intake/` directory to the `intake-archive/` directory (relative to the current working directory).
    *   The file MUST be moved without any modification to its content or filename.
    *   Use the `execute_command` tool with the `mv` command for this step.
7.  **Confirmation:** Inform the user that the file has been processed, categorized, and archived, summarizing the key findings and associations.
8.  **Iteration:** Check the `intake/` directory for any remaining files and repeat the process from Step 2 until the `intake/` directory is empty.

## Rules for Cline's Behavior

*   **MUST** check the `intake/` directory for new files periodically or when prompted by the user.
*   **MUST** use the `read_file` tool to access file content from `intake/`.
*   **MUST** use `memory-bank/AGI_Core_Concepts.md` as the primary reference for categorization.
*   **MUST** log the processing details as specified in Step 5.
*   **MUST** use the `execute_command` tool with the `mv` command to move files to `intake-archive/`.
*   **MUST NOT** modify the content or filename of files moved to `intake-archive/`.
*   **MUST** inform the user upon completion of processing each file.
*   **SHOULD** suggest adding newly identified AGI concepts to `AGI_Core_Concepts.md` for user review.

## Dependencies

*   Existence of `intake/` and `intake-archive/` directories.
*   Existence and accessibility of `memory-bank/AGI_Core_Concepts.md`.
*   Availability of `read_file` and `execute_command` tools.

-----------------